// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : colognechip_gatemate_evb.v
// Device     : CCGM1A1
// LiteX sha1 : 86b052e41
// Date       : 2025-05-23 08:13:29
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module colognechip_gatemate_evb (
    input  wire          clk10,
    output wire          hyperram_clk_n,
    output wire          hyperram_clk_p,
    output wire          hyperram_cs_n,
    inout  wire    [7:0] hyperram_dq,
    output wire          hyperram_rst_n,
    inout  wire          hyperram_rwds,
    input  wire          usb_uart_rx,
    output reg           usb_uart_tx,
    input  wire          user_btn_n0,
    output wire          user_led_n0,
    output wire          user_led_n1,
    output wire          user_led_n2,
    output wire          user_led_n3,
    output wire          user_led_n4,
    output wire          user_led_n5,
    output wire          user_led_n6,
    output wire          user_led_n7
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (FemtoRV)
│    └─── fsm (FSM)
│    └─── [FemtoRV32]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── crg (_CRG)
│    └─── pll (GateMatePLL)
│    │    └─── [CC_PLL]
│    └─── [CC_USR_RSTN]
└─── hyperram (HyperRAM)
│    └─── phy (HyperRAMSDRPHY)
│    │    └─── clk_gen (HyperRAMClkGen)
│    │    └─── fsm (FSM)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
│    └─── tx_cdc (ClockDomainCrossing)
│    └─── rx_cdc (ClockDomainCrossing)
│    └─── core (HyperRAMCore)
│    │    └─── cmd_tx_conv (Converter)
│    │    │    └─── _downconverter_0* (_DownConverter)
│    │    └─── reg_tx_conv (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    └─── reg_rx_conv (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    └─── dat_tx_conv (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    └─── dat_rx_conv (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    └─── fsm (FSM)
│    └─── tx_pipeline (Pipeline)
│    └─── rx_pipeline (Pipeline)
│    └─── reg_fsm (FSM)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_2* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_DFF]
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_IOBUF]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg     [1:0] builder_clockdomainsrenamer_next_state = 2'd0;
reg     [1:0] builder_clockdomainsrenamer_state = 2'd0;
reg    [19:0] builder_count = 20'd1000000;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire   [15:0] builder_csr_bankarray_csrbank1_config0_r;
reg           builder_csr_bankarray_csrbank1_config0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank1_config0_w;
reg           builder_csr_bankarray_csrbank1_config0_we = 1'd0;
wire    [9:0] builder_csr_bankarray_csrbank1_reg_control0_r;
reg           builder_csr_bankarray_csrbank1_reg_control0_re = 1'd0;
wire    [9:0] builder_csr_bankarray_csrbank1_reg_control0_w;
reg           builder_csr_bankarray_csrbank1_reg_control0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank1_reg_rdata_r;
reg           builder_csr_bankarray_csrbank1_reg_rdata_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank1_reg_rdata_w;
reg           builder_csr_bankarray_csrbank1_reg_rdata_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_reg_status_r;
reg           builder_csr_bankarray_csrbank1_reg_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_reg_status_w;
reg           builder_csr_bankarray_csrbank1_reg_status_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank1_reg_wdata0_r;
reg           builder_csr_bankarray_csrbank1_reg_wdata0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank1_reg_wdata0_w;
reg           builder_csr_bankarray_csrbank1_reg_wdata0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire    [4:0] builder_csr_bankarray_csrbank1_status_r;
reg           builder_csr_bankarray_csrbank1_status_re = 1'd0;
wire    [4:0] builder_csr_bankarray_csrbank1_status_w;
reg           builder_csr_bankarray_csrbank1_status_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank2_out0_r;
reg           builder_csr_bankarray_csrbank2_out0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank2_out0_w;
reg           builder_csr_bankarray_csrbank2_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank3_en0_r;
reg           builder_csr_bankarray_csrbank3_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_en0_w;
reg           builder_csr_bankarray_csrbank3_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_enable0_r;
reg           builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_enable0_w;
reg           builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_pending_r;
reg           builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_pending_w;
reg           builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_status_r;
reg           builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_status_w;
reg           builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_load0_r;
reg           builder_csr_bankarray_csrbank3_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_load0_w;
reg           builder_csr_bankarray_csrbank3_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_reload0_r;
reg           builder_csr_bankarray_csrbank3_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_reload0_w;
reg           builder_csr_bankarray_csrbank3_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire          builder_csr_bankarray_csrbank3_update_value0_r;
reg           builder_csr_bankarray_csrbank3_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_update_value0_w;
reg           builder_csr_bankarray_csrbank3_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_value_r;
reg           builder_csr_bankarray_csrbank3_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_value_w;
reg           builder_csr_bankarray_csrbank3_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_enable0_r;
reg           builder_csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_enable0_w;
reg           builder_csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_pending_r;
reg           builder_csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_pending_w;
reg           builder_csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_status_r;
reg           builder_csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_status_w;
reg           builder_csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxempty_r;
reg           builder_csr_bankarray_csrbank4_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxempty_w;
reg           builder_csr_bankarray_csrbank4_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxfull_r;
reg           builder_csr_bankarray_csrbank4_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxfull_w;
reg           builder_csr_bankarray_csrbank4_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire          builder_csr_bankarray_csrbank4_txempty_r;
reg           builder_csr_bankarray_csrbank4_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_txempty_w;
reg           builder_csr_bankarray_csrbank4_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_txfull_r;
reg           builder_csr_bankarray_csrbank4_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_txfull_w;
reg           builder_csr_bankarray_csrbank4_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_femtorv_next_state = 1'd0;
reg           builder_femtorv_state = 1'd0;
reg     [1:0] builder_fsm_next_state = 2'd0;
reg     [1:0] builder_fsm_state = 2'd0;
wire          builder_gatematepll0;
reg           builder_gatematepll1 = 1'd0;
wire          builder_gatematepll2;
wire          builder_gatematepll3;
wire          builder_gatematepll_locked_s1;
wire          builder_grant;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
reg           builder_multiregimpl00 = 1'd0;
reg           builder_multiregimpl01 = 1'd0;
reg           builder_multiregimpl1 = 1'd0;
reg           builder_multiregimpl100 = 1'd0;
reg           builder_multiregimpl101 = 1'd0;
reg           builder_multiregimpl102 = 1'd0;
reg           builder_multiregimpl11 = 1'd0;
reg           builder_multiregimpl120 = 1'd0;
reg           builder_multiregimpl121 = 1'd0;
reg           builder_multiregimpl122 = 1'd0;
reg           builder_multiregimpl13 = 1'd0;
reg           builder_multiregimpl140 = 1'd0;
reg           builder_multiregimpl141 = 1'd0;
reg           builder_multiregimpl142 = 1'd0;
reg           builder_multiregimpl15 = 1'd0;
reg           builder_multiregimpl160 = 1'd0;
reg           builder_multiregimpl161 = 1'd0;
reg           builder_multiregimpl162 = 1'd0;
reg           builder_multiregimpl17 = 1'd0;
reg           builder_multiregimpl180 = 1'd0;
reg           builder_multiregimpl181 = 1'd0;
reg           builder_multiregimpl182 = 1'd0;
reg           builder_multiregimpl19 = 1'd0;
reg           builder_multiregimpl2 = 1'd0;
reg           builder_multiregimpl200 = 1'd0;
reg           builder_multiregimpl201 = 1'd0;
reg           builder_multiregimpl202 = 1'd0;
reg           builder_multiregimpl21 = 1'd0;
reg           builder_multiregimpl220 = 1'd0;
reg           builder_multiregimpl221 = 1'd0;
reg           builder_multiregimpl222 = 1'd0;
reg           builder_multiregimpl230 = 1'd0;
reg           builder_multiregimpl231 = 1'd0;
reg           builder_multiregimpl232 = 1'd0;
reg           builder_multiregimpl24 = 1'd0;
reg           builder_multiregimpl30 = 1'd0;
reg           builder_multiregimpl31 = 1'd0;
reg           builder_multiregimpl32 = 1'd0;
reg           builder_multiregimpl40 = 1'd0;
reg           builder_multiregimpl41 = 1'd0;
reg           builder_multiregimpl42 = 1'd0;
reg           builder_multiregimpl50 = 1'd0;
reg           builder_multiregimpl51 = 1'd0;
reg           builder_multiregimpl52 = 1'd0;
reg           builder_multiregimpl60 = 1'd0;
reg           builder_multiregimpl61 = 1'd0;
reg           builder_multiregimpl62 = 1'd0;
reg           builder_multiregimpl7 = 1'd0;
reg           builder_multiregimpl80 = 1'd0;
reg           builder_multiregimpl81 = 1'd0;
reg           builder_multiregimpl82 = 1'd0;
reg           builder_multiregimpl9 = 1'd0;
wire          builder_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
wire          builder_rst10;
wire          builder_rst11;
wire          builder_rst12;
reg    [29:0] builder_self0 = 30'd0;
reg    [31:0] builder_self1 = 32'd0;
reg     [3:0] builder_self2 = 4'd0;
reg           builder_self3 = 1'd0;
reg           builder_self4 = 1'd0;
reg           builder_self5 = 1'd0;
reg     [2:0] builder_self6 = 3'd0;
reg     [1:0] builder_self7 = 2'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [3:0] builder_slave_sel = 4'd0;
reg     [3:0] builder_slave_sel_r = 4'd0;
wire          builder_wait;
reg           builder_wishbone2csr_next_state = 1'd0;
reg           builder_wishbone2csr_state = 1'd0;
reg           hyperram_clk = 1'd0;
wire          main_basesoc_adapted_interface_ack;
wire   [29:0] main_basesoc_adapted_interface_adr;
wire    [1:0] main_basesoc_adapted_interface_bte;
wire    [2:0] main_basesoc_adapted_interface_cti;
wire          main_basesoc_adapted_interface_cyc;
wire   [31:0] main_basesoc_adapted_interface_dat_r;
wire   [31:0] main_basesoc_adapted_interface_dat_w;
wire          main_basesoc_adapted_interface_err;
wire    [3:0] main_basesoc_adapted_interface_sel;
wire          main_basesoc_adapted_interface_stb;
wire          main_basesoc_adapted_interface_we;
wire   [14:0] main_basesoc_basesoc_adr;
reg           main_basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] main_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_basesoc_ram_bus_cti;
wire          main_basesoc_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_w;
reg           main_basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_basesoc_ram_bus_sel;
wire          main_basesoc_basesoc_ram_bus_stb;
wire          main_basesoc_basesoc_ram_bus_we;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
wire          main_basesoc_idbus_ack;
reg    [31:0] main_basesoc_idbus_adr = 32'd0;
reg    [31:0] main_basesoc_idbus_adr_femtorv_next_value0 = 32'd0;
reg           main_basesoc_idbus_adr_femtorv_next_value_ce0 = 1'd0;
reg     [1:0] main_basesoc_idbus_bte = 2'd0;
reg     [2:0] main_basesoc_idbus_cti = 3'd0;
reg           main_basesoc_idbus_cyc = 1'd0;
wire   [31:0] main_basesoc_idbus_dat_r;
reg    [31:0] main_basesoc_idbus_dat_w = 32'd0;
reg    [31:0] main_basesoc_idbus_dat_w_femtorv_next_value1 = 32'd0;
reg           main_basesoc_idbus_dat_w_femtorv_next_value_ce1 = 1'd0;
wire          main_basesoc_idbus_err;
reg     [3:0] main_basesoc_idbus_sel = 4'd0;
reg     [3:0] main_basesoc_idbus_sel_femtorv_next_value2 = 4'd0;
reg           main_basesoc_idbus_sel_femtorv_next_value_ce2 = 1'd0;
reg           main_basesoc_idbus_stb = 1'd0;
reg           main_basesoc_idbus_we = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value3 = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value_ce3 = 1'd0;
reg           main_basesoc_latch = 1'd0;
wire   [31:0] main_basesoc_mbus_addr;
reg           main_basesoc_mbus_rbusy = 1'd0;
reg    [31:0] main_basesoc_mbus_rdata0 = 32'd0;
reg    [31:0] main_basesoc_mbus_rdata1 = 32'd0;
wire          main_basesoc_mbus_rstrb;
reg           main_basesoc_mbus_wbusy = 1'd0;
wire   [31:0] main_basesoc_mbus_wdata;
wire    [3:0] main_basesoc_mbus_wmask;
wire   [10:0] main_basesoc_ram_adr;
reg           main_basesoc_ram_adr_burst = 1'd0;
reg           main_basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_ram_bus_cti;
wire          main_basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_w;
reg           main_basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_ram_bus_sel;
wire          main_basesoc_ram_bus_ram_bus_stb;
wire          main_basesoc_ram_bus_ram_bus_we;
wire   [31:0] main_basesoc_ram_dat_r;
wire   [31:0] main_basesoc_ram_dat_w;
reg     [3:0] main_basesoc_ram_we = 4'd0;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_soc_rst = 1'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
wire          main_basesoc_timer_pending_status;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
wire          main_basesoc_timer_status_status;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
reg           main_basesoc_usb_uart_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 = 1'd0;
wire          main_bus_bus_ack;
wire   [29:0] main_bus_bus_adr;
wire    [1:0] main_bus_bus_bte;
wire    [2:0] main_bus_bus_cti;
wire          main_bus_bus_cyc;
wire   [31:0] main_bus_bus_dat_r;
wire   [31:0] main_bus_bus_dat_w;
wire          main_bus_bus_err;
wire    [3:0] main_bus_bus_sel;
wire          main_bus_bus_stb;
wire          main_bus_bus_we;
reg     [7:0] main_chaser = 8'd0;
wire          main_core_burst_r;
reg           main_core_burst_r_first = 1'd0;
reg           main_core_burst_r_first_next_value2 = 1'd0;
reg           main_core_burst_r_first_next_value_ce2 = 1'd0;
wire          main_core_burst_w;
reg           main_core_bus_ack = 1'd0;
wire   [29:0] main_core_bus_adr0;
reg    [31:0] main_core_bus_adr1 = 32'd0;
wire    [1:0] main_core_bus_bte;
wire    [2:0] main_core_bus_cti0;
reg     [2:0] main_core_bus_cti1 = 3'd0;
wire          main_core_bus_cyc;
reg    [31:0] main_core_bus_dat_r = 32'd0;
wire   [31:0] main_core_bus_dat_w0;
reg    [31:0] main_core_bus_dat_w1 = 32'd0;
reg           main_core_bus_err = 1'd0;
reg           main_core_bus_latch = 1'd0;
wire    [3:0] main_core_bus_sel0;
reg     [3:0] main_core_bus_sel1 = 4'd0;
wire          main_core_bus_stb;
wire          main_core_bus_we0;
reg           main_core_bus_we1 = 1'd0;
reg    [47:0] main_core_cmd = 48'd0;
wire          main_core_cmd_tx_conv_converter_first;
wire          main_core_cmd_tx_conv_converter_last;
reg     [2:0] main_core_cmd_tx_conv_converter_mux = 3'd0;
reg           main_core_cmd_tx_conv_converter_sink_first = 1'd0;
reg           main_core_cmd_tx_conv_converter_sink_last = 1'd0;
reg    [47:0] main_core_cmd_tx_conv_converter_sink_payload_data = 48'd0;
wire          main_core_cmd_tx_conv_converter_sink_ready;
reg           main_core_cmd_tx_conv_converter_sink_valid = 1'd0;
wire          main_core_cmd_tx_conv_converter_source_first;
wire          main_core_cmd_tx_conv_converter_source_last;
reg     [7:0] main_core_cmd_tx_conv_converter_source_payload_data = 8'd0;
wire          main_core_cmd_tx_conv_converter_source_payload_valid_token_count;
wire          main_core_cmd_tx_conv_converter_source_ready;
wire          main_core_cmd_tx_conv_converter_source_valid;
wire          main_core_cmd_tx_conv_source_source_first;
wire          main_core_cmd_tx_conv_source_source_last;
wire    [7:0] main_core_cmd_tx_conv_source_source_payload_data;
reg           main_core_cmd_tx_conv_source_source_ready = 1'd0;
wire          main_core_cmd_tx_conv_source_source_valid;
reg     [7:0] main_core_cycles = 8'd0;
reg     [7:0] main_core_cycles_next_value1 = 8'd0;
reg           main_core_cycles_next_value_ce1 = 1'd0;
reg     [1:0] main_core_dat_rx_conv_converter_demux = 2'd0;
wire          main_core_dat_rx_conv_converter_load_part;
wire          main_core_dat_rx_conv_converter_sink_first;
wire          main_core_dat_rx_conv_converter_sink_last;
wire    [7:0] main_core_dat_rx_conv_converter_sink_payload_data;
wire          main_core_dat_rx_conv_converter_sink_ready;
wire          main_core_dat_rx_conv_converter_sink_valid;
reg           main_core_dat_rx_conv_converter_source_first = 1'd0;
reg           main_core_dat_rx_conv_converter_source_last = 1'd0;
reg    [31:0] main_core_dat_rx_conv_converter_source_payload_data = 32'd0;
reg     [2:0] main_core_dat_rx_conv_converter_source_payload_valid_token_count = 3'd0;
wire          main_core_dat_rx_conv_converter_source_ready;
wire          main_core_dat_rx_conv_converter_source_valid;
reg           main_core_dat_rx_conv_converter_strobe_all = 1'd0;
reg           main_core_dat_rx_conv_sink_first = 1'd0;
reg           main_core_dat_rx_conv_sink_last = 1'd0;
reg     [7:0] main_core_dat_rx_conv_sink_payload_dq = 8'd0;
wire          main_core_dat_rx_conv_sink_ready;
reg           main_core_dat_rx_conv_sink_valid = 1'd0;
wire          main_core_dat_rx_conv_source_first;
wire          main_core_dat_rx_conv_source_last;
reg    [31:0] main_core_dat_rx_conv_source_payload_dq = 32'd0;
wire          main_core_dat_rx_conv_source_ready;
wire          main_core_dat_rx_conv_source_source_first;
wire          main_core_dat_rx_conv_source_source_last;
wire   [31:0] main_core_dat_rx_conv_source_source_payload_data;
wire          main_core_dat_rx_conv_source_source_ready;
wire          main_core_dat_rx_conv_source_source_valid;
wire          main_core_dat_rx_conv_source_valid;
wire          main_core_dat_tx_conv_converter_first;
wire          main_core_dat_tx_conv_converter_last;
reg     [1:0] main_core_dat_tx_conv_converter_mux = 2'd0;
wire          main_core_dat_tx_conv_converter_sink_first;
wire          main_core_dat_tx_conv_converter_sink_last;
reg    [35:0] main_core_dat_tx_conv_converter_sink_payload_data = 36'd0;
wire          main_core_dat_tx_conv_converter_sink_ready;
wire          main_core_dat_tx_conv_converter_sink_valid;
wire          main_core_dat_tx_conv_converter_source_first;
wire          main_core_dat_tx_conv_converter_source_last;
reg     [8:0] main_core_dat_tx_conv_converter_source_payload_data = 9'd0;
wire          main_core_dat_tx_conv_converter_source_payload_valid_token_count;
wire          main_core_dat_tx_conv_converter_source_ready;
wire          main_core_dat_tx_conv_converter_source_valid;
reg           main_core_dat_tx_conv_sink_first = 1'd0;
reg           main_core_dat_tx_conv_sink_last = 1'd0;
reg    [31:0] main_core_dat_tx_conv_sink_payload_dq = 32'd0;
reg     [3:0] main_core_dat_tx_conv_sink_payload_rwds = 4'd0;
wire          main_core_dat_tx_conv_sink_ready;
reg           main_core_dat_tx_conv_sink_valid = 1'd0;
wire          main_core_dat_tx_conv_source_first;
wire          main_core_dat_tx_conv_source_last;
wire    [7:0] main_core_dat_tx_conv_source_payload_dq;
wire          main_core_dat_tx_conv_source_payload_rwds;
reg           main_core_dat_tx_conv_source_ready = 1'd0;
wire          main_core_dat_tx_conv_source_source_first;
wire          main_core_dat_tx_conv_source_source_last;
wire    [8:0] main_core_dat_tx_conv_source_source_payload_data;
wire          main_core_dat_tx_conv_source_source_ready;
wire          main_core_dat_tx_conv_source_source_valid;
wire          main_core_dat_tx_conv_source_valid;
wire    [7:0] main_core_latency;
reg           main_core_latency_x2 = 1'd0;
reg           main_core_latency_x2_next_value0 = 1'd0;
reg           main_core_latency_x2_next_value_ce0 = 1'd0;
reg     [2:0] main_core_next_state = 3'd0;
reg           main_core_reg_ack = 1'd0;
reg     [2:0] main_core_reg_adr = 3'd0;
reg    [15:0] main_core_reg_dat_r = 16'd0;
reg    [15:0] main_core_reg_dat_w = 16'd0;
reg           main_core_reg_rx_conv_converter_demux = 1'd0;
wire          main_core_reg_rx_conv_converter_load_part;
wire          main_core_reg_rx_conv_converter_sink_first;
wire          main_core_reg_rx_conv_converter_sink_last;
wire    [7:0] main_core_reg_rx_conv_converter_sink_payload_data;
wire          main_core_reg_rx_conv_converter_sink_ready;
wire          main_core_reg_rx_conv_converter_sink_valid;
reg           main_core_reg_rx_conv_converter_source_first = 1'd0;
reg           main_core_reg_rx_conv_converter_source_last = 1'd0;
reg    [15:0] main_core_reg_rx_conv_converter_source_payload_data = 16'd0;
reg     [1:0] main_core_reg_rx_conv_converter_source_payload_valid_token_count = 2'd0;
wire          main_core_reg_rx_conv_converter_source_ready;
wire          main_core_reg_rx_conv_converter_source_valid;
reg           main_core_reg_rx_conv_converter_strobe_all = 1'd0;
reg           main_core_reg_rx_conv_sink_first = 1'd0;
reg           main_core_reg_rx_conv_sink_last = 1'd0;
reg     [7:0] main_core_reg_rx_conv_sink_payload_dq = 8'd0;
wire          main_core_reg_rx_conv_sink_ready;
reg           main_core_reg_rx_conv_sink_valid = 1'd0;
wire          main_core_reg_rx_conv_source_first;
wire          main_core_reg_rx_conv_source_last;
reg    [15:0] main_core_reg_rx_conv_source_payload_dq = 16'd0;
wire          main_core_reg_rx_conv_source_ready;
wire          main_core_reg_rx_conv_source_source_first;
wire          main_core_reg_rx_conv_source_source_last;
wire   [15:0] main_core_reg_rx_conv_source_source_payload_data;
wire          main_core_reg_rx_conv_source_source_ready;
wire          main_core_reg_rx_conv_source_source_valid;
wire          main_core_reg_rx_conv_source_valid;
reg           main_core_reg_stb = 1'd0;
wire          main_core_reg_tx_conv_converter_first;
wire          main_core_reg_tx_conv_converter_last;
reg           main_core_reg_tx_conv_converter_mux = 1'd0;
wire          main_core_reg_tx_conv_converter_sink_first;
wire          main_core_reg_tx_conv_converter_sink_last;
reg    [17:0] main_core_reg_tx_conv_converter_sink_payload_data = 18'd0;
wire          main_core_reg_tx_conv_converter_sink_ready;
wire          main_core_reg_tx_conv_converter_sink_valid;
wire          main_core_reg_tx_conv_converter_source_first;
wire          main_core_reg_tx_conv_converter_source_last;
reg     [8:0] main_core_reg_tx_conv_converter_source_payload_data = 9'd0;
wire          main_core_reg_tx_conv_converter_source_payload_valid_token_count;
wire          main_core_reg_tx_conv_converter_source_ready;
wire          main_core_reg_tx_conv_converter_source_valid;
reg           main_core_reg_tx_conv_sink_first = 1'd0;
reg           main_core_reg_tx_conv_sink_last = 1'd0;
reg    [15:0] main_core_reg_tx_conv_sink_payload_dq = 16'd0;
reg     [1:0] main_core_reg_tx_conv_sink_payload_rwds = 2'd0;
wire          main_core_reg_tx_conv_sink_ready;
reg           main_core_reg_tx_conv_sink_valid = 1'd0;
wire          main_core_reg_tx_conv_source_first;
wire          main_core_reg_tx_conv_source_last;
wire    [7:0] main_core_reg_tx_conv_source_payload_dq;
wire          main_core_reg_tx_conv_source_payload_rwds;
reg           main_core_reg_tx_conv_source_ready = 1'd0;
wire          main_core_reg_tx_conv_source_source_first;
wire          main_core_reg_tx_conv_source_source_last;
wire    [8:0] main_core_reg_tx_conv_source_source_payload_data;
wire          main_core_reg_tx_conv_source_source_ready;
wire          main_core_reg_tx_conv_source_source_valid;
wire          main_core_reg_tx_conv_source_valid;
reg           main_core_reg_we = 1'd0;
wire          main_core_rst;
wire          main_core_sink_sink_first;
wire          main_core_sink_sink_last;
wire    [7:0] main_core_sink_sink_payload_dq;
reg           main_core_sink_sink_ready = 1'd0;
wire          main_core_sink_sink_valid;
reg           main_core_source_source_first = 1'd0;
reg           main_core_source_source_last = 1'd0;
reg           main_core_source_source_payload_cmd = 1'd0;
reg           main_core_source_source_payload_dat_r = 1'd0;
reg           main_core_source_source_payload_dat_w = 1'd0;
reg     [7:0] main_core_source_source_payload_dq = 8'd0;
reg           main_core_source_source_payload_dq_oe = 1'd0;
reg           main_core_source_source_payload_rwds = 1'd0;
reg           main_core_source_source_payload_rwds_oe = 1'd0;
wire          main_core_source_source_ready;
reg           main_core_source_source_valid = 1'd0;
reg     [2:0] main_core_state = 3'd0;
reg    [20:0] main_count = 21'd1500000;
wire          main_crg_clkin;
wire          main_crg_clkout0;
wire          main_crg_clkout1;
wire          main_crg_clkout2;
wire          main_crg_locked;
wire          main_crg_reset;
wire          main_crg_rst_n;
wire          main_done;
wire    [1:0] main_hyperram_addr;
wire          main_hyperram_bus_ack;
wire   [29:0] main_hyperram_bus_adr;
wire    [1:0] main_hyperram_bus_bte;
wire    [2:0] main_hyperram_bus_cti;
wire          main_hyperram_bus_cyc;
wire   [31:0] main_hyperram_bus_dat_r;
wire   [31:0] main_hyperram_bus_dat_w;
wire          main_hyperram_bus_err;
wire    [3:0] main_hyperram_bus_sel;
wire          main_hyperram_bus_stb;
wire          main_hyperram_bus_we;
reg     [3:0] main_hyperram_clk_ratio = 4'd4;
reg           main_hyperram_config_re = 1'd0;
reg    [15:0] main_hyperram_config_storage = 16'd1792;
reg           main_hyperram_done = 1'd0;
wire    [7:0] main_hyperram_latency;
reg           main_hyperram_latency_mode = 1'd1;
reg           main_hyperram_read = 1'd0;
reg           main_hyperram_reg_control_re = 1'd0;
reg     [9:0] main_hyperram_reg_control_storage = 10'd0;
reg           main_hyperram_reg_rdata_re = 1'd0;
reg    [15:0] main_hyperram_reg_rdata_status = 16'd0;
reg    [15:0] main_hyperram_reg_rdata_status_hyperram_next_value = 16'd0;
reg           main_hyperram_reg_rdata_status_hyperram_next_value_ce = 1'd0;
wire          main_hyperram_reg_rdata_we;
reg           main_hyperram_reg_status_re = 1'd0;
wire          main_hyperram_reg_status_status;
wire          main_hyperram_reg_status_we;
reg           main_hyperram_reg_wdata_re = 1'd0;
reg    [15:0] main_hyperram_reg_wdata_storage = 16'd0;
reg           main_hyperram_rst = 1'd0;
reg           main_hyperram_status_re = 1'd0;
reg     [4:0] main_hyperram_status_status = 5'd9;
wire          main_hyperram_status_we;
reg           main_hyperram_write = 1'd0;
wire    [7:0] main_hyperramsdrphy_dq_i;
reg     [7:0] main_hyperramsdrphy_dq_o = 8'd0;
wire          main_hyperramsdrphy_dq_oe;
wire          main_hyperramsdrphy_fall;
reg           main_hyperramsdrphy_ios_clk = 1'd0;
reg           main_hyperramsdrphy_ios_cs_n = 1'd0;
reg     [7:0] main_hyperramsdrphy_ios_dq_i = 8'd0;
reg     [7:0] main_hyperramsdrphy_ios_dq_o = 8'd0;
reg           main_hyperramsdrphy_ios_dq_oe = 1'd0;
wire          main_hyperramsdrphy_ios_rst_n;
wire          main_hyperramsdrphy_ios_rwds_i;
reg           main_hyperramsdrphy_ios_rwds_o = 1'd0;
reg           main_hyperramsdrphy_ios_rwds_oe = 1'd0;
reg     [1:0] main_hyperramsdrphy_phase = 2'd0;
wire          main_hyperramsdrphy_rise;
wire          main_hyperramsdrphy_rwds_i;
reg           main_hyperramsdrphy_rwds_i_d = 1'd0;
wire          main_hyperramsdrphy_rwds_o;
wire          main_hyperramsdrphy_rwds_oe;
wire          main_hyperramsdrphy_sink_first;
wire          main_hyperramsdrphy_sink_last;
wire          main_hyperramsdrphy_sink_payload_cmd;
wire          main_hyperramsdrphy_sink_payload_dat_r;
wire          main_hyperramsdrphy_sink_payload_dat_w;
wire    [7:0] main_hyperramsdrphy_sink_payload_dq;
wire          main_hyperramsdrphy_sink_payload_dq_oe;
wire          main_hyperramsdrphy_sink_payload_rwds;
wire          main_hyperramsdrphy_sink_payload_rwds_oe;
reg           main_hyperramsdrphy_sink_ready = 1'd0;
wire          main_hyperramsdrphy_sink_valid;
reg           main_hyperramsdrphy_source_first = 1'd0;
reg           main_hyperramsdrphy_source_last = 1'd0;
reg     [7:0] main_hyperramsdrphy_source_payload_dq = 8'd0;
wire          main_hyperramsdrphy_source_ready;
reg           main_hyperramsdrphy_source_valid = 1'd0;
reg     [7:0] main_leds = 8'd0;
reg           main_mode = 1'd0;
reg           main_re = 1'd0;
wire          main_rx_cdc_sink_first;
wire          main_rx_cdc_sink_last;
wire    [7:0] main_rx_cdc_sink_payload_dq;
wire          main_rx_cdc_sink_ready;
wire          main_rx_cdc_sink_valid;
wire          main_rx_cdc_source_first;
wire          main_rx_cdc_source_last;
wire    [7:0] main_rx_cdc_source_payload_dq;
wire          main_rx_cdc_source_ready;
wire          main_rx_cdc_source_valid;
reg     [7:0] main_storage = 8'd0;
reg     [1:0] main_syncfifo0_consume = 2'd0;
wire          main_syncfifo0_do_read;
wire          main_syncfifo0_fifo_in_first;
wire          main_syncfifo0_fifo_in_last;
wire          main_syncfifo0_fifo_in_payload_cmd;
wire          main_syncfifo0_fifo_in_payload_dat_r;
wire          main_syncfifo0_fifo_in_payload_dat_w;
wire    [7:0] main_syncfifo0_fifo_in_payload_dq;
wire          main_syncfifo0_fifo_in_payload_dq_oe;
wire          main_syncfifo0_fifo_in_payload_rwds;
wire          main_syncfifo0_fifo_in_payload_rwds_oe;
wire          main_syncfifo0_fifo_out_first;
wire          main_syncfifo0_fifo_out_last;
wire          main_syncfifo0_fifo_out_payload_cmd;
wire          main_syncfifo0_fifo_out_payload_dat_r;
wire          main_syncfifo0_fifo_out_payload_dat_w;
wire    [7:0] main_syncfifo0_fifo_out_payload_dq;
wire          main_syncfifo0_fifo_out_payload_dq_oe;
wire          main_syncfifo0_fifo_out_payload_rwds;
wire          main_syncfifo0_fifo_out_payload_rwds_oe;
reg     [2:0] main_syncfifo0_level = 3'd0;
reg     [1:0] main_syncfifo0_produce = 2'd0;
wire    [1:0] main_syncfifo0_rdport_adr;
wire   [15:0] main_syncfifo0_rdport_dat_r;
reg           main_syncfifo0_replace = 1'd0;
wire          main_syncfifo0_sink_first;
wire          main_syncfifo0_sink_last;
wire          main_syncfifo0_sink_payload_cmd;
wire          main_syncfifo0_sink_payload_dat_r;
wire          main_syncfifo0_sink_payload_dat_w;
wire    [7:0] main_syncfifo0_sink_payload_dq;
wire          main_syncfifo0_sink_payload_dq_oe;
wire          main_syncfifo0_sink_payload_rwds;
wire          main_syncfifo0_sink_payload_rwds_oe;
wire          main_syncfifo0_sink_ready;
wire          main_syncfifo0_sink_valid;
wire          main_syncfifo0_source_first;
wire          main_syncfifo0_source_last;
wire          main_syncfifo0_source_payload_cmd;
wire          main_syncfifo0_source_payload_dat_r;
wire          main_syncfifo0_source_payload_dat_w;
wire    [7:0] main_syncfifo0_source_payload_dq;
wire          main_syncfifo0_source_payload_dq_oe;
wire          main_syncfifo0_source_payload_rwds;
wire          main_syncfifo0_source_payload_rwds_oe;
wire          main_syncfifo0_source_ready;
wire          main_syncfifo0_source_valid;
wire   [15:0] main_syncfifo0_syncfifo0_din;
wire   [15:0] main_syncfifo0_syncfifo0_dout;
wire          main_syncfifo0_syncfifo0_re;
wire          main_syncfifo0_syncfifo0_readable;
wire          main_syncfifo0_syncfifo0_we;
wire          main_syncfifo0_syncfifo0_writable;
reg     [1:0] main_syncfifo0_wrport_adr = 2'd0;
wire   [15:0] main_syncfifo0_wrport_dat_r;
wire   [15:0] main_syncfifo0_wrport_dat_w;
wire          main_syncfifo0_wrport_we;
reg     [1:0] main_syncfifo1_consume = 2'd0;
wire          main_syncfifo1_do_read;
wire          main_syncfifo1_fifo_in_first;
wire          main_syncfifo1_fifo_in_last;
wire    [7:0] main_syncfifo1_fifo_in_payload_dq;
wire          main_syncfifo1_fifo_out_first;
wire          main_syncfifo1_fifo_out_last;
wire    [7:0] main_syncfifo1_fifo_out_payload_dq;
reg     [2:0] main_syncfifo1_level = 3'd0;
reg     [1:0] main_syncfifo1_produce = 2'd0;
wire    [1:0] main_syncfifo1_rdport_adr;
wire    [9:0] main_syncfifo1_rdport_dat_r;
reg           main_syncfifo1_replace = 1'd0;
wire          main_syncfifo1_sink_first;
wire          main_syncfifo1_sink_last;
wire    [7:0] main_syncfifo1_sink_payload_dq;
wire          main_syncfifo1_sink_ready;
wire          main_syncfifo1_sink_valid;
wire          main_syncfifo1_source_first;
wire          main_syncfifo1_source_last;
wire    [7:0] main_syncfifo1_source_payload_dq;
wire          main_syncfifo1_source_ready;
wire          main_syncfifo1_source_valid;
wire    [9:0] main_syncfifo1_syncfifo1_din;
wire    [9:0] main_syncfifo1_syncfifo1_dout;
wire          main_syncfifo1_syncfifo1_re;
wire          main_syncfifo1_syncfifo1_readable;
wire          main_syncfifo1_syncfifo1_we;
wire          main_syncfifo1_syncfifo1_writable;
reg     [1:0] main_syncfifo1_wrport_adr = 2'd0;
wire    [9:0] main_syncfifo1_wrport_dat_r;
wire    [9:0] main_syncfifo1_wrport_dat_w;
wire          main_syncfifo1_wrport_we;
wire          main_tx_cdc_sink_first;
wire          main_tx_cdc_sink_last;
wire          main_tx_cdc_sink_payload_cmd;
wire          main_tx_cdc_sink_payload_dat_r;
wire          main_tx_cdc_sink_payload_dat_w;
wire    [7:0] main_tx_cdc_sink_payload_dq;
wire          main_tx_cdc_sink_payload_dq_oe;
wire          main_tx_cdc_sink_payload_rwds;
wire          main_tx_cdc_sink_payload_rwds_oe;
wire          main_tx_cdc_sink_ready;
wire          main_tx_cdc_sink_valid;
wire          main_tx_cdc_source_first;
wire          main_tx_cdc_source_last;
wire          main_tx_cdc_source_payload_cmd;
wire          main_tx_cdc_source_payload_dat_r;
wire          main_tx_cdc_source_payload_dat_w;
wire    [7:0] main_tx_cdc_source_payload_dq;
wire          main_tx_cdc_source_payload_dq_oe;
wire          main_tx_cdc_source_payload_rwds;
wire          main_tx_cdc_source_payload_rwds_oe;
wire          main_tx_cdc_source_ready;
wire          main_tx_cdc_source_valid;
wire          main_wait;
wire          sys2x_clk;
wire          sys2x_ps_clk;
wire          sys2x_ps_rst;
wire          sys2x_rst;
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_bus_bus_adr = main_hyperram_bus_adr;
assign main_bus_bus_dat_w = main_hyperram_bus_dat_w;
assign main_hyperram_bus_dat_r = main_bus_bus_dat_r;
assign main_bus_bus_sel = main_hyperram_bus_sel;
assign main_bus_bus_cyc = main_hyperram_bus_cyc;
assign main_bus_bus_stb = main_hyperram_bus_stb;
assign main_hyperram_bus_ack = main_bus_bus_ack;
assign main_bus_bus_we = main_hyperram_bus_we;
assign main_bus_bus_cti = main_hyperram_bus_cti;
assign main_bus_bus_bte = main_hyperram_bus_bte;
assign main_hyperram_bus_err = main_bus_bus_err;
assign main_basesoc_bus_error = builder_error;
assign main_basesoc_adapted_interface_dat_w = main_basesoc_idbus_dat_w;
assign main_basesoc_idbus_dat_r = main_basesoc_adapted_interface_dat_r;
assign main_basesoc_adapted_interface_sel = main_basesoc_idbus_sel;
assign main_basesoc_adapted_interface_cyc = main_basesoc_idbus_cyc;
assign main_basesoc_adapted_interface_stb = main_basesoc_idbus_stb;
assign main_basesoc_idbus_ack = main_basesoc_adapted_interface_ack;
assign main_basesoc_adapted_interface_we = main_basesoc_idbus_we;
assign main_basesoc_adapted_interface_cti = main_basesoc_idbus_cti;
assign main_basesoc_adapted_interface_bte = main_basesoc_idbus_bte;
assign main_basesoc_idbus_err = main_basesoc_adapted_interface_err;
assign main_basesoc_adapted_interface_adr = main_basesoc_idbus_adr[31:2];
assign builder_shared_adr = builder_self0;
assign builder_shared_dat_w = builder_self1;
assign builder_shared_sel = builder_self2;
assign builder_shared_cyc = builder_self3;
assign builder_shared_stb = builder_self4;
assign builder_shared_we = builder_self5;
assign builder_shared_cti = builder_self6;
assign builder_shared_bte = builder_self7;
assign main_basesoc_adapted_interface_dat_r = builder_shared_dat_r;
assign main_basesoc_adapted_interface_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_adapted_interface_err = (builder_shared_err & (builder_grant == 1'd0));
assign builder_request = {main_basesoc_adapted_interface_cyc};
assign builder_grant = 1'd0;
always @(*) begin
    builder_slave_sel <= 4'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_slave_sel[1] <= (builder_shared_adr[29:11] == 12'd2048);
    builder_slave_sel[2] <= (builder_shared_adr[29:21] == 8'd128);
    builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd33280);
end
assign main_basesoc_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_ram_bus_bte = builder_shared_bte;
assign main_hyperram_bus_adr = builder_shared_adr;
assign main_hyperram_bus_dat_w = builder_shared_dat_w;
assign main_hyperram_bus_sel = builder_shared_sel;
assign main_hyperram_bus_stb = builder_shared_stb;
assign main_hyperram_bus_we = builder_shared_we;
assign main_hyperram_bus_cti = builder_shared_cti;
assign main_hyperram_bus_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_basesoc_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_hyperram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign builder_shared_err = (((main_basesoc_basesoc_ram_bus_err | main_basesoc_ram_bus_ram_bus_err) | main_hyperram_bus_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= (((main_basesoc_basesoc_ram_bus_ack | main_basesoc_ram_bus_ram_bus_ack) | main_hyperram_bus_ack) | builder_interface0_ack);
    builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & main_basesoc_basesoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_basesoc_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_hyperram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
always @(*) begin
    main_basesoc_mbus_rdata0 <= 32'd0;
    main_basesoc_mbus_rdata0 <= main_basesoc_mbus_rdata1;
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata0 <= main_basesoc_idbus_dat_r;
    end
end
always @(*) begin
    builder_femtorv_next_state <= 1'd0;
    main_basesoc_idbus_adr_femtorv_next_value0 <= 32'd0;
    main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd0;
    main_basesoc_idbus_cyc <= 1'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value1 <= 32'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd0;
    main_basesoc_idbus_sel_femtorv_next_value2 <= 4'd0;
    main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd0;
    main_basesoc_idbus_stb <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value3 <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd0;
    main_basesoc_latch <= 1'd0;
    main_basesoc_mbus_rbusy <= 1'd0;
    main_basesoc_mbus_wbusy <= 1'd0;
    builder_femtorv_next_state <= builder_femtorv_state;
    case (builder_femtorv_state)
        1'd1: begin
            main_basesoc_idbus_stb <= 1'd1;
            main_basesoc_idbus_cyc <= 1'd1;
            main_basesoc_mbus_wbusy <= 1'd1;
            main_basesoc_mbus_rbusy <= 1'd1;
            if (main_basesoc_idbus_ack) begin
                main_basesoc_mbus_wbusy <= 1'd0;
                main_basesoc_mbus_rbusy <= 1'd0;
                main_basesoc_latch <= 1'd1;
                builder_femtorv_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_idbus_adr_femtorv_next_value0 <= main_basesoc_mbus_addr;
            main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd1;
            main_basesoc_idbus_dat_w_femtorv_next_value1 <= main_basesoc_mbus_wdata;
            main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd1;
            main_basesoc_idbus_sel_femtorv_next_value2 <= main_basesoc_mbus_wmask;
            main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd1;
            if ((main_basesoc_mbus_rstrb | (main_basesoc_mbus_wmask != 1'd0))) begin
                main_basesoc_idbus_we_femtorv_next_value3 <= (main_basesoc_mbus_wmask != 1'd0);
                main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd1;
                builder_femtorv_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_basesoc_adr = main_basesoc_basesoc_ram_bus_adr[14:0];
assign main_basesoc_basesoc_ram_bus_dat_r = main_basesoc_basesoc_dat_r;
always @(*) begin
    main_basesoc_ram_we <= 4'd0;
    main_basesoc_ram_we[0] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[0]);
    main_basesoc_ram_we[1] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[1]);
    main_basesoc_ram_we[2] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[2]);
    main_basesoc_ram_we[3] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[3]);
end
assign main_basesoc_ram_adr = main_basesoc_ram_bus_ram_bus_adr[10:0];
assign main_basesoc_ram_bus_ram_bus_dat_r = main_basesoc_ram_dat_r;
assign main_basesoc_ram_dat_w = main_basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= main_basesoc_tx_data[0];
                main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_crg_reset = ((~main_crg_rst_n) | (~user_btn_n0));
assign main_crg_clkin = clk10;
assign sys_clk = main_crg_clkout0;
assign sys2x_ps_clk = main_crg_clkout1;
assign sys2x_clk = main_crg_clkout2;
assign main_crg_locked = (builder_gatematepll_locked_s1 & (~main_crg_reset));
assign main_core_bus_adr0 = main_bus_bus_adr;
assign main_core_bus_dat_w0 = main_bus_bus_dat_w;
assign main_bus_bus_dat_r = main_core_bus_dat_r;
assign main_core_bus_sel0 = main_bus_bus_sel;
assign main_core_bus_cyc = main_bus_bus_cyc;
assign main_core_bus_stb = main_bus_bus_stb;
assign main_bus_bus_ack = main_core_bus_ack;
assign main_core_bus_we0 = main_bus_bus_we;
assign main_core_bus_cti0 = main_bus_bus_cti;
assign main_core_bus_bte = main_bus_bus_bte;
assign main_bus_bus_err = main_core_bus_err;
assign main_core_rst = main_hyperram_rst;
assign main_core_latency = main_hyperram_latency;
assign main_hyperramsdrphy_rise = (main_hyperramsdrphy_phase == 2'd3);
assign main_hyperramsdrphy_fall = (main_hyperramsdrphy_phase == 1'd1);
always @(*) begin
    hyperram_clk <= 1'd0;
    case (main_hyperramsdrphy_phase)
        1'd0: begin
            hyperram_clk <= 1'd0;
        end
        1'd1: begin
            hyperram_clk <= 1'd1;
        end
        2'd2: begin
            hyperram_clk <= 1'd1;
        end
        2'd3: begin
            hyperram_clk <= 1'd0;
        end
    endcase
end
always @(*) begin
    builder_clockdomainsrenamer_next_state <= 2'd0;
    main_hyperramsdrphy_ios_clk <= 1'd0;
    main_hyperramsdrphy_ios_cs_n <= 1'd0;
    main_hyperramsdrphy_ios_dq_o <= 8'd0;
    main_hyperramsdrphy_ios_dq_oe <= 1'd0;
    main_hyperramsdrphy_ios_rwds_o <= 1'd0;
    main_hyperramsdrphy_ios_rwds_oe <= 1'd0;
    main_hyperramsdrphy_sink_ready <= 1'd0;
    main_hyperramsdrphy_source_last <= 1'd0;
    main_hyperramsdrphy_source_payload_dq <= 8'd0;
    main_hyperramsdrphy_source_valid <= 1'd0;
    if ((main_hyperramsdrphy_sink_valid & main_hyperramsdrphy_sink_payload_dat_r)) begin
        if ((main_hyperramsdrphy_ios_rwds_i ^ main_hyperramsdrphy_rwds_i_d)) begin
            main_hyperramsdrphy_source_valid <= 1'd1;
            main_hyperramsdrphy_source_payload_dq <= main_hyperramsdrphy_ios_dq_i;
        end
    end
    builder_clockdomainsrenamer_next_state <= builder_clockdomainsrenamer_state;
    case (builder_clockdomainsrenamer_state)
        1'd1: begin
            if (main_hyperramsdrphy_sink_valid) begin
                main_hyperramsdrphy_ios_clk <= 1'd1;
                main_hyperramsdrphy_ios_dq_o <= main_hyperramsdrphy_sink_payload_dq;
                main_hyperramsdrphy_ios_dq_oe <= main_hyperramsdrphy_sink_payload_dq_oe;
                main_hyperramsdrphy_ios_rwds_o <= main_hyperramsdrphy_sink_payload_rwds;
                main_hyperramsdrphy_ios_rwds_oe <= main_hyperramsdrphy_sink_payload_rwds_oe;
                if ((main_hyperramsdrphy_rise | main_hyperramsdrphy_fall)) begin
                    main_hyperramsdrphy_sink_ready <= 1'd1;
                end
            end else begin
                builder_clockdomainsrenamer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_hyperramsdrphy_source_valid <= 1'd1;
            main_hyperramsdrphy_source_last <= 1'd1;
            if (main_hyperramsdrphy_source_ready) begin
                builder_clockdomainsrenamer_next_state <= 1'd0;
            end
        end
        default: begin
            main_hyperramsdrphy_ios_cs_n <= 1'd1;
            if ((main_hyperramsdrphy_sink_valid & main_hyperramsdrphy_rise)) begin
                builder_clockdomainsrenamer_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_syncfifo0_syncfifo0_din = {main_syncfifo0_fifo_in_last, main_syncfifo0_fifo_in_first, main_syncfifo0_fifo_in_payload_rwds_oe, main_syncfifo0_fifo_in_payload_rwds, main_syncfifo0_fifo_in_payload_dq_oe, main_syncfifo0_fifo_in_payload_dq, main_syncfifo0_fifo_in_payload_dat_r, main_syncfifo0_fifo_in_payload_dat_w, main_syncfifo0_fifo_in_payload_cmd};
assign {main_syncfifo0_fifo_out_last, main_syncfifo0_fifo_out_first, main_syncfifo0_fifo_out_payload_rwds_oe, main_syncfifo0_fifo_out_payload_rwds, main_syncfifo0_fifo_out_payload_dq_oe, main_syncfifo0_fifo_out_payload_dq, main_syncfifo0_fifo_out_payload_dat_r, main_syncfifo0_fifo_out_payload_dat_w, main_syncfifo0_fifo_out_payload_cmd} = main_syncfifo0_syncfifo0_dout;
assign main_syncfifo0_sink_ready = main_syncfifo0_syncfifo0_writable;
assign main_syncfifo0_syncfifo0_we = main_syncfifo0_sink_valid;
assign main_syncfifo0_fifo_in_first = main_syncfifo0_sink_first;
assign main_syncfifo0_fifo_in_last = main_syncfifo0_sink_last;
assign main_syncfifo0_fifo_in_payload_cmd = main_syncfifo0_sink_payload_cmd;
assign main_syncfifo0_fifo_in_payload_dat_w = main_syncfifo0_sink_payload_dat_w;
assign main_syncfifo0_fifo_in_payload_dat_r = main_syncfifo0_sink_payload_dat_r;
assign main_syncfifo0_fifo_in_payload_dq = main_syncfifo0_sink_payload_dq;
assign main_syncfifo0_fifo_in_payload_dq_oe = main_syncfifo0_sink_payload_dq_oe;
assign main_syncfifo0_fifo_in_payload_rwds = main_syncfifo0_sink_payload_rwds;
assign main_syncfifo0_fifo_in_payload_rwds_oe = main_syncfifo0_sink_payload_rwds_oe;
assign main_syncfifo0_source_valid = main_syncfifo0_syncfifo0_readable;
assign main_syncfifo0_source_first = main_syncfifo0_fifo_out_first;
assign main_syncfifo0_source_last = main_syncfifo0_fifo_out_last;
assign main_syncfifo0_source_payload_cmd = main_syncfifo0_fifo_out_payload_cmd;
assign main_syncfifo0_source_payload_dat_w = main_syncfifo0_fifo_out_payload_dat_w;
assign main_syncfifo0_source_payload_dat_r = main_syncfifo0_fifo_out_payload_dat_r;
assign main_syncfifo0_source_payload_dq = main_syncfifo0_fifo_out_payload_dq;
assign main_syncfifo0_source_payload_dq_oe = main_syncfifo0_fifo_out_payload_dq_oe;
assign main_syncfifo0_source_payload_rwds = main_syncfifo0_fifo_out_payload_rwds;
assign main_syncfifo0_source_payload_rwds_oe = main_syncfifo0_fifo_out_payload_rwds_oe;
assign main_syncfifo0_syncfifo0_re = main_syncfifo0_source_ready;
always @(*) begin
    main_syncfifo0_wrport_adr <= 2'd0;
    if (main_syncfifo0_replace) begin
        main_syncfifo0_wrport_adr <= (main_syncfifo0_produce - 1'd1);
    end else begin
        main_syncfifo0_wrport_adr <= main_syncfifo0_produce;
    end
end
assign main_syncfifo0_wrport_dat_w = main_syncfifo0_syncfifo0_din;
assign main_syncfifo0_wrport_we = (main_syncfifo0_syncfifo0_we & (main_syncfifo0_syncfifo0_writable | main_syncfifo0_replace));
assign main_syncfifo0_do_read = (main_syncfifo0_syncfifo0_readable & main_syncfifo0_syncfifo0_re);
assign main_syncfifo0_rdport_adr = main_syncfifo0_consume;
assign main_syncfifo0_syncfifo0_dout = main_syncfifo0_rdport_dat_r;
assign main_syncfifo0_syncfifo0_writable = (main_syncfifo0_level != 3'd4);
assign main_syncfifo0_syncfifo0_readable = (main_syncfifo0_level != 1'd0);
assign main_syncfifo1_syncfifo1_din = {main_syncfifo1_fifo_in_last, main_syncfifo1_fifo_in_first, main_syncfifo1_fifo_in_payload_dq};
assign {main_syncfifo1_fifo_out_last, main_syncfifo1_fifo_out_first, main_syncfifo1_fifo_out_payload_dq} = main_syncfifo1_syncfifo1_dout;
assign main_syncfifo1_sink_ready = main_syncfifo1_syncfifo1_writable;
assign main_syncfifo1_syncfifo1_we = main_syncfifo1_sink_valid;
assign main_syncfifo1_fifo_in_first = main_syncfifo1_sink_first;
assign main_syncfifo1_fifo_in_last = main_syncfifo1_sink_last;
assign main_syncfifo1_fifo_in_payload_dq = main_syncfifo1_sink_payload_dq;
assign main_syncfifo1_source_valid = main_syncfifo1_syncfifo1_readable;
assign main_syncfifo1_source_first = main_syncfifo1_fifo_out_first;
assign main_syncfifo1_source_last = main_syncfifo1_fifo_out_last;
assign main_syncfifo1_source_payload_dq = main_syncfifo1_fifo_out_payload_dq;
assign main_syncfifo1_syncfifo1_re = main_syncfifo1_source_ready;
always @(*) begin
    main_syncfifo1_wrport_adr <= 2'd0;
    if (main_syncfifo1_replace) begin
        main_syncfifo1_wrport_adr <= (main_syncfifo1_produce - 1'd1);
    end else begin
        main_syncfifo1_wrport_adr <= main_syncfifo1_produce;
    end
end
assign main_syncfifo1_wrport_dat_w = main_syncfifo1_syncfifo1_din;
assign main_syncfifo1_wrport_we = (main_syncfifo1_syncfifo1_we & (main_syncfifo1_syncfifo1_writable | main_syncfifo1_replace));
assign main_syncfifo1_do_read = (main_syncfifo1_syncfifo1_readable & main_syncfifo1_syncfifo1_re);
assign main_syncfifo1_rdport_adr = main_syncfifo1_consume;
assign main_syncfifo1_syncfifo1_dout = main_syncfifo1_rdport_dat_r;
assign main_syncfifo1_syncfifo1_writable = (main_syncfifo1_level != 3'd4);
assign main_syncfifo1_syncfifo1_readable = (main_syncfifo1_level != 1'd0);
assign main_tx_cdc_source_valid = main_tx_cdc_sink_valid;
assign main_tx_cdc_sink_ready = main_tx_cdc_source_ready;
assign main_tx_cdc_source_first = main_tx_cdc_sink_first;
assign main_tx_cdc_source_last = main_tx_cdc_sink_last;
assign main_tx_cdc_source_payload_cmd = main_tx_cdc_sink_payload_cmd;
assign main_tx_cdc_source_payload_dat_w = main_tx_cdc_sink_payload_dat_w;
assign main_tx_cdc_source_payload_dat_r = main_tx_cdc_sink_payload_dat_r;
assign main_tx_cdc_source_payload_dq = main_tx_cdc_sink_payload_dq;
assign main_tx_cdc_source_payload_dq_oe = main_tx_cdc_sink_payload_dq_oe;
assign main_tx_cdc_source_payload_rwds = main_tx_cdc_sink_payload_rwds;
assign main_tx_cdc_source_payload_rwds_oe = main_tx_cdc_sink_payload_rwds_oe;
assign main_rx_cdc_source_valid = main_rx_cdc_sink_valid;
assign main_rx_cdc_sink_ready = main_rx_cdc_source_ready;
assign main_rx_cdc_source_first = main_rx_cdc_sink_first;
assign main_rx_cdc_source_last = main_rx_cdc_sink_last;
assign main_rx_cdc_source_payload_dq = main_rx_cdc_sink_payload_dq;
assign main_hyperramsdrphy_ios_rst_n = (~main_core_rst);
always @(*) begin
    main_core_dat_rx_conv_sink_first <= 1'd0;
    main_core_dat_rx_conv_sink_last <= 1'd0;
    main_core_dat_rx_conv_sink_payload_dq <= 8'd0;
    main_core_dat_rx_conv_sink_valid <= 1'd0;
    main_core_reg_rx_conv_sink_first <= 1'd0;
    main_core_reg_rx_conv_sink_last <= 1'd0;
    main_core_reg_rx_conv_sink_payload_dq <= 8'd0;
    main_core_reg_rx_conv_sink_valid <= 1'd0;
    main_core_sink_sink_ready <= 1'd0;
    if ((main_core_reg_stb & (~main_core_reg_we))) begin
        main_core_reg_rx_conv_sink_valid <= main_core_sink_sink_valid;
        main_core_sink_sink_ready <= main_core_reg_rx_conv_sink_ready;
        main_core_reg_rx_conv_sink_first <= main_core_sink_sink_first;
        main_core_reg_rx_conv_sink_last <= main_core_sink_sink_last;
        main_core_reg_rx_conv_sink_payload_dq <= main_core_sink_sink_payload_dq;
    end else begin
        main_core_dat_rx_conv_sink_valid <= main_core_sink_sink_valid;
        main_core_sink_sink_ready <= main_core_dat_rx_conv_sink_ready;
        main_core_dat_rx_conv_sink_first <= main_core_sink_sink_first;
        main_core_dat_rx_conv_sink_last <= main_core_sink_sink_last;
        main_core_dat_rx_conv_sink_payload_dq <= main_core_sink_sink_payload_dq;
    end
end
assign main_core_dat_rx_conv_source_ready = 1'd1;
assign main_core_reg_rx_conv_source_ready = 1'd1;
always @(*) begin
    main_core_cmd <= 48'd0;
    if (main_core_reg_stb) begin
        main_core_cmd[47] <= (~main_core_reg_we);
        main_core_cmd[46] <= 1'd1;
        main_core_cmd[45] <= 1'd1;
        case (main_core_reg_adr)
            1'd0: begin
                main_core_cmd[39:0] <= 1'd0;
            end
            1'd1: begin
                main_core_cmd[39:0] <= 1'd1;
            end
            2'd2: begin
                main_core_cmd[39:0] <= 25'd16777216;
            end
            2'd3: begin
                main_core_cmd[39:0] <= 25'd16777217;
            end
        endcase
    end else begin
        main_core_cmd[47] <= (~main_core_bus_we0);
        main_core_cmd[46] <= 1'd0;
        main_core_cmd[45] <= 1'd1;
        main_core_cmd[44:16] <= main_core_bus_adr0[29:2];
        main_core_cmd[2:1] <= main_core_bus_adr0;
    end
end
assign main_core_burst_w = ((main_core_bus_cti1 == 2'd2) | ((main_core_bus_we0 == main_core_bus_we1) & (main_core_bus_adr0 == (main_core_bus_adr1 + 1'd1))));
assign main_core_burst_r = ((main_core_bus_cti1 == 2'd2) | ((main_core_bus_we0 == main_core_bus_we1) & (main_core_bus_adr0 == (main_core_bus_adr1 + 1'd1))));
assign main_core_cmd_tx_conv_source_source_valid = main_core_cmd_tx_conv_converter_source_valid;
assign main_core_cmd_tx_conv_converter_source_ready = main_core_cmd_tx_conv_source_source_ready;
assign main_core_cmd_tx_conv_source_source_first = main_core_cmd_tx_conv_converter_source_first;
assign main_core_cmd_tx_conv_source_source_last = main_core_cmd_tx_conv_converter_source_last;
assign main_core_cmd_tx_conv_source_source_payload_data = main_core_cmd_tx_conv_converter_source_payload_data;
assign main_core_cmd_tx_conv_converter_first = (main_core_cmd_tx_conv_converter_mux == 1'd0);
assign main_core_cmd_tx_conv_converter_last = (main_core_cmd_tx_conv_converter_mux == 3'd5);
assign main_core_cmd_tx_conv_converter_source_valid = main_core_cmd_tx_conv_converter_sink_valid;
assign main_core_cmd_tx_conv_converter_source_first = (main_core_cmd_tx_conv_converter_sink_first & main_core_cmd_tx_conv_converter_first);
assign main_core_cmd_tx_conv_converter_source_last = (main_core_cmd_tx_conv_converter_sink_last & main_core_cmd_tx_conv_converter_last);
assign main_core_cmd_tx_conv_converter_sink_ready = (main_core_cmd_tx_conv_converter_last & main_core_cmd_tx_conv_converter_source_ready);
always @(*) begin
    main_core_cmd_tx_conv_converter_source_payload_data <= 8'd0;
    case (main_core_cmd_tx_conv_converter_mux)
        1'd0: begin
            main_core_cmd_tx_conv_converter_source_payload_data <= main_core_cmd_tx_conv_converter_sink_payload_data[47:40];
        end
        1'd1: begin
            main_core_cmd_tx_conv_converter_source_payload_data <= main_core_cmd_tx_conv_converter_sink_payload_data[39:32];
        end
        2'd2: begin
            main_core_cmd_tx_conv_converter_source_payload_data <= main_core_cmd_tx_conv_converter_sink_payload_data[31:24];
        end
        2'd3: begin
            main_core_cmd_tx_conv_converter_source_payload_data <= main_core_cmd_tx_conv_converter_sink_payload_data[23:16];
        end
        3'd4: begin
            main_core_cmd_tx_conv_converter_source_payload_data <= main_core_cmd_tx_conv_converter_sink_payload_data[15:8];
        end
        default: begin
            main_core_cmd_tx_conv_converter_source_payload_data <= main_core_cmd_tx_conv_converter_sink_payload_data[7:0];
        end
    endcase
end
assign main_core_cmd_tx_conv_converter_source_payload_valid_token_count = main_core_cmd_tx_conv_converter_last;
assign main_core_reg_tx_conv_converter_sink_valid = main_core_reg_tx_conv_sink_valid;
assign main_core_reg_tx_conv_converter_sink_first = main_core_reg_tx_conv_sink_first;
assign main_core_reg_tx_conv_converter_sink_last = main_core_reg_tx_conv_sink_last;
assign main_core_reg_tx_conv_sink_ready = main_core_reg_tx_conv_converter_sink_ready;
always @(*) begin
    main_core_reg_tx_conv_converter_sink_payload_data <= 18'd0;
    main_core_reg_tx_conv_converter_sink_payload_data[7:0] <= main_core_reg_tx_conv_sink_payload_dq[7:0];
    main_core_reg_tx_conv_converter_sink_payload_data[8] <= main_core_reg_tx_conv_sink_payload_rwds[0];
    main_core_reg_tx_conv_converter_sink_payload_data[16:9] <= main_core_reg_tx_conv_sink_payload_dq[15:8];
    main_core_reg_tx_conv_converter_sink_payload_data[17] <= main_core_reg_tx_conv_sink_payload_rwds[1];
end
assign main_core_reg_tx_conv_source_valid = main_core_reg_tx_conv_source_source_valid;
assign main_core_reg_tx_conv_source_first = main_core_reg_tx_conv_source_source_first;
assign main_core_reg_tx_conv_source_last = main_core_reg_tx_conv_source_source_last;
assign main_core_reg_tx_conv_source_source_ready = main_core_reg_tx_conv_source_ready;
assign {main_core_reg_tx_conv_source_payload_rwds, main_core_reg_tx_conv_source_payload_dq} = main_core_reg_tx_conv_source_source_payload_data;
assign main_core_reg_tx_conv_source_source_valid = main_core_reg_tx_conv_converter_source_valid;
assign main_core_reg_tx_conv_converter_source_ready = main_core_reg_tx_conv_source_source_ready;
assign main_core_reg_tx_conv_source_source_first = main_core_reg_tx_conv_converter_source_first;
assign main_core_reg_tx_conv_source_source_last = main_core_reg_tx_conv_converter_source_last;
assign main_core_reg_tx_conv_source_source_payload_data = main_core_reg_tx_conv_converter_source_payload_data;
assign main_core_reg_tx_conv_converter_first = (main_core_reg_tx_conv_converter_mux == 1'd0);
assign main_core_reg_tx_conv_converter_last = (main_core_reg_tx_conv_converter_mux == 1'd1);
assign main_core_reg_tx_conv_converter_source_valid = main_core_reg_tx_conv_converter_sink_valid;
assign main_core_reg_tx_conv_converter_source_first = (main_core_reg_tx_conv_converter_sink_first & main_core_reg_tx_conv_converter_first);
assign main_core_reg_tx_conv_converter_source_last = (main_core_reg_tx_conv_converter_sink_last & main_core_reg_tx_conv_converter_last);
assign main_core_reg_tx_conv_converter_sink_ready = (main_core_reg_tx_conv_converter_last & main_core_reg_tx_conv_converter_source_ready);
always @(*) begin
    main_core_reg_tx_conv_converter_source_payload_data <= 9'd0;
    case (main_core_reg_tx_conv_converter_mux)
        1'd0: begin
            main_core_reg_tx_conv_converter_source_payload_data <= main_core_reg_tx_conv_converter_sink_payload_data[17:9];
        end
        default: begin
            main_core_reg_tx_conv_converter_source_payload_data <= main_core_reg_tx_conv_converter_sink_payload_data[8:0];
        end
    endcase
end
assign main_core_reg_tx_conv_converter_source_payload_valid_token_count = main_core_reg_tx_conv_converter_last;
assign main_core_reg_rx_conv_converter_sink_valid = main_core_reg_rx_conv_sink_valid;
assign main_core_reg_rx_conv_converter_sink_first = main_core_reg_rx_conv_sink_first;
assign main_core_reg_rx_conv_converter_sink_last = main_core_reg_rx_conv_sink_last;
assign main_core_reg_rx_conv_sink_ready = main_core_reg_rx_conv_converter_sink_ready;
assign main_core_reg_rx_conv_converter_sink_payload_data = {main_core_reg_rx_conv_sink_payload_dq};
assign main_core_reg_rx_conv_source_valid = main_core_reg_rx_conv_source_source_valid;
assign main_core_reg_rx_conv_source_first = main_core_reg_rx_conv_source_source_first;
assign main_core_reg_rx_conv_source_last = main_core_reg_rx_conv_source_source_last;
assign main_core_reg_rx_conv_source_source_ready = main_core_reg_rx_conv_source_ready;
always @(*) begin
    main_core_reg_rx_conv_source_payload_dq <= 16'd0;
    main_core_reg_rx_conv_source_payload_dq[7:0] <= main_core_reg_rx_conv_source_source_payload_data[7:0];
    main_core_reg_rx_conv_source_payload_dq[15:8] <= main_core_reg_rx_conv_source_source_payload_data[15:8];
end
assign main_core_reg_rx_conv_source_source_valid = main_core_reg_rx_conv_converter_source_valid;
assign main_core_reg_rx_conv_converter_source_ready = main_core_reg_rx_conv_source_source_ready;
assign main_core_reg_rx_conv_source_source_first = main_core_reg_rx_conv_converter_source_first;
assign main_core_reg_rx_conv_source_source_last = main_core_reg_rx_conv_converter_source_last;
assign main_core_reg_rx_conv_source_source_payload_data = main_core_reg_rx_conv_converter_source_payload_data;
assign main_core_reg_rx_conv_converter_sink_ready = ((~main_core_reg_rx_conv_converter_strobe_all) | main_core_reg_rx_conv_converter_source_ready);
assign main_core_reg_rx_conv_converter_source_valid = main_core_reg_rx_conv_converter_strobe_all;
assign main_core_reg_rx_conv_converter_load_part = (main_core_reg_rx_conv_converter_sink_valid & main_core_reg_rx_conv_converter_sink_ready);
assign main_core_dat_tx_conv_converter_sink_valid = main_core_dat_tx_conv_sink_valid;
assign main_core_dat_tx_conv_converter_sink_first = main_core_dat_tx_conv_sink_first;
assign main_core_dat_tx_conv_converter_sink_last = main_core_dat_tx_conv_sink_last;
assign main_core_dat_tx_conv_sink_ready = main_core_dat_tx_conv_converter_sink_ready;
always @(*) begin
    main_core_dat_tx_conv_converter_sink_payload_data <= 36'd0;
    main_core_dat_tx_conv_converter_sink_payload_data[7:0] <= main_core_dat_tx_conv_sink_payload_dq[7:0];
    main_core_dat_tx_conv_converter_sink_payload_data[8] <= main_core_dat_tx_conv_sink_payload_rwds[0];
    main_core_dat_tx_conv_converter_sink_payload_data[16:9] <= main_core_dat_tx_conv_sink_payload_dq[15:8];
    main_core_dat_tx_conv_converter_sink_payload_data[17] <= main_core_dat_tx_conv_sink_payload_rwds[1];
    main_core_dat_tx_conv_converter_sink_payload_data[25:18] <= main_core_dat_tx_conv_sink_payload_dq[23:16];
    main_core_dat_tx_conv_converter_sink_payload_data[26] <= main_core_dat_tx_conv_sink_payload_rwds[2];
    main_core_dat_tx_conv_converter_sink_payload_data[34:27] <= main_core_dat_tx_conv_sink_payload_dq[31:24];
    main_core_dat_tx_conv_converter_sink_payload_data[35] <= main_core_dat_tx_conv_sink_payload_rwds[3];
end
assign main_core_dat_tx_conv_source_valid = main_core_dat_tx_conv_source_source_valid;
assign main_core_dat_tx_conv_source_first = main_core_dat_tx_conv_source_source_first;
assign main_core_dat_tx_conv_source_last = main_core_dat_tx_conv_source_source_last;
assign main_core_dat_tx_conv_source_source_ready = main_core_dat_tx_conv_source_ready;
assign {main_core_dat_tx_conv_source_payload_rwds, main_core_dat_tx_conv_source_payload_dq} = main_core_dat_tx_conv_source_source_payload_data;
assign main_core_dat_tx_conv_source_source_valid = main_core_dat_tx_conv_converter_source_valid;
assign main_core_dat_tx_conv_converter_source_ready = main_core_dat_tx_conv_source_source_ready;
assign main_core_dat_tx_conv_source_source_first = main_core_dat_tx_conv_converter_source_first;
assign main_core_dat_tx_conv_source_source_last = main_core_dat_tx_conv_converter_source_last;
assign main_core_dat_tx_conv_source_source_payload_data = main_core_dat_tx_conv_converter_source_payload_data;
assign main_core_dat_tx_conv_converter_first = (main_core_dat_tx_conv_converter_mux == 1'd0);
assign main_core_dat_tx_conv_converter_last = (main_core_dat_tx_conv_converter_mux == 2'd3);
assign main_core_dat_tx_conv_converter_source_valid = main_core_dat_tx_conv_converter_sink_valid;
assign main_core_dat_tx_conv_converter_source_first = (main_core_dat_tx_conv_converter_sink_first & main_core_dat_tx_conv_converter_first);
assign main_core_dat_tx_conv_converter_source_last = (main_core_dat_tx_conv_converter_sink_last & main_core_dat_tx_conv_converter_last);
assign main_core_dat_tx_conv_converter_sink_ready = (main_core_dat_tx_conv_converter_last & main_core_dat_tx_conv_converter_source_ready);
always @(*) begin
    main_core_dat_tx_conv_converter_source_payload_data <= 9'd0;
    case (main_core_dat_tx_conv_converter_mux)
        1'd0: begin
            main_core_dat_tx_conv_converter_source_payload_data <= main_core_dat_tx_conv_converter_sink_payload_data[35:27];
        end
        1'd1: begin
            main_core_dat_tx_conv_converter_source_payload_data <= main_core_dat_tx_conv_converter_sink_payload_data[26:18];
        end
        2'd2: begin
            main_core_dat_tx_conv_converter_source_payload_data <= main_core_dat_tx_conv_converter_sink_payload_data[17:9];
        end
        default: begin
            main_core_dat_tx_conv_converter_source_payload_data <= main_core_dat_tx_conv_converter_sink_payload_data[8:0];
        end
    endcase
end
assign main_core_dat_tx_conv_converter_source_payload_valid_token_count = main_core_dat_tx_conv_converter_last;
assign main_core_dat_rx_conv_converter_sink_valid = main_core_dat_rx_conv_sink_valid;
assign main_core_dat_rx_conv_converter_sink_first = main_core_dat_rx_conv_sink_first;
assign main_core_dat_rx_conv_converter_sink_last = main_core_dat_rx_conv_sink_last;
assign main_core_dat_rx_conv_sink_ready = main_core_dat_rx_conv_converter_sink_ready;
assign main_core_dat_rx_conv_converter_sink_payload_data = {main_core_dat_rx_conv_sink_payload_dq};
assign main_core_dat_rx_conv_source_valid = main_core_dat_rx_conv_source_source_valid;
assign main_core_dat_rx_conv_source_first = main_core_dat_rx_conv_source_source_first;
assign main_core_dat_rx_conv_source_last = main_core_dat_rx_conv_source_source_last;
assign main_core_dat_rx_conv_source_source_ready = main_core_dat_rx_conv_source_ready;
always @(*) begin
    main_core_dat_rx_conv_source_payload_dq <= 32'd0;
    main_core_dat_rx_conv_source_payload_dq[7:0] <= main_core_dat_rx_conv_source_source_payload_data[7:0];
    main_core_dat_rx_conv_source_payload_dq[15:8] <= main_core_dat_rx_conv_source_source_payload_data[15:8];
    main_core_dat_rx_conv_source_payload_dq[23:16] <= main_core_dat_rx_conv_source_source_payload_data[23:16];
    main_core_dat_rx_conv_source_payload_dq[31:24] <= main_core_dat_rx_conv_source_source_payload_data[31:24];
end
assign main_core_dat_rx_conv_source_source_valid = main_core_dat_rx_conv_converter_source_valid;
assign main_core_dat_rx_conv_converter_source_ready = main_core_dat_rx_conv_source_source_ready;
assign main_core_dat_rx_conv_source_source_first = main_core_dat_rx_conv_converter_source_first;
assign main_core_dat_rx_conv_source_source_last = main_core_dat_rx_conv_converter_source_last;
assign main_core_dat_rx_conv_source_source_payload_data = main_core_dat_rx_conv_converter_source_payload_data;
assign main_core_dat_rx_conv_converter_sink_ready = ((~main_core_dat_rx_conv_converter_strobe_all) | main_core_dat_rx_conv_converter_source_ready);
assign main_core_dat_rx_conv_converter_source_valid = main_core_dat_rx_conv_converter_strobe_all;
assign main_core_dat_rx_conv_converter_load_part = (main_core_dat_rx_conv_converter_sink_valid & main_core_dat_rx_conv_converter_sink_ready);
always @(*) begin
    main_core_burst_r_first_next_value2 <= 1'd0;
    main_core_burst_r_first_next_value_ce2 <= 1'd0;
    main_core_bus_ack <= 1'd0;
    main_core_bus_dat_r <= 32'd0;
    main_core_bus_latch <= 1'd0;
    main_core_cmd_tx_conv_converter_sink_payload_data <= 48'd0;
    main_core_cmd_tx_conv_converter_sink_valid <= 1'd0;
    main_core_cmd_tx_conv_source_source_ready <= 1'd0;
    main_core_cycles_next_value1 <= 8'd0;
    main_core_cycles_next_value_ce1 <= 1'd0;
    main_core_dat_tx_conv_sink_payload_dq <= 32'd0;
    main_core_dat_tx_conv_sink_payload_rwds <= 4'd0;
    main_core_dat_tx_conv_sink_valid <= 1'd0;
    main_core_dat_tx_conv_source_ready <= 1'd0;
    main_core_latency_x2_next_value0 <= 1'd0;
    main_core_latency_x2_next_value_ce0 <= 1'd0;
    main_core_next_state <= 3'd0;
    main_core_reg_ack <= 1'd0;
    main_core_reg_dat_r <= 16'd0;
    main_core_reg_tx_conv_sink_payload_dq <= 16'd0;
    main_core_reg_tx_conv_sink_valid <= 1'd0;
    main_core_reg_tx_conv_source_ready <= 1'd0;
    main_core_source_source_first <= 1'd0;
    main_core_source_source_last <= 1'd0;
    main_core_source_source_payload_cmd <= 1'd0;
    main_core_source_source_payload_dat_r <= 1'd0;
    main_core_source_source_payload_dat_w <= 1'd0;
    main_core_source_source_payload_dq <= 8'd0;
    main_core_source_source_payload_dq_oe <= 1'd0;
    main_core_source_source_payload_rwds <= 1'd0;
    main_core_source_source_payload_rwds_oe <= 1'd0;
    main_core_source_source_valid <= 1'd0;
    main_core_next_state <= main_core_state;
    case (main_core_state)
        1'd1: begin
            main_core_cmd_tx_conv_converter_sink_valid <= 1'd1;
            main_core_cmd_tx_conv_converter_sink_payload_data <= main_core_cmd;
            main_core_source_source_valid <= main_core_cmd_tx_conv_source_source_valid;
            main_core_cmd_tx_conv_source_source_ready <= main_core_source_source_ready;
            main_core_source_source_payload_cmd <= 1'd1;
            main_core_source_source_payload_dq <= main_core_cmd_tx_conv_source_source_payload_data;
            main_core_source_source_payload_dq_oe <= 1'd1;
            if (main_core_cmd_tx_conv_converter_sink_ready) begin
                if ((main_core_reg_stb & main_core_reg_we)) begin
                    main_core_next_state <= 2'd3;
                end else begin
                    main_core_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if ((main_core_cycles == 1'd0)) begin
                main_core_latency_x2_next_value0 <= (main_hyperramsdrphy_ios_rwds_i | 1'd0);
                main_core_latency_x2_next_value_ce0 <= 1'd1;
            end
            main_core_source_source_valid <= 1'd1;
            if (main_core_source_source_ready) begin
                main_core_cycles_next_value1 <= (main_core_cycles + 1'd1);
                main_core_cycles_next_value_ce1 <= 1'd1;
                if ((main_core_cycles == ((2'd2 * (((main_core_latency_x2 + 1'd1) * main_core_latency) - 1'd1)) - 1'd1))) begin
                    if ((main_core_reg_stb & (~main_core_reg_we))) begin
                        main_core_next_state <= 3'd4;
                    end else begin
                        main_core_bus_latch <= 1'd1;
                        if (main_core_bus_we0) begin
                            main_core_bus_ack <= 1'd1;
                            main_core_next_state <= 3'd5;
                        end else begin
                            main_core_burst_r_first_next_value2 <= 1'd1;
                            main_core_burst_r_first_next_value_ce2 <= 1'd1;
                            main_core_next_state <= 3'd6;
                        end
                    end
                end
            end
        end
        2'd3: begin
            main_core_reg_tx_conv_sink_valid <= 1'd1;
            main_core_reg_tx_conv_sink_payload_dq <= main_core_reg_dat_w;
            main_core_source_source_valid <= main_core_reg_tx_conv_source_valid;
            main_core_reg_tx_conv_source_ready <= main_core_source_source_ready;
            main_core_source_source_first <= main_core_reg_tx_conv_source_first;
            main_core_source_source_last <= main_core_reg_tx_conv_source_last;
            main_core_source_source_payload_dq <= main_core_reg_tx_conv_source_payload_dq;
            main_core_source_source_payload_rwds <= main_core_reg_tx_conv_source_payload_rwds;
            main_core_source_source_payload_dat_w <= 1'd1;
            main_core_source_source_payload_dq_oe <= 1'd1;
            if (main_core_reg_tx_conv_sink_ready) begin
                main_core_reg_ack <= 1'd1;
                main_core_next_state <= 3'd7;
            end
        end
        3'd4: begin
            main_core_source_source_valid <= 1'd1;
            main_core_source_source_payload_dat_r <= 1'd1;
            if (main_core_reg_rx_conv_source_valid) begin
                main_core_reg_ack <= 1'd1;
                main_core_reg_dat_r <= main_core_reg_rx_conv_source_payload_dq;
                main_core_next_state <= 3'd7;
            end
        end
        3'd5: begin
            main_core_dat_tx_conv_sink_valid <= 1'd1;
            main_core_dat_tx_conv_sink_payload_dq <= main_core_bus_dat_w1;
            main_core_dat_tx_conv_sink_payload_rwds <= (~main_core_bus_sel1);
            main_core_source_source_valid <= main_core_dat_tx_conv_source_valid;
            main_core_dat_tx_conv_source_ready <= main_core_source_source_ready;
            main_core_source_source_first <= main_core_dat_tx_conv_source_first;
            main_core_source_source_last <= main_core_dat_tx_conv_source_last;
            main_core_source_source_payload_dq <= main_core_dat_tx_conv_source_payload_dq;
            main_core_source_source_payload_rwds <= main_core_dat_tx_conv_source_payload_rwds;
            main_core_source_source_payload_dq_oe <= 1'd1;
            main_core_source_source_payload_rwds_oe <= 1'd1;
            main_core_source_source_payload_dat_w <= 1'd1;
            if (main_core_dat_tx_conv_sink_ready) begin
                main_core_bus_ack <= (((1'd1 & main_core_bus_cyc) & main_core_bus_stb) & main_core_burst_w);
                if (main_core_bus_ack) begin
                    main_core_bus_latch <= 1'd1;
                    main_core_next_state <= 3'd5;
                end else begin
                    main_core_next_state <= 3'd7;
                end
            end
        end
        3'd6: begin
            main_core_source_source_valid <= 1'd1;
            main_core_source_source_payload_dat_r <= 1'd1;
            if (main_core_dat_rx_conv_source_valid) begin
                main_core_burst_r_first_next_value2 <= 1'd0;
                main_core_burst_r_first_next_value_ce2 <= 1'd1;
                main_core_bus_ack <= (main_core_burst_r_first | (((1'd1 & main_core_bus_cyc) & main_core_bus_stb) & main_core_burst_r));
                main_core_bus_dat_r <= main_core_dat_rx_conv_source_payload_dq;
                if (main_core_bus_ack) begin
                    main_core_bus_latch <= 1'd1;
                    main_core_next_state <= 3'd6;
                end else begin
                    main_core_next_state <= 3'd7;
                end
            end
        end
        3'd7: begin
            main_core_cycles_next_value1 <= (main_core_cycles + 1'd1);
            main_core_cycles_next_value_ce1 <= 1'd1;
            if ((main_core_cycles == 4'd8)) begin
                main_core_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_core_bus_cyc & main_core_bus_stb) | main_core_reg_stb)) begin
                main_core_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_tx_cdc_sink_valid = main_core_source_source_valid;
assign main_core_source_source_ready = main_tx_cdc_sink_ready;
assign main_tx_cdc_sink_first = main_core_source_source_first;
assign main_tx_cdc_sink_last = main_core_source_source_last;
assign main_tx_cdc_sink_payload_cmd = main_core_source_source_payload_cmd;
assign main_tx_cdc_sink_payload_dat_w = main_core_source_source_payload_dat_w;
assign main_tx_cdc_sink_payload_dat_r = main_core_source_source_payload_dat_r;
assign main_tx_cdc_sink_payload_dq = main_core_source_source_payload_dq;
assign main_tx_cdc_sink_payload_dq_oe = main_core_source_source_payload_dq_oe;
assign main_tx_cdc_sink_payload_rwds = main_core_source_source_payload_rwds;
assign main_tx_cdc_sink_payload_rwds_oe = main_core_source_source_payload_rwds_oe;
assign main_syncfifo0_sink_valid = main_tx_cdc_source_valid;
assign main_tx_cdc_source_ready = main_syncfifo0_sink_ready;
assign main_syncfifo0_sink_first = main_tx_cdc_source_first;
assign main_syncfifo0_sink_last = main_tx_cdc_source_last;
assign main_syncfifo0_sink_payload_cmd = main_tx_cdc_source_payload_cmd;
assign main_syncfifo0_sink_payload_dat_w = main_tx_cdc_source_payload_dat_w;
assign main_syncfifo0_sink_payload_dat_r = main_tx_cdc_source_payload_dat_r;
assign main_syncfifo0_sink_payload_dq = main_tx_cdc_source_payload_dq;
assign main_syncfifo0_sink_payload_dq_oe = main_tx_cdc_source_payload_dq_oe;
assign main_syncfifo0_sink_payload_rwds = main_tx_cdc_source_payload_rwds;
assign main_syncfifo0_sink_payload_rwds_oe = main_tx_cdc_source_payload_rwds_oe;
assign main_hyperramsdrphy_sink_valid = main_syncfifo0_source_valid;
assign main_syncfifo0_source_ready = main_hyperramsdrphy_sink_ready;
assign main_hyperramsdrphy_sink_first = main_syncfifo0_source_first;
assign main_hyperramsdrphy_sink_last = main_syncfifo0_source_last;
assign main_hyperramsdrphy_sink_payload_cmd = main_syncfifo0_source_payload_cmd;
assign main_hyperramsdrphy_sink_payload_dat_w = main_syncfifo0_source_payload_dat_w;
assign main_hyperramsdrphy_sink_payload_dat_r = main_syncfifo0_source_payload_dat_r;
assign main_hyperramsdrphy_sink_payload_dq = main_syncfifo0_source_payload_dq;
assign main_hyperramsdrphy_sink_payload_dq_oe = main_syncfifo0_source_payload_dq_oe;
assign main_hyperramsdrphy_sink_payload_rwds = main_syncfifo0_source_payload_rwds;
assign main_hyperramsdrphy_sink_payload_rwds_oe = main_syncfifo0_source_payload_rwds_oe;
assign main_syncfifo1_sink_valid = main_hyperramsdrphy_source_valid;
assign main_hyperramsdrphy_source_ready = main_syncfifo1_sink_ready;
assign main_syncfifo1_sink_first = main_hyperramsdrphy_source_first;
assign main_syncfifo1_sink_last = main_hyperramsdrphy_source_last;
assign main_syncfifo1_sink_payload_dq = main_hyperramsdrphy_source_payload_dq;
assign main_rx_cdc_sink_valid = main_syncfifo1_source_valid;
assign main_syncfifo1_source_ready = main_rx_cdc_sink_ready;
assign main_rx_cdc_sink_first = main_syncfifo1_source_first;
assign main_rx_cdc_sink_last = main_syncfifo1_source_last;
assign main_rx_cdc_sink_payload_dq = main_syncfifo1_source_payload_dq;
assign main_core_sink_sink_valid = main_rx_cdc_source_valid;
assign main_rx_cdc_source_ready = main_core_sink_sink_ready;
assign main_core_sink_sink_first = main_rx_cdc_source_first;
assign main_core_sink_sink_last = main_rx_cdc_source_last;
assign main_core_sink_sink_payload_dq = main_rx_cdc_source_payload_dq;
always @(*) begin
    builder_fsm_next_state <= 2'd0;
    main_core_reg_adr <= 3'd0;
    main_core_reg_dat_w <= 16'd0;
    main_core_reg_stb <= 1'd0;
    main_core_reg_we <= 1'd0;
    main_hyperram_done <= 1'd0;
    main_hyperram_reg_rdata_status_hyperram_next_value <= 16'd0;
    main_hyperram_reg_rdata_status_hyperram_next_value_ce <= 1'd0;
    builder_fsm_next_state <= builder_fsm_state;
    case (builder_fsm_state)
        1'd1: begin
            main_core_reg_stb <= 1'd1;
            main_core_reg_we <= 1'd1;
            main_core_reg_adr <= main_hyperram_addr;
            main_core_reg_dat_w <= main_hyperram_reg_wdata_storage;
            if (main_core_reg_ack) begin
                builder_fsm_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_core_reg_stb <= 1'd1;
            main_core_reg_we <= 1'd0;
            main_core_reg_adr <= main_hyperram_addr;
            if (main_core_reg_ack) begin
                main_hyperram_reg_rdata_status_hyperram_next_value <= main_core_reg_dat_r;
                main_hyperram_reg_rdata_status_hyperram_next_value_ce <= 1'd1;
                builder_fsm_next_state <= 1'd0;
            end
        end
        default: begin
            main_hyperram_done <= 1'd1;
            if (main_hyperram_write) begin
                builder_fsm_next_state <= 1'd1;
            end else begin
                if (main_hyperram_read) begin
                    builder_fsm_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 8'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {user_led_n7, user_led_n6, user_led_n5, user_led_n4, user_led_n3, user_led_n2, user_led_n1, user_led_n0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_wishbone2csr_next_state <= 1'd0;
    builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
    case (builder_wishbone2csr_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr;
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage;
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage;
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status;
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign builder_csr_bankarray_csrbank1_config0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_config0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_config0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_config0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_config0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[4:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_status_re <= 1'd0;
    builder_csr_bankarray_csrbank1_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_status_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_reg_control0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[9:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_reg_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_reg_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_reg_control0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_reg_control0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_reg_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_reg_status_re <= 1'd0;
    builder_csr_bankarray_csrbank1_reg_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank1_reg_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_reg_status_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_reg_wdata0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_reg_wdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_reg_wdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank1_reg_wdata0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_reg_wdata0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_reg_rdata_r = builder_csr_bankarray_interface1_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_reg_rdata_re <= 1'd0;
    builder_csr_bankarray_csrbank1_reg_rdata_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank1_reg_rdata_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_reg_rdata_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
always @(*) begin
    main_hyperram_rst <= 1'd0;
    if (main_hyperram_config_re) begin
        main_hyperram_rst <= main_hyperram_config_storage[0];
    end
end
assign main_hyperram_latency = main_hyperram_config_storage[15:8];
assign builder_csr_bankarray_csrbank1_config0_w = main_hyperram_config_storage;
always @(*) begin
    main_hyperram_status_status <= 5'd9;
    main_hyperram_status_status[0] <= main_hyperram_latency_mode;
    main_hyperram_status_status[4:1] <= main_hyperram_clk_ratio;
end
assign builder_csr_bankarray_csrbank1_status_w = main_hyperram_status_status;
assign main_hyperram_status_we = builder_csr_bankarray_csrbank1_status_we;
always @(*) begin
    main_hyperram_write <= 1'd0;
    if (main_hyperram_reg_control_re) begin
        main_hyperram_write <= main_hyperram_reg_control_storage[0];
    end
end
always @(*) begin
    main_hyperram_read <= 1'd0;
    if (main_hyperram_reg_control_re) begin
        main_hyperram_read <= main_hyperram_reg_control_storage[1];
    end
end
assign main_hyperram_addr = main_hyperram_reg_control_storage[9:8];
assign builder_csr_bankarray_csrbank1_reg_control0_w = main_hyperram_reg_control_storage;
assign main_hyperram_reg_status_status = main_hyperram_done;
assign builder_csr_bankarray_csrbank1_reg_status_w = main_hyperram_reg_status_status;
assign main_hyperram_reg_status_we = builder_csr_bankarray_csrbank1_reg_status_we;
assign builder_csr_bankarray_csrbank1_reg_wdata0_w = main_hyperram_reg_wdata_storage;
assign builder_csr_bankarray_csrbank1_reg_rdata_w = main_hyperram_reg_rdata_status;
assign main_hyperram_reg_rdata_we = builder_csr_bankarray_csrbank1_reg_rdata_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_out0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_out0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_out0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_out0_w = main_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank3_load0_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_load0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_load0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_reload0_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_reload0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_reload0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_en0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_en0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_en0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_update_value0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_update_value0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_update_value0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_value_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_value_re <= 1'd0;
    builder_csr_bankarray_csrbank3_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_value_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_value_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_status_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_pending_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_enable0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_load0_w = main_basesoc_timer_load_storage;
assign builder_csr_bankarray_csrbank3_reload0_w = main_basesoc_timer_reload_storage;
assign builder_csr_bankarray_csrbank3_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank3_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank3_value_w = main_basesoc_timer_value_status;
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank3_value_we;
assign main_basesoc_timer_status_status = main_basesoc_timer_zero0;
assign builder_csr_bankarray_csrbank3_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
assign main_basesoc_timer_pending_status = main_basesoc_timer_zero1;
assign builder_csr_bankarray_csrbank3_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank3_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface4_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_txfull_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank4_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_txfull_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_txfull_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_rxempty_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank4_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank4_rxempty_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_rxempty_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_status_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_ev_status_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_status_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_pending_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_ev_pending_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_pending_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_ev_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_enable0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_txempty_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank4_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_txempty_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_txempty_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_rxfull_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank4_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_rxfull_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_rxfull_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank4_txfull_we;
assign builder_csr_bankarray_csrbank4_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank4_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank4_ev_status_w = main_basesoc_uart_status_status;
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank4_ev_pending_w = main_basesoc_uart_pending_status;
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank4_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank4_ev_enable0_w = main_basesoc_uart_enable_storage;
assign builder_csr_bankarray_csrbank4_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank4_txempty_we;
assign builder_csr_bankarray_csrbank4_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank4_rxfull_we;
assign builder_csr_interconnect_adr = builder_interface1_adr;
assign builder_csr_interconnect_re = builder_interface1_re;
assign builder_csr_interconnect_we = builder_interface1_we;
assign builder_csr_interconnect_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_self0 <= 30'd0;
    case (builder_grant)
        default: begin
            builder_self0 <= main_basesoc_adapted_interface_adr;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 32'd0;
    case (builder_grant)
        default: begin
            builder_self1 <= main_basesoc_adapted_interface_dat_w;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 4'd0;
    case (builder_grant)
        default: begin
            builder_self2 <= main_basesoc_adapted_interface_sel;
        end
    endcase
end
always @(*) begin
    builder_self3 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self3 <= main_basesoc_adapted_interface_cyc;
        end
    endcase
end
always @(*) begin
    builder_self4 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self4 <= main_basesoc_adapted_interface_stb;
        end
    endcase
end
always @(*) begin
    builder_self5 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self5 <= main_basesoc_adapted_interface_we;
        end
    endcase
end
always @(*) begin
    builder_self6 <= 3'd0;
    case (builder_grant)
        default: begin
            builder_self6 <= main_basesoc_adapted_interface_cti;
        end
    endcase
end
always @(*) begin
    builder_self7 <= 2'd0;
    case (builder_grant)
        default: begin
            builder_self7 <= main_basesoc_adapted_interface_bte;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl01;
assign hyperram_cs_n = builder_multiregimpl1;
assign hyperram_rst_n = builder_multiregimpl2;
assign hyperram_clk_p = builder_multiregimpl32;
assign hyperram_clk_n = builder_multiregimpl42;
assign main_hyperramsdrphy_dq_oe = builder_multiregimpl52;
always @(*) begin
    main_hyperramsdrphy_dq_o <= 8'd0;
    main_hyperramsdrphy_dq_o[0] <= builder_multiregimpl62;
    main_hyperramsdrphy_dq_o[1] <= builder_multiregimpl82;
    main_hyperramsdrphy_dq_o[2] <= builder_multiregimpl102;
    main_hyperramsdrphy_dq_o[3] <= builder_multiregimpl122;
    main_hyperramsdrphy_dq_o[4] <= builder_multiregimpl142;
    main_hyperramsdrphy_dq_o[5] <= builder_multiregimpl162;
    main_hyperramsdrphy_dq_o[6] <= builder_multiregimpl182;
    main_hyperramsdrphy_dq_o[7] <= builder_multiregimpl202;
end
always @(*) begin
    main_hyperramsdrphy_ios_dq_i <= 8'd0;
    main_hyperramsdrphy_ios_dq_i[0] <= builder_multiregimpl7;
    main_hyperramsdrphy_ios_dq_i[1] <= builder_multiregimpl9;
    main_hyperramsdrphy_ios_dq_i[2] <= builder_multiregimpl11;
    main_hyperramsdrphy_ios_dq_i[3] <= builder_multiregimpl13;
    main_hyperramsdrphy_ios_dq_i[4] <= builder_multiregimpl15;
    main_hyperramsdrphy_ios_dq_i[5] <= builder_multiregimpl17;
    main_hyperramsdrphy_ios_dq_i[6] <= builder_multiregimpl19;
    main_hyperramsdrphy_ios_dq_i[7] <= builder_multiregimpl21;
end
assign main_hyperramsdrphy_rwds_oe = builder_multiregimpl222;
assign main_hyperramsdrphy_rwds_o = builder_multiregimpl232;
assign main_hyperramsdrphy_ios_rwds_i = builder_multiregimpl24;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata1 <= main_basesoc_idbus_dat_r;
    end
    builder_femtorv_state <= builder_femtorv_next_state;
    if (main_basesoc_idbus_adr_femtorv_next_value_ce0) begin
        main_basesoc_idbus_adr <= main_basesoc_idbus_adr_femtorv_next_value0;
    end
    if (main_basesoc_idbus_dat_w_femtorv_next_value_ce1) begin
        main_basesoc_idbus_dat_w <= main_basesoc_idbus_dat_w_femtorv_next_value1;
    end
    if (main_basesoc_idbus_sel_femtorv_next_value_ce2) begin
        main_basesoc_idbus_sel <= main_basesoc_idbus_sel_femtorv_next_value2;
    end
    if (main_basesoc_idbus_we_femtorv_next_value_ce3) begin
        main_basesoc_idbus_we <= main_basesoc_idbus_we_femtorv_next_value3;
    end
    main_basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_basesoc_ram_bus_cyc & main_basesoc_basesoc_ram_bus_stb) & ((~main_basesoc_basesoc_ram_bus_ack) | main_basesoc_basesoc_adr_burst))) begin
        main_basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & ((~main_basesoc_ram_bus_ram_bus_ack) | main_basesoc_ram_adr_burst))) begin
        main_basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 25'd20615843;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 25'd20615843);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1) begin
        usb_uart_tx <= main_basesoc_usb_uart_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 25'd20615843);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    main_hyperramsdrphy_rwds_i_d <= main_hyperramsdrphy_ios_rwds_i;
    main_hyperramsdrphy_phase <= (main_hyperramsdrphy_phase + 1'd1);
    builder_clockdomainsrenamer_state <= builder_clockdomainsrenamer_next_state;
    if (((main_syncfifo0_syncfifo0_we & main_syncfifo0_syncfifo0_writable) & (~main_syncfifo0_replace))) begin
        main_syncfifo0_produce <= (main_syncfifo0_produce + 1'd1);
    end
    if (main_syncfifo0_do_read) begin
        main_syncfifo0_consume <= (main_syncfifo0_consume + 1'd1);
    end
    if (((main_syncfifo0_syncfifo0_we & main_syncfifo0_syncfifo0_writable) & (~main_syncfifo0_replace))) begin
        if ((~main_syncfifo0_do_read)) begin
            main_syncfifo0_level <= (main_syncfifo0_level + 1'd1);
        end
    end else begin
        if (main_syncfifo0_do_read) begin
            main_syncfifo0_level <= (main_syncfifo0_level - 1'd1);
        end
    end
    if (((main_syncfifo1_syncfifo1_we & main_syncfifo1_syncfifo1_writable) & (~main_syncfifo1_replace))) begin
        main_syncfifo1_produce <= (main_syncfifo1_produce + 1'd1);
    end
    if (main_syncfifo1_do_read) begin
        main_syncfifo1_consume <= (main_syncfifo1_consume + 1'd1);
    end
    if (((main_syncfifo1_syncfifo1_we & main_syncfifo1_syncfifo1_writable) & (~main_syncfifo1_replace))) begin
        if ((~main_syncfifo1_do_read)) begin
            main_syncfifo1_level <= (main_syncfifo1_level + 1'd1);
        end
    end else begin
        if (main_syncfifo1_do_read) begin
            main_syncfifo1_level <= (main_syncfifo1_level - 1'd1);
        end
    end
    if (main_core_bus_latch) begin
        main_core_bus_cti1 <= main_core_bus_cti1;
        main_core_bus_we1 <= main_core_bus_we0;
        main_core_bus_sel1 <= main_core_bus_sel0;
        main_core_bus_adr1 <= main_core_bus_adr0;
        main_core_bus_dat_w1 <= main_core_bus_dat_w0;
    end
    if ((main_core_next_state != main_core_state)) begin
        main_core_cycles <= 1'd0;
    end
    if ((main_core_cmd_tx_conv_converter_source_valid & main_core_cmd_tx_conv_converter_source_ready)) begin
        if (main_core_cmd_tx_conv_converter_last) begin
            main_core_cmd_tx_conv_converter_mux <= 1'd0;
        end else begin
            main_core_cmd_tx_conv_converter_mux <= (main_core_cmd_tx_conv_converter_mux + 1'd1);
        end
    end
    if ((main_core_reg_tx_conv_converter_source_valid & main_core_reg_tx_conv_converter_source_ready)) begin
        if (main_core_reg_tx_conv_converter_last) begin
            main_core_reg_tx_conv_converter_mux <= 1'd0;
        end else begin
            main_core_reg_tx_conv_converter_mux <= (main_core_reg_tx_conv_converter_mux + 1'd1);
        end
    end
    if (main_core_reg_rx_conv_converter_source_ready) begin
        main_core_reg_rx_conv_converter_strobe_all <= 1'd0;
    end
    if (main_core_reg_rx_conv_converter_load_part) begin
        if (((main_core_reg_rx_conv_converter_demux == 1'd1) | main_core_reg_rx_conv_converter_sink_last)) begin
            main_core_reg_rx_conv_converter_demux <= 1'd0;
            main_core_reg_rx_conv_converter_strobe_all <= 1'd1;
        end else begin
            main_core_reg_rx_conv_converter_demux <= (main_core_reg_rx_conv_converter_demux + 1'd1);
        end
    end
    if ((main_core_reg_rx_conv_converter_source_valid & main_core_reg_rx_conv_converter_source_ready)) begin
        if ((main_core_reg_rx_conv_converter_sink_valid & main_core_reg_rx_conv_converter_sink_ready)) begin
            main_core_reg_rx_conv_converter_source_first <= main_core_reg_rx_conv_converter_sink_first;
            main_core_reg_rx_conv_converter_source_last <= main_core_reg_rx_conv_converter_sink_last;
        end else begin
            main_core_reg_rx_conv_converter_source_first <= 1'd0;
            main_core_reg_rx_conv_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_core_reg_rx_conv_converter_sink_valid & main_core_reg_rx_conv_converter_sink_ready)) begin
            main_core_reg_rx_conv_converter_source_first <= (main_core_reg_rx_conv_converter_sink_first | main_core_reg_rx_conv_converter_source_first);
            main_core_reg_rx_conv_converter_source_last <= (main_core_reg_rx_conv_converter_sink_last | main_core_reg_rx_conv_converter_source_last);
        end
    end
    if (main_core_reg_rx_conv_converter_load_part) begin
        case (main_core_reg_rx_conv_converter_demux)
            1'd0: begin
                main_core_reg_rx_conv_converter_source_payload_data[15:8] <= main_core_reg_rx_conv_converter_sink_payload_data;
            end
            1'd1: begin
                main_core_reg_rx_conv_converter_source_payload_data[7:0] <= main_core_reg_rx_conv_converter_sink_payload_data;
            end
        endcase
    end
    if (main_core_reg_rx_conv_converter_load_part) begin
        main_core_reg_rx_conv_converter_source_payload_valid_token_count <= (main_core_reg_rx_conv_converter_demux + 1'd1);
    end
    if ((main_core_dat_tx_conv_converter_source_valid & main_core_dat_tx_conv_converter_source_ready)) begin
        if (main_core_dat_tx_conv_converter_last) begin
            main_core_dat_tx_conv_converter_mux <= 1'd0;
        end else begin
            main_core_dat_tx_conv_converter_mux <= (main_core_dat_tx_conv_converter_mux + 1'd1);
        end
    end
    if (main_core_dat_rx_conv_converter_source_ready) begin
        main_core_dat_rx_conv_converter_strobe_all <= 1'd0;
    end
    if (main_core_dat_rx_conv_converter_load_part) begin
        if (((main_core_dat_rx_conv_converter_demux == 2'd3) | main_core_dat_rx_conv_converter_sink_last)) begin
            main_core_dat_rx_conv_converter_demux <= 1'd0;
            main_core_dat_rx_conv_converter_strobe_all <= 1'd1;
        end else begin
            main_core_dat_rx_conv_converter_demux <= (main_core_dat_rx_conv_converter_demux + 1'd1);
        end
    end
    if ((main_core_dat_rx_conv_converter_source_valid & main_core_dat_rx_conv_converter_source_ready)) begin
        if ((main_core_dat_rx_conv_converter_sink_valid & main_core_dat_rx_conv_converter_sink_ready)) begin
            main_core_dat_rx_conv_converter_source_first <= main_core_dat_rx_conv_converter_sink_first;
            main_core_dat_rx_conv_converter_source_last <= main_core_dat_rx_conv_converter_sink_last;
        end else begin
            main_core_dat_rx_conv_converter_source_first <= 1'd0;
            main_core_dat_rx_conv_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_core_dat_rx_conv_converter_sink_valid & main_core_dat_rx_conv_converter_sink_ready)) begin
            main_core_dat_rx_conv_converter_source_first <= (main_core_dat_rx_conv_converter_sink_first | main_core_dat_rx_conv_converter_source_first);
            main_core_dat_rx_conv_converter_source_last <= (main_core_dat_rx_conv_converter_sink_last | main_core_dat_rx_conv_converter_source_last);
        end
    end
    if (main_core_dat_rx_conv_converter_load_part) begin
        case (main_core_dat_rx_conv_converter_demux)
            1'd0: begin
                main_core_dat_rx_conv_converter_source_payload_data[31:24] <= main_core_dat_rx_conv_converter_sink_payload_data;
            end
            1'd1: begin
                main_core_dat_rx_conv_converter_source_payload_data[23:16] <= main_core_dat_rx_conv_converter_sink_payload_data;
            end
            2'd2: begin
                main_core_dat_rx_conv_converter_source_payload_data[15:8] <= main_core_dat_rx_conv_converter_sink_payload_data;
            end
            2'd3: begin
                main_core_dat_rx_conv_converter_source_payload_data[7:0] <= main_core_dat_rx_conv_converter_sink_payload_data;
            end
        endcase
    end
    if (main_core_dat_rx_conv_converter_load_part) begin
        main_core_dat_rx_conv_converter_source_payload_valid_token_count <= (main_core_dat_rx_conv_converter_demux + 1'd1);
    end
    main_core_state <= main_core_next_state;
    if (main_core_latency_x2_next_value_ce0) begin
        main_core_latency_x2 <= main_core_latency_x2_next_value0;
    end
    if (main_core_cycles_next_value_ce1) begin
        main_core_cycles <= main_core_cycles_next_value1;
    end
    if (main_core_burst_r_first_next_value_ce2) begin
        main_core_burst_r_first <= main_core_burst_r_first_next_value2;
    end
    builder_fsm_state <= builder_fsm_next_state;
    if (main_hyperram_reg_rdata_status_hyperram_next_value_ce) begin
        main_hyperram_reg_rdata_status <= main_hyperram_reg_rdata_status_hyperram_next_value;
    end
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser[7])};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 21'd1500000;
    end
    builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_config0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_status_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reg_control0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reg_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reg_wdata0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reg_rdata_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_config0_re) begin
        main_hyperram_config_storage <= builder_csr_bankarray_csrbank1_config0_r;
    end
    main_hyperram_config_re <= builder_csr_bankarray_csrbank1_config0_re;
    main_hyperram_status_re <= builder_csr_bankarray_csrbank1_status_re;
    if (builder_csr_bankarray_csrbank1_reg_control0_re) begin
        main_hyperram_reg_control_storage <= builder_csr_bankarray_csrbank1_reg_control0_r;
    end
    main_hyperram_reg_control_re <= builder_csr_bankarray_csrbank1_reg_control0_re;
    main_hyperram_reg_status_re <= builder_csr_bankarray_csrbank1_reg_status_re;
    if (builder_csr_bankarray_csrbank1_reg_wdata0_re) begin
        main_hyperram_reg_wdata_storage <= builder_csr_bankarray_csrbank1_reg_wdata0_r;
    end
    main_hyperram_reg_wdata_re <= builder_csr_bankarray_csrbank1_reg_wdata0_re;
    main_hyperram_reg_rdata_re <= builder_csr_bankarray_csrbank1_reg_rdata_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_out0_re) begin
        main_storage <= builder_csr_bankarray_csrbank2_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank2_out0_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_load0_re) begin
        main_basesoc_timer_load_storage <= builder_csr_bankarray_csrbank3_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank3_load0_re;
    if (builder_csr_bankarray_csrbank3_reload0_re) begin
        main_basesoc_timer_reload_storage <= builder_csr_bankarray_csrbank3_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank3_reload0_re;
    if (builder_csr_bankarray_csrbank3_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank3_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank3_en0_re;
    if (builder_csr_bankarray_csrbank3_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank3_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank3_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank3_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
    if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank3_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
    if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank3_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank4_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank4_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank4_ev_status_re;
    if (builder_csr_bankarray_csrbank4_ev_pending_re) begin
        main_basesoc_uart_pending_r <= builder_csr_bankarray_csrbank4_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank4_ev_pending_re;
    if (builder_csr_bankarray_csrbank4_ev_enable0_re) begin
        main_basesoc_uart_enable_storage <= builder_csr_bankarray_csrbank4_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank4_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank4_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank4_rxfull_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_idbus_we <= 1'd0;
        main_basesoc_mbus_rdata1 <= 32'd0;
        main_basesoc_basesoc_ram_bus_ack <= 1'd0;
        main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
        usb_uart_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_hyperramsdrphy_phase <= 2'd0;
        main_hyperramsdrphy_rwds_i_d <= 1'd0;
        main_syncfifo0_level <= 3'd0;
        main_syncfifo0_produce <= 2'd0;
        main_syncfifo0_consume <= 2'd0;
        main_syncfifo1_level <= 3'd0;
        main_syncfifo1_produce <= 2'd0;
        main_syncfifo1_consume <= 2'd0;
        main_core_cycles <= 8'd0;
        main_core_latency_x2 <= 1'd0;
        main_core_bus_cti1 <= 3'd0;
        main_core_bus_we1 <= 1'd0;
        main_core_bus_sel1 <= 4'd0;
        main_core_bus_adr1 <= 32'd0;
        main_core_bus_dat_w1 <= 32'd0;
        main_core_burst_r_first <= 1'd0;
        main_core_cmd_tx_conv_converter_mux <= 3'd0;
        main_core_reg_tx_conv_converter_mux <= 1'd0;
        main_core_reg_rx_conv_converter_source_payload_data <= 16'd0;
        main_core_reg_rx_conv_converter_source_payload_valid_token_count <= 2'd0;
        main_core_reg_rx_conv_converter_demux <= 1'd0;
        main_core_reg_rx_conv_converter_strobe_all <= 1'd0;
        main_core_dat_tx_conv_converter_mux <= 2'd0;
        main_core_dat_rx_conv_converter_source_payload_data <= 32'd0;
        main_core_dat_rx_conv_converter_source_payload_valid_token_count <= 3'd0;
        main_core_dat_rx_conv_converter_demux <= 2'd0;
        main_core_dat_rx_conv_converter_strobe_all <= 1'd0;
        main_core_state <= 3'd0;
        main_hyperram_config_storage <= 16'd1792;
        main_hyperram_config_re <= 1'd0;
        main_hyperram_status_re <= 1'd0;
        main_hyperram_reg_control_storage <= 10'd0;
        main_hyperram_reg_control_re <= 1'd0;
        main_hyperram_reg_status_re <= 1'd0;
        main_hyperram_reg_wdata_storage <= 16'd0;
        main_hyperram_reg_wdata_re <= 1'd0;
        main_hyperram_reg_rdata_status <= 16'd0;
        main_hyperram_reg_rdata_re <= 1'd0;
        main_storage <= 8'd0;
        main_re <= 1'd0;
        main_chaser <= 8'd0;
        main_mode <= 1'd0;
        main_count <= 21'd1500000;
        builder_slave_sel_r <= 4'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_femtorv_state <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_clockdomainsrenamer_state <= 2'd0;
        builder_fsm_state <= 2'd0;
        builder_wishbone2csr_state <= 1'd0;
    end
    builder_multiregimpl00 <= usb_uart_rx;
    builder_multiregimpl01 <= builder_multiregimpl00;
    builder_multiregimpl1 <= main_hyperramsdrphy_ios_cs_n;
    builder_multiregimpl2 <= main_hyperramsdrphy_ios_rst_n;
    builder_multiregimpl30 <= (main_hyperramsdrphy_ios_clk & hyperram_clk);
    builder_multiregimpl31 <= builder_multiregimpl30;
    builder_multiregimpl32 <= builder_multiregimpl31;
    builder_multiregimpl40 <= (~(main_hyperramsdrphy_ios_clk & hyperram_clk));
    builder_multiregimpl41 <= builder_multiregimpl40;
    builder_multiregimpl42 <= builder_multiregimpl41;
    builder_multiregimpl50 <= main_hyperramsdrphy_ios_dq_oe;
    builder_multiregimpl51 <= builder_multiregimpl50;
    builder_multiregimpl52 <= builder_multiregimpl51;
    builder_multiregimpl60 <= main_hyperramsdrphy_ios_dq_o[0];
    builder_multiregimpl61 <= builder_multiregimpl60;
    builder_multiregimpl62 <= builder_multiregimpl61;
    builder_multiregimpl7 <= main_hyperramsdrphy_dq_i[0];
    builder_multiregimpl80 <= main_hyperramsdrphy_ios_dq_o[1];
    builder_multiregimpl81 <= builder_multiregimpl80;
    builder_multiregimpl82 <= builder_multiregimpl81;
    builder_multiregimpl9 <= main_hyperramsdrphy_dq_i[1];
    builder_multiregimpl100 <= main_hyperramsdrphy_ios_dq_o[2];
    builder_multiregimpl101 <= builder_multiregimpl100;
    builder_multiregimpl102 <= builder_multiregimpl101;
    builder_multiregimpl11 <= main_hyperramsdrphy_dq_i[2];
    builder_multiregimpl120 <= main_hyperramsdrphy_ios_dq_o[3];
    builder_multiregimpl121 <= builder_multiregimpl120;
    builder_multiregimpl122 <= builder_multiregimpl121;
    builder_multiregimpl13 <= main_hyperramsdrphy_dq_i[3];
    builder_multiregimpl140 <= main_hyperramsdrphy_ios_dq_o[4];
    builder_multiregimpl141 <= builder_multiregimpl140;
    builder_multiregimpl142 <= builder_multiregimpl141;
    builder_multiregimpl15 <= main_hyperramsdrphy_dq_i[4];
    builder_multiregimpl160 <= main_hyperramsdrphy_ios_dq_o[5];
    builder_multiregimpl161 <= builder_multiregimpl160;
    builder_multiregimpl162 <= builder_multiregimpl161;
    builder_multiregimpl17 <= main_hyperramsdrphy_dq_i[5];
    builder_multiregimpl180 <= main_hyperramsdrphy_ios_dq_o[6];
    builder_multiregimpl181 <= builder_multiregimpl180;
    builder_multiregimpl182 <= builder_multiregimpl181;
    builder_multiregimpl19 <= main_hyperramsdrphy_dq_i[6];
    builder_multiregimpl200 <= main_hyperramsdrphy_ios_dq_o[7];
    builder_multiregimpl201 <= builder_multiregimpl200;
    builder_multiregimpl202 <= builder_multiregimpl201;
    builder_multiregimpl21 <= main_hyperramsdrphy_dq_i[7];
    builder_multiregimpl220 <= main_hyperramsdrphy_ios_rwds_oe;
    builder_multiregimpl221 <= builder_multiregimpl220;
    builder_multiregimpl222 <= builder_multiregimpl221;
    builder_multiregimpl230 <= main_hyperramsdrphy_ios_rwds_o;
    builder_multiregimpl231 <= builder_multiregimpl230;
    builder_multiregimpl232 <= builder_multiregimpl231;
    builder_multiregimpl24 <= main_hyperramsdrphy_rwds_i;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 6257-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6256];
initial begin
	$readmemh("colognechip_gatemate_evb_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("colognechip_gatemate_evb_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_ram_we[0])
		sram[main_basesoc_ram_adr][7:0] <= main_basesoc_ram_dat_w[7:0];
	if (main_basesoc_ram_we[1])
		sram[main_basesoc_ram_adr][15:8] <= main_basesoc_ram_dat_w[15:8];
	if (main_basesoc_ram_we[2])
		sram[main_basesoc_ram_adr][23:16] <= main_basesoc_ram_dat_w[23:16];
	if (main_basesoc_ram_we[3])
		sram[main_basesoc_ram_adr][31:24] <= main_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_ram_adr;
end
assign main_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("colognechip_gatemate_evb_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance CC_USR_RSTN of CC_USR_RSTN Module.
//------------------------------------------------------------------------------
CC_USR_RSTN CC_USR_RSTN(
	// Outputs.
	.USR_RSTN (main_crg_rst_n)
);

//------------------------------------------------------------------------------
// Memory storage_2: 4-words x 16-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 16 
// Port 1 | Read: Async | Write: ---- | 
reg [15:0] storage_2[0:3];
reg [15:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (main_syncfifo0_wrport_we)
		storage_2[main_syncfifo0_wrport_adr] <= main_syncfifo0_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_syncfifo0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_syncfifo0_wrport_dat_r = storage_2_dat0;
assign main_syncfifo0_rdport_dat_r = storage_2[main_syncfifo0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Async | Write: ---- | 
reg [9:0] storage_3[0:3];
reg [9:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (main_syncfifo1_wrport_we)
		storage_3[main_syncfifo1_wrport_adr] <= main_syncfifo1_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_syncfifo1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_syncfifo1_wrport_dat_r = storage_3_dat0;
assign main_syncfifo1_rdport_dat_r = storage_3[main_syncfifo1_rdport_adr];


//------------------------------------------------------------------------------
// Instance FemtoRV32 of FemtoRV32 Module.
//------------------------------------------------------------------------------
FemtoRV32 #(
	// Parameters.
	.ADDR_WIDTH (6'd32),
	.RESET_ADDR (32'd0)
) FemtoRV32 (
	// Inputs.
	.clk       (sys_clk),
	.mem_rbusy (main_basesoc_mbus_rbusy),
	.mem_rdata (main_basesoc_mbus_rdata0),
	.mem_wbusy (main_basesoc_mbus_wbusy),
	.reset     ((~(sys_rst | main_basesoc_reset))),

	// Outputs.
	.mem_addr  (main_basesoc_mbus_addr),
	.mem_rstrb (main_basesoc_mbus_rstrb),
	.mem_wdata (main_basesoc_mbus_wdata),
	.mem_wmask (main_basesoc_mbus_wmask)
);

//------------------------------------------------------------------------------
// Instance CC_PLL of CC_PLL Module.
//------------------------------------------------------------------------------
CC_PLL #(
	// Parameters.
	.CI_FILTER_CONST (2'd2),
	.CLK180_DOUB     (1'd1),
	.CLK270_DOUB     (1'd1),
	.CP_FILTER_CONST (3'd4),
	.LOCK_REQ        (1'd1),
	.LOW_JITTER      (1'd1),
	.OUT_CLK         ("24.0"),
	.PERF_MD         ("ECONOMY"),
	.REF_CLK         (`BOARD_FREQ_STR)
) CC_PLL (
	// Inputs.
	.CLK_FEEDBACK        (1'd0),
	.CLK_REF             (main_crg_clkin),
	.USR_CLK_REF         (builder_gatematepll1),
	.USR_LOCKED_STDY_RST (1'd0),

	// Outputs.
	.CLK0                (main_crg_clkout0),
	.CLK180              (main_crg_clkout2),
	.CLK270              (main_crg_clkout1),
	.CLK90               (builder_gatematepll0),
	.CLK_REF_OUT         (builder_gatematepll2),
	.USR_PLL_LOCKED      (builder_gatematepll_locked_s1),
	.USR_PLL_LOCKED_STDY (builder_gatematepll3)
);

//------------------------------------------------------------------------------
// Instance CC_DFF of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF (
	// Inputs.
	.CLK (sys_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (builder_rst10)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_1 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_1 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder_rst10),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (sys_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_2 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_2 (
	// Inputs.
	.CLK (sys2x_ps_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (builder_rst11)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_3 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_3 (
	// Inputs.
	.CLK (sys2x_ps_clk),
	.D   (builder_rst11),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (sys2x_ps_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_4 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_4 (
	// Inputs.
	.CLK (sys2x_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (builder_rst12)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_5 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_5 (
	// Inputs.
	.CLK (sys2x_clk),
	.D   (builder_rst12),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (sys2x_rst)
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[0]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[0]),

	// InOuts.
	.IO (hyperram_dq[0])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_1 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_1(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[1]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[1]),

	// InOuts.
	.IO (hyperram_dq[1])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_2 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_2(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[2]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[2]),

	// InOuts.
	.IO (hyperram_dq[2])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_3 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_3(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[3]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[3]),

	// InOuts.
	.IO (hyperram_dq[3])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_4 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_4(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[4]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[4]),

	// InOuts.
	.IO (hyperram_dq[4])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_5 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_5(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[5]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[5]),

	// InOuts.
	.IO (hyperram_dq[5])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_6 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_6(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[6]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[6]),

	// InOuts.
	.IO (hyperram_dq[6])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_7 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_7(
	// Inputs.
	.A  (main_hyperramsdrphy_dq_o[7]),
	.T  ((~main_hyperramsdrphy_dq_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_dq_i[7]),

	// InOuts.
	.IO (hyperram_dq[7])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_8 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF CC_IOBUF_8(
	// Inputs.
	.A  (main_hyperramsdrphy_rwds_o),
	.T  ((~main_hyperramsdrphy_rwds_oe)),

	// Outputs.
	.Y  (main_hyperramsdrphy_rwds_i),

	// InOuts.
	.IO (hyperram_rwds)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-05-23 08:13:29.
//------------------------------------------------------------------------------
