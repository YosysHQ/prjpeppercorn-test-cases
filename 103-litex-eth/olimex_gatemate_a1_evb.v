// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : olimex_gatemate_a1_evb.v
// Device     : CCGM1A1
// LiteX sha1 : 86b052e41
// Date       : 2025-05-23 15:17:38
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module olimex_gatemate_a1_evb (
    input  wire          clk0,
    input  wire          eth_rmii_clocks_ref_clk,
    input  wire          eth_rmii_crs_dv,
    input  wire    [1:0] eth_rmii_rx_data,
    output wire    [1:0] eth_rmii_tx_data,
    output wire          eth_rmii_tx_en,
    input  wire          serial_rx,
    output reg           serial_tx,
    input  wire          user_btn_n0,
    output wire          user_led_n0
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GateMatePLL)
│    │    └─── [CC_PLL]
│    └─── [CC_USR_RSTN]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (FemtoRV)
│    └─── fsm (FSM)
│    └─── [FemtoRV32]
└─── rom (SRAM)
└─── sram (SRAM)
└─── main_ram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── ethphy (LiteEthPHYRMII)
│    └─── crg (LiteEthPHYRMIICRG)
│    │    └─── hw_reset (LiteEthPHYHWReset)
│    └─── tx (LiteEthPHYRMIITX)
│    │    └─── timer (LiteEthPHYRMIITimer)
│    │    └─── converter (Converter)
│    │    │    └─── _downconverter_0* (_DownConverter)
│    └─── rx (LiteEthPHYRMIIRX)
│    │    └─── timer (LiteEthPHYRMIITimer)
│    │    └─── converter (Converter)
│    │    │    └─── _upconverter_0* (_UpConverter)
│    │    └─── delay (Delay)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── buffer_1* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── pipeline_0* (Pipeline)
│    │    └─── speed_detect (LiteEthPHYRMIISpeedDetect)
│    │    │    └─── fsm (FSM)
└─── ethmac (LiteEthMAC)
│    └─── core (LiteEthMACCore)
│    │    └─── tx_datapath (TXDatapath)
│    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    │    └─── liteethmactxlastbe_0* (LiteEthMACTXLastBE)
│    │    │    │    └─── last_handler (LiteEthLastHandler)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    └─── liteethmacpaddinginserter_0* (LiteEthMACPaddingInserter)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── liteethmaccrc32inserter_0* (LiteEthMACCRC32Inserter)
│    │    │    │    └─── crc (LiteEthMACCRC32)
│    │    │    │    │    └─── liteethmaccrcengine_0* (LiteEthMACCRCEngine)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── buffer_0* (Buffer)
│    │    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── liteethmacpreambleinserter_0* (LiteEthMACPreambleInserter)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── liteethmacgap_0* (LiteEthMACGap)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── pipeline_0* (Pipeline)
│    │    └─── rx_datapath (RXDatapath)
│    │    │    └─── liteethmacpreamblechecker_0* (LiteEthMACPreambleChecker)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── pulsesynchronizer_0* (PulseSynchronizer)
│    │    │    └─── liteethmaccrc32checker_0* (LiteEthMACCRC32Checker)
│    │    │    │    └─── crc (LiteEthMACCRC32)
│    │    │    │    │    └─── liteethmaccrcengine_0* (LiteEthMACCRCEngine)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── buffer_0* (Buffer)
│    │    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── pulsesynchronizer_1* (PulseSynchronizer)
│    │    │    └─── liteethmacpaddingchecker_0* (LiteEthMACPaddingChecker)
│    │    │    └─── liteethmacrxlastbe_0* (LiteEthMACRXLastBE)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── pipeline_0* (Pipeline)
│    └─── interface (LiteEthMACWishboneInterface)
│    │    └─── sram (LiteEthMACSRAM)
│    │    │    └─── writer (LiteEthMACSRAMWriter)
│    │    │    │    └─── ev (EventManager)
│    │    │    │    │    └─── eventsourcelevel_0* (EventSourceLevel)
│    │    │    │    └─── stat_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── reader (LiteEthMACSRAMReader)
│    │    │    │    └─── ev (EventManager)
│    │    │    │    │    └─── eventsourcepulse_0* (EventSourcePulse)
│    │    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── ev (SharedIRQ)
│    │    └─── sram_0* (SRAM)
│    │    └─── sram_1* (SRAM)
│    │    └─── decoder_0* (Decoder)
│    │    └─── sram_2* (SRAM)
│    │    └─── sram_3* (SRAM)
│    │    └─── decoder_1* (Decoder)
│    └─── ev (SharedIRQ)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_5* (CSRStatus)
│    │    └─── csrstatus_6* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_7* (CSRStatus)
│    │    └─── csrstatus_8* (CSRStatus)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_9* (CSRStatus)
│    │    └─── csrstatus_10* (CSRStatus)
│    │    └─── csrstatus_11* (CSRStatus)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── sram_0* (SRAM)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg    [19:0] builder_count = 20'd1000000;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire          builder_csr_bankarray_csrbank1_preamble_crc_r;
reg           builder_csr_bankarray_csrbank1_preamble_crc_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_preamble_crc_w;
reg           builder_csr_bankarray_csrbank1_preamble_crc_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_r;
reg           builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_w;
reg           builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_r;
reg           builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_w;
reg           builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire          builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_r;
reg           builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_w;
reg           builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_ev_pending_r;
reg           builder_csr_bankarray_csrbank1_sram_reader_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_ev_pending_w;
reg           builder_csr_bankarray_csrbank1_sram_reader_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_ev_status_r;
reg           builder_csr_bankarray_csrbank1_sram_reader_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_ev_status_w;
reg           builder_csr_bankarray_csrbank1_sram_reader_ev_status_we = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank1_sram_reader_length0_r;
reg           builder_csr_bankarray_csrbank1_sram_reader_length0_re = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank1_sram_reader_length0_w;
reg           builder_csr_bankarray_csrbank1_sram_reader_length0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_sram_reader_level_r;
reg           builder_csr_bankarray_csrbank1_sram_reader_level_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_sram_reader_level_w;
reg           builder_csr_bankarray_csrbank1_sram_reader_level_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_ready_r;
reg           builder_csr_bankarray_csrbank1_sram_reader_ready_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_ready_w;
reg           builder_csr_bankarray_csrbank1_sram_reader_ready_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_slot0_r;
reg           builder_csr_bankarray_csrbank1_sram_reader_slot0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_reader_slot0_w;
reg           builder_csr_bankarray_csrbank1_sram_reader_slot0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_sram_writer_errors_r;
reg           builder_csr_bankarray_csrbank1_sram_writer_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank1_sram_writer_errors_w;
reg           builder_csr_bankarray_csrbank1_sram_writer_errors_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_r;
reg           builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_w;
reg           builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_ev_pending_r;
reg           builder_csr_bankarray_csrbank1_sram_writer_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_ev_pending_w;
reg           builder_csr_bankarray_csrbank1_sram_writer_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_ev_status_r;
reg           builder_csr_bankarray_csrbank1_sram_writer_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_ev_status_w;
reg           builder_csr_bankarray_csrbank1_sram_writer_ev_status_we = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank1_sram_writer_length_r;
reg           builder_csr_bankarray_csrbank1_sram_writer_length_re = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank1_sram_writer_length_w;
reg           builder_csr_bankarray_csrbank1_sram_writer_length_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_slot_r;
reg           builder_csr_bankarray_csrbank1_sram_writer_slot_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_sram_writer_slot_w;
reg           builder_csr_bankarray_csrbank1_sram_writer_slot_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_crg_reset0_r;
reg           builder_csr_bankarray_csrbank2_crg_reset0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_crg_reset0_w;
reg           builder_csr_bankarray_csrbank2_crg_reset0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank3_out0_r;
reg           builder_csr_bankarray_csrbank3_out0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_out0_w;
reg           builder_csr_bankarray_csrbank3_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire          builder_csr_bankarray_csrbank4_en0_r;
reg           builder_csr_bankarray_csrbank4_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_en0_w;
reg           builder_csr_bankarray_csrbank4_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_enable0_r;
reg           builder_csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_enable0_w;
reg           builder_csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_pending_r;
reg           builder_csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_pending_w;
reg           builder_csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_status_r;
reg           builder_csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_status_w;
reg           builder_csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_load0_r;
reg           builder_csr_bankarray_csrbank4_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_load0_w;
reg           builder_csr_bankarray_csrbank4_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_reload0_r;
reg           builder_csr_bankarray_csrbank4_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_reload0_w;
reg           builder_csr_bankarray_csrbank4_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire          builder_csr_bankarray_csrbank4_update_value0_r;
reg           builder_csr_bankarray_csrbank4_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_update_value0_w;
reg           builder_csr_bankarray_csrbank4_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_value_r;
reg           builder_csr_bankarray_csrbank4_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_value_w;
reg           builder_csr_bankarray_csrbank4_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_enable0_r;
reg           builder_csr_bankarray_csrbank5_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_enable0_w;
reg           builder_csr_bankarray_csrbank5_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_pending_r;
reg           builder_csr_bankarray_csrbank5_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_pending_w;
reg           builder_csr_bankarray_csrbank5_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_status_r;
reg           builder_csr_bankarray_csrbank5_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_status_w;
reg           builder_csr_bankarray_csrbank5_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxempty_r;
reg           builder_csr_bankarray_csrbank5_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxempty_w;
reg           builder_csr_bankarray_csrbank5_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxfull_r;
reg           builder_csr_bankarray_csrbank5_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxfull_w;
reg           builder_csr_bankarray_csrbank5_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_sel;
wire          builder_csr_bankarray_csrbank5_txempty_r;
reg           builder_csr_bankarray_csrbank5_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_txempty_w;
reg           builder_csr_bankarray_csrbank5_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_txfull_r;
reg           builder_csr_bankarray_csrbank5_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_txfull_w;
reg           builder_csr_bankarray_csrbank5_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
wire          builder_csr_bankarray_interface5_bank_bus_re;
wire          builder_csr_bankarray_interface5_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_femtorv_next_state = 1'd0;
reg           builder_femtorv_state = 1'd0;
wire          builder_gatematepll0;
wire          builder_gatematepll1;
wire          builder_gatematepll2;
reg           builder_gatematepll3 = 1'd0;
wire          builder_gatematepll4;
wire          builder_gatematepll5;
wire          builder_gatematepll_locked_s1;
wire          builder_grant;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
reg     [1:0] builder_liteethmacsramreader_next_state = 2'd0;
reg     [1:0] builder_liteethmacsramreader_state = 2'd0;
reg     [2:0] builder_liteethmacsramwriter_next_state = 3'd0;
reg     [2:0] builder_liteethmacsramwriter_state = 3'd0;
reg     [1:0] builder_liteethphyrmii_next_state = 2'd0;
reg     [1:0] builder_liteethphyrmii_state = 2'd0;
reg           builder_multiregimpl00 = 1'd0;
reg           builder_multiregimpl01 = 1'd0;
reg     [5:0] builder_multiregimpl10 = 6'd0;
reg     [5:0] builder_multiregimpl11 = 6'd0;
reg     [5:0] builder_multiregimpl20 = 6'd0;
reg     [5:0] builder_multiregimpl21 = 6'd0;
reg           builder_multiregimpl30 = 1'd0;
reg           builder_multiregimpl31 = 1'd0;
reg           builder_multiregimpl40 = 1'd0;
reg           builder_multiregimpl41 = 1'd0;
reg     [5:0] builder_multiregimpl50 = 6'd0;
reg     [5:0] builder_multiregimpl51 = 6'd0;
reg     [5:0] builder_multiregimpl60 = 6'd0;
reg     [5:0] builder_multiregimpl61 = 6'd0;
wire          builder_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
wire          builder_rst10;
wire          builder_rst11;
wire          builder_rst12;
reg     [1:0] builder_rxdatapath_bufferizeendpoints_next_state = 2'd0;
reg     [1:0] builder_rxdatapath_bufferizeendpoints_state = 2'd0;
reg           builder_rxdatapath_liteethmacpreamblechecker_next_state = 1'd0;
reg           builder_rxdatapath_liteethmacpreamblechecker_state = 1'd0;
reg    [29:0] builder_self0 = 30'd0;
reg    [31:0] builder_self1 = 32'd0;
reg     [3:0] builder_self2 = 4'd0;
reg           builder_self3 = 1'd0;
reg           builder_self4 = 1'd0;
reg           builder_self5 = 1'd0;
reg     [2:0] builder_self6 = 3'd0;
reg     [1:0] builder_self7 = 2'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [5:0] builder_slave_sel = 6'd0;
reg     [5:0] builder_slave_sel_r = 6'd0;
reg     [1:0] builder_txdatapath_bufferizeendpoints_next_state = 2'd0;
reg     [1:0] builder_txdatapath_bufferizeendpoints_state = 2'd0;
reg           builder_txdatapath_liteethmacgap_next_state = 1'd0;
reg           builder_txdatapath_liteethmacgap_state = 1'd0;
reg           builder_txdatapath_liteethmacpaddinginserter_next_state = 1'd0;
reg           builder_txdatapath_liteethmacpaddinginserter_state = 1'd0;
reg     [1:0] builder_txdatapath_liteethmacpreambleinserter_next_state = 2'd0;
reg     [1:0] builder_txdatapath_liteethmacpreambleinserter_state = 2'd0;
reg           builder_txdatapath_liteethmactxlastbe_next_state = 1'd0;
reg           builder_txdatapath_liteethmactxlastbe_state = 1'd0;
wire          builder_wait;
reg           builder_wishbone2csr_next_state = 1'd0;
reg           builder_wishbone2csr_state = 1'd0;
wire          eth_rx_rst;
wire          eth_tx_rst;
wire          main_basesoc_adapted_interface_ack;
wire   [29:0] main_basesoc_adapted_interface_adr;
wire    [1:0] main_basesoc_adapted_interface_bte;
wire    [2:0] main_basesoc_adapted_interface_cti;
wire          main_basesoc_adapted_interface_cyc;
wire   [31:0] main_basesoc_adapted_interface_dat_r;
wire   [31:0] main_basesoc_adapted_interface_dat_w;
wire          main_basesoc_adapted_interface_err;
wire    [3:0] main_basesoc_adapted_interface_sel;
wire          main_basesoc_adapted_interface_stb;
wire          main_basesoc_adapted_interface_we;
wire   [14:0] main_basesoc_adr;
reg           main_basesoc_adr_burst = 1'd0;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_core_bufferizeendpoints_pipe_valid_sink_first;
wire          main_basesoc_core_bufferizeendpoints_pipe_valid_sink_last;
wire    [7:0] main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_data;
wire          main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_error;
wire          main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_last_be;
wire          main_basesoc_core_bufferizeendpoints_pipe_valid_sink_ready;
wire          main_basesoc_core_bufferizeendpoints_pipe_valid_sink_valid;
reg           main_basesoc_core_bufferizeendpoints_pipe_valid_source_first = 1'd0;
reg           main_basesoc_core_bufferizeendpoints_pipe_valid_source_last = 1'd0;
reg     [7:0] main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_data = 8'd0;
reg           main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_error = 1'd0;
reg           main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_last_be = 1'd0;
wire          main_basesoc_core_bufferizeendpoints_pipe_valid_source_ready;
reg           main_basesoc_core_bufferizeendpoints_pipe_valid_source_valid = 1'd0;
wire          main_basesoc_core_bufferizeendpoints_sink_sink_first;
wire          main_basesoc_core_bufferizeendpoints_sink_sink_last;
wire    [7:0] main_basesoc_core_bufferizeendpoints_sink_sink_payload_data;
wire          main_basesoc_core_bufferizeendpoints_sink_sink_payload_error;
wire          main_basesoc_core_bufferizeendpoints_sink_sink_payload_last_be;
wire          main_basesoc_core_bufferizeendpoints_sink_sink_ready;
wire          main_basesoc_core_bufferizeendpoints_sink_sink_valid;
wire          main_basesoc_core_bufferizeendpoints_source_source_first;
wire          main_basesoc_core_bufferizeendpoints_source_source_last;
wire    [7:0] main_basesoc_core_bufferizeendpoints_source_source_payload_data;
wire          main_basesoc_core_bufferizeendpoints_source_source_payload_error;
wire          main_basesoc_core_bufferizeendpoints_source_source_payload_last_be;
wire          main_basesoc_core_bufferizeendpoints_source_source_ready;
wire          main_basesoc_core_bufferizeendpoints_source_source_valid;
reg           main_basesoc_core_crc_errors_re = 1'd0;
reg    [31:0] main_basesoc_core_crc_errors_status = 32'd0;
wire          main_basesoc_core_crc_errors_we;
wire          main_basesoc_core_liteethmaccrc32checker_crc_be;
reg           main_basesoc_core_liteethmaccrc32checker_crc_ce = 1'd0;
reg    [31:0] main_basesoc_core_liteethmaccrc32checker_crc_crc_next = 32'd0;
wire   [31:0] main_basesoc_core_liteethmaccrc32checker_crc_crc_prev;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_crc_data0;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_crc_data1;
reg           main_basesoc_core_liteethmaccrc32checker_crc_error0 = 1'd0;
reg           main_basesoc_core_liteethmaccrc32checker_crc_error1 = 1'd0;
reg           main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1 = 1'd0;
reg           main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1 = 1'd0;
reg    [31:0] main_basesoc_core_liteethmaccrc32checker_crc_reg = 32'd4294967295;
reg           main_basesoc_core_liteethmaccrc32checker_crc_reset = 1'd0;
reg    [31:0] main_basesoc_core_liteethmaccrc32checker_crc_value = 32'd0;
reg           main_basesoc_core_liteethmaccrc32checker_error = 1'd0;
wire          main_basesoc_core_liteethmaccrc32checker_fifo_full;
wire          main_basesoc_core_liteethmaccrc32checker_fifo_in;
wire          main_basesoc_core_liteethmaccrc32checker_fifo_out;
reg           main_basesoc_core_liteethmaccrc32checker_fifo_reset = 1'd0;
reg           main_basesoc_core_liteethmaccrc32checker_last_be = 1'd0;
reg           main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0 = 1'd0;
reg           main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0 = 1'd0;
wire          main_basesoc_core_liteethmaccrc32checker_sink_sink_first;
wire          main_basesoc_core_liteethmaccrc32checker_sink_sink_last;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_data;
wire          main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_error;
wire          main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be;
reg           main_basesoc_core_liteethmaccrc32checker_sink_sink_ready = 1'd0;
wire          main_basesoc_core_liteethmaccrc32checker_sink_sink_valid;
wire          main_basesoc_core_liteethmaccrc32checker_source_source_first;
reg           main_basesoc_core_liteethmaccrc32checker_source_source_last = 1'd0;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_source_source_payload_data;
reg           main_basesoc_core_liteethmaccrc32checker_source_source_payload_error = 1'd0;
reg           main_basesoc_core_liteethmaccrc32checker_source_source_payload_last_be = 1'd0;
wire          main_basesoc_core_liteethmaccrc32checker_source_source_ready;
reg           main_basesoc_core_liteethmaccrc32checker_source_source_valid = 1'd0;
reg     [2:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_consume = 3'd0;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_do_read;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_first;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_last;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_data;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_error;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_first;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_last;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_data;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_error;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be;
reg     [2:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_level = 3'd0;
reg     [2:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_produce = 3'd0;
wire    [2:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_rdport_adr;
wire   [11:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_rdport_dat_r;
reg           main_basesoc_core_liteethmaccrc32checker_syncfifo_replace = 1'd0;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_first;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_last;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_data;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_error;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_last_be;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_ready;
reg           main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_valid = 1'd0;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_source_first;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_source_last;
wire    [7:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_data;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_error;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_last_be;
reg           main_basesoc_core_liteethmaccrc32checker_syncfifo_source_ready = 1'd0;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_source_valid;
wire   [11:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_din;
wire   [11:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_dout;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_re;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_readable;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_we;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_writable;
reg     [2:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_adr = 3'd0;
wire   [11:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_dat_r;
wire   [11:0] main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_dat_w;
wire          main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_we;
reg           main_basesoc_core_preamble_errors_re = 1'd0;
reg    [31:0] main_basesoc_core_preamble_errors_status = 32'd0;
wire          main_basesoc_core_preamble_errors_we;
wire          main_basesoc_core_pulsesynchronizer0_i;
wire          main_basesoc_core_pulsesynchronizer0_o;
reg           main_basesoc_core_pulsesynchronizer0_toggle_i = 1'd0;
wire          main_basesoc_core_pulsesynchronizer0_toggle_o;
reg           main_basesoc_core_pulsesynchronizer0_toggle_o_r = 1'd0;
wire          main_basesoc_core_pulsesynchronizer1_i;
wire          main_basesoc_core_pulsesynchronizer1_o;
reg           main_basesoc_core_pulsesynchronizer1_toggle_i = 1'd0;
wire          main_basesoc_core_pulsesynchronizer1_toggle_o;
reg           main_basesoc_core_pulsesynchronizer1_toggle_o_r = 1'd0;
reg           main_basesoc_core_re = 1'd0;
wire   [41:0] main_basesoc_core_rx_cdc_cdc_asyncfifo_din;
wire   [41:0] main_basesoc_core_rx_cdc_cdc_asyncfifo_dout;
wire          main_basesoc_core_rx_cdc_cdc_asyncfifo_re;
wire          main_basesoc_core_rx_cdc_cdc_asyncfifo_readable;
wire          main_basesoc_core_rx_cdc_cdc_asyncfifo_we;
wire          main_basesoc_core_rx_cdc_cdc_asyncfifo_writable;
wire    [5:0] main_basesoc_core_rx_cdc_cdc_consume_wdomain;
wire          main_basesoc_core_rx_cdc_cdc_fifo_in_first;
wire          main_basesoc_core_rx_cdc_cdc_fifo_in_last;
wire   [31:0] main_basesoc_core_rx_cdc_cdc_fifo_in_payload_data;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_fifo_in_payload_error;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_fifo_in_payload_last_be;
wire          main_basesoc_core_rx_cdc_cdc_fifo_out_first;
wire          main_basesoc_core_rx_cdc_cdc_fifo_out_last;
wire   [31:0] main_basesoc_core_rx_cdc_cdc_fifo_out_payload_data;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_fifo_out_payload_error;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_fifo_out_payload_last_be;
wire          main_basesoc_core_rx_cdc_cdc_graycounter0_ce;
reg     [5:0] main_basesoc_core_rx_cdc_cdc_graycounter0_q = 6'd0;
reg     [5:0] main_basesoc_core_rx_cdc_cdc_graycounter0_q_binary = 6'd0;
wire    [5:0] main_basesoc_core_rx_cdc_cdc_graycounter0_q_next;
reg     [5:0] main_basesoc_core_rx_cdc_cdc_graycounter0_q_next_binary = 6'd0;
wire          main_basesoc_core_rx_cdc_cdc_graycounter1_ce;
reg     [5:0] main_basesoc_core_rx_cdc_cdc_graycounter1_q = 6'd0;
reg     [5:0] main_basesoc_core_rx_cdc_cdc_graycounter1_q_binary = 6'd0;
wire    [5:0] main_basesoc_core_rx_cdc_cdc_graycounter1_q_next;
reg     [5:0] main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary = 6'd0;
wire    [5:0] main_basesoc_core_rx_cdc_cdc_produce_rdomain;
wire    [4:0] main_basesoc_core_rx_cdc_cdc_rdport_adr;
wire   [41:0] main_basesoc_core_rx_cdc_cdc_rdport_dat_r;
wire          main_basesoc_core_rx_cdc_cdc_sink_first;
wire          main_basesoc_core_rx_cdc_cdc_sink_last;
wire   [31:0] main_basesoc_core_rx_cdc_cdc_sink_payload_data;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_sink_payload_error;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_sink_payload_last_be;
wire          main_basesoc_core_rx_cdc_cdc_sink_ready;
wire          main_basesoc_core_rx_cdc_cdc_sink_valid;
wire          main_basesoc_core_rx_cdc_cdc_source_first;
wire          main_basesoc_core_rx_cdc_cdc_source_last;
wire   [31:0] main_basesoc_core_rx_cdc_cdc_source_payload_data;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_source_payload_error;
wire    [3:0] main_basesoc_core_rx_cdc_cdc_source_payload_last_be;
wire          main_basesoc_core_rx_cdc_cdc_source_ready;
wire          main_basesoc_core_rx_cdc_cdc_source_valid;
wire    [4:0] main_basesoc_core_rx_cdc_cdc_wrport_adr;
wire   [41:0] main_basesoc_core_rx_cdc_cdc_wrport_dat_r;
wire   [41:0] main_basesoc_core_rx_cdc_cdc_wrport_dat_w;
wire          main_basesoc_core_rx_cdc_cdc_wrport_we;
wire          main_basesoc_core_rx_cdc_sink_sink_first;
wire          main_basesoc_core_rx_cdc_sink_sink_last;
wire   [31:0] main_basesoc_core_rx_cdc_sink_sink_payload_data;
wire    [3:0] main_basesoc_core_rx_cdc_sink_sink_payload_error;
wire    [3:0] main_basesoc_core_rx_cdc_sink_sink_payload_last_be;
wire          main_basesoc_core_rx_cdc_sink_sink_ready;
wire          main_basesoc_core_rx_cdc_sink_sink_valid;
wire          main_basesoc_core_rx_cdc_source_source_first;
wire          main_basesoc_core_rx_cdc_source_source_last;
wire   [31:0] main_basesoc_core_rx_cdc_source_source_payload_data;
wire    [3:0] main_basesoc_core_rx_cdc_source_source_payload_error;
wire    [3:0] main_basesoc_core_rx_cdc_source_source_payload_last_be;
wire          main_basesoc_core_rx_cdc_source_source_ready;
wire          main_basesoc_core_rx_cdc_source_source_valid;
reg     [1:0] main_basesoc_core_rx_converter_converter_demux = 2'd0;
wire          main_basesoc_core_rx_converter_converter_load_part;
wire          main_basesoc_core_rx_converter_converter_sink_first;
wire          main_basesoc_core_rx_converter_converter_sink_last;
wire    [9:0] main_basesoc_core_rx_converter_converter_sink_payload_data;
wire          main_basesoc_core_rx_converter_converter_sink_ready;
wire          main_basesoc_core_rx_converter_converter_sink_valid;
reg           main_basesoc_core_rx_converter_converter_source_first = 1'd0;
reg           main_basesoc_core_rx_converter_converter_source_last = 1'd0;
reg    [39:0] main_basesoc_core_rx_converter_converter_source_payload_data = 40'd0;
reg     [2:0] main_basesoc_core_rx_converter_converter_source_payload_valid_token_count = 3'd0;
wire          main_basesoc_core_rx_converter_converter_source_ready;
wire          main_basesoc_core_rx_converter_converter_source_valid;
reg           main_basesoc_core_rx_converter_converter_strobe_all = 1'd0;
wire          main_basesoc_core_rx_converter_sink_first;
wire          main_basesoc_core_rx_converter_sink_last;
wire    [7:0] main_basesoc_core_rx_converter_sink_payload_data;
wire          main_basesoc_core_rx_converter_sink_payload_error;
wire          main_basesoc_core_rx_converter_sink_payload_last_be;
wire          main_basesoc_core_rx_converter_sink_ready;
wire          main_basesoc_core_rx_converter_sink_valid;
wire          main_basesoc_core_rx_converter_source_first;
wire          main_basesoc_core_rx_converter_source_last;
reg    [31:0] main_basesoc_core_rx_converter_source_payload_data = 32'd0;
reg     [3:0] main_basesoc_core_rx_converter_source_payload_error = 4'd0;
reg     [3:0] main_basesoc_core_rx_converter_source_payload_last_be = 4'd0;
wire          main_basesoc_core_rx_converter_source_ready;
wire          main_basesoc_core_rx_converter_source_source_first;
wire          main_basesoc_core_rx_converter_source_source_last;
wire   [39:0] main_basesoc_core_rx_converter_source_source_payload_data;
wire          main_basesoc_core_rx_converter_source_source_ready;
wire          main_basesoc_core_rx_converter_source_source_valid;
wire          main_basesoc_core_rx_converter_source_valid;
wire          main_basesoc_core_rx_last_be_sink_first;
wire          main_basesoc_core_rx_last_be_sink_last;
wire    [7:0] main_basesoc_core_rx_last_be_sink_payload_data;
wire          main_basesoc_core_rx_last_be_sink_payload_error;
wire          main_basesoc_core_rx_last_be_sink_payload_last_be;
wire          main_basesoc_core_rx_last_be_sink_ready;
wire          main_basesoc_core_rx_last_be_sink_valid;
wire          main_basesoc_core_rx_last_be_source_first;
wire          main_basesoc_core_rx_last_be_source_last;
wire    [7:0] main_basesoc_core_rx_last_be_source_payload_data;
wire          main_basesoc_core_rx_last_be_source_payload_error;
reg           main_basesoc_core_rx_last_be_source_payload_last_be = 1'd0;
wire          main_basesoc_core_rx_last_be_source_ready;
wire          main_basesoc_core_rx_last_be_source_valid;
wire          main_basesoc_core_rx_padding_sink_first;
wire          main_basesoc_core_rx_padding_sink_last;
wire    [7:0] main_basesoc_core_rx_padding_sink_payload_data;
wire          main_basesoc_core_rx_padding_sink_payload_error;
wire          main_basesoc_core_rx_padding_sink_payload_last_be;
wire          main_basesoc_core_rx_padding_sink_ready;
wire          main_basesoc_core_rx_padding_sink_valid;
wire          main_basesoc_core_rx_padding_source_first;
wire          main_basesoc_core_rx_padding_source_last;
wire    [7:0] main_basesoc_core_rx_padding_source_payload_data;
wire          main_basesoc_core_rx_padding_source_payload_error;
wire          main_basesoc_core_rx_padding_source_payload_last_be;
wire          main_basesoc_core_rx_padding_source_ready;
wire          main_basesoc_core_rx_padding_source_valid;
reg           main_basesoc_core_rx_preamble_error = 1'd0;
reg    [63:0] main_basesoc_core_rx_preamble_preamble = 64'd15372286728091293013;
wire          main_basesoc_core_rx_preamble_sink_first;
wire          main_basesoc_core_rx_preamble_sink_last;
wire    [7:0] main_basesoc_core_rx_preamble_sink_payload_data;
wire          main_basesoc_core_rx_preamble_sink_payload_error;
wire          main_basesoc_core_rx_preamble_sink_payload_last_be;
reg           main_basesoc_core_rx_preamble_sink_ready = 1'd0;
wire          main_basesoc_core_rx_preamble_sink_valid;
reg           main_basesoc_core_rx_preamble_source_first = 1'd0;
reg           main_basesoc_core_rx_preamble_source_last = 1'd0;
wire    [7:0] main_basesoc_core_rx_preamble_source_payload_data;
reg           main_basesoc_core_rx_preamble_source_payload_error = 1'd0;
wire          main_basesoc_core_rx_preamble_source_payload_last_be;
wire          main_basesoc_core_rx_preamble_source_ready;
reg           main_basesoc_core_rx_preamble_source_valid = 1'd0;
wire          main_basesoc_core_sink_first;
wire          main_basesoc_core_sink_last;
wire   [31:0] main_basesoc_core_sink_payload_data;
wire    [3:0] main_basesoc_core_sink_payload_error;
wire    [3:0] main_basesoc_core_sink_payload_last_be;
wire          main_basesoc_core_sink_ready;
wire          main_basesoc_core_sink_valid;
wire          main_basesoc_core_source_first;
wire          main_basesoc_core_source_last;
wire   [31:0] main_basesoc_core_source_payload_data;
wire    [3:0] main_basesoc_core_source_payload_error;
wire    [3:0] main_basesoc_core_source_payload_last_be;
wire          main_basesoc_core_source_ready;
wire          main_basesoc_core_source_valid;
reg           main_basesoc_core_status = 1'd1;
wire   [41:0] main_basesoc_core_tx_cdc_cdc_asyncfifo_din;
wire   [41:0] main_basesoc_core_tx_cdc_cdc_asyncfifo_dout;
wire          main_basesoc_core_tx_cdc_cdc_asyncfifo_re;
wire          main_basesoc_core_tx_cdc_cdc_asyncfifo_readable;
wire          main_basesoc_core_tx_cdc_cdc_asyncfifo_we;
wire          main_basesoc_core_tx_cdc_cdc_asyncfifo_writable;
wire    [5:0] main_basesoc_core_tx_cdc_cdc_consume_wdomain;
wire          main_basesoc_core_tx_cdc_cdc_fifo_in_first;
wire          main_basesoc_core_tx_cdc_cdc_fifo_in_last;
wire   [31:0] main_basesoc_core_tx_cdc_cdc_fifo_in_payload_data;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_fifo_in_payload_error;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_fifo_in_payload_last_be;
wire          main_basesoc_core_tx_cdc_cdc_fifo_out_first;
wire          main_basesoc_core_tx_cdc_cdc_fifo_out_last;
wire   [31:0] main_basesoc_core_tx_cdc_cdc_fifo_out_payload_data;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_fifo_out_payload_error;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_fifo_out_payload_last_be;
wire          main_basesoc_core_tx_cdc_cdc_graycounter0_ce;
reg     [5:0] main_basesoc_core_tx_cdc_cdc_graycounter0_q = 6'd0;
reg     [5:0] main_basesoc_core_tx_cdc_cdc_graycounter0_q_binary = 6'd0;
wire    [5:0] main_basesoc_core_tx_cdc_cdc_graycounter0_q_next;
reg     [5:0] main_basesoc_core_tx_cdc_cdc_graycounter0_q_next_binary = 6'd0;
wire          main_basesoc_core_tx_cdc_cdc_graycounter1_ce;
reg     [5:0] main_basesoc_core_tx_cdc_cdc_graycounter1_q = 6'd0;
reg     [5:0] main_basesoc_core_tx_cdc_cdc_graycounter1_q_binary = 6'd0;
wire    [5:0] main_basesoc_core_tx_cdc_cdc_graycounter1_q_next;
reg     [5:0] main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary = 6'd0;
wire    [5:0] main_basesoc_core_tx_cdc_cdc_produce_rdomain;
wire    [4:0] main_basesoc_core_tx_cdc_cdc_rdport_adr;
wire   [41:0] main_basesoc_core_tx_cdc_cdc_rdport_dat_r;
wire          main_basesoc_core_tx_cdc_cdc_sink_first;
wire          main_basesoc_core_tx_cdc_cdc_sink_last;
wire   [31:0] main_basesoc_core_tx_cdc_cdc_sink_payload_data;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_sink_payload_error;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_sink_payload_last_be;
wire          main_basesoc_core_tx_cdc_cdc_sink_ready;
wire          main_basesoc_core_tx_cdc_cdc_sink_valid;
wire          main_basesoc_core_tx_cdc_cdc_source_first;
wire          main_basesoc_core_tx_cdc_cdc_source_last;
wire   [31:0] main_basesoc_core_tx_cdc_cdc_source_payload_data;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_source_payload_error;
wire    [3:0] main_basesoc_core_tx_cdc_cdc_source_payload_last_be;
wire          main_basesoc_core_tx_cdc_cdc_source_ready;
wire          main_basesoc_core_tx_cdc_cdc_source_valid;
wire    [4:0] main_basesoc_core_tx_cdc_cdc_wrport_adr;
wire   [41:0] main_basesoc_core_tx_cdc_cdc_wrport_dat_r;
wire   [41:0] main_basesoc_core_tx_cdc_cdc_wrport_dat_w;
wire          main_basesoc_core_tx_cdc_cdc_wrport_we;
wire          main_basesoc_core_tx_cdc_sink_sink_first;
wire          main_basesoc_core_tx_cdc_sink_sink_last;
wire   [31:0] main_basesoc_core_tx_cdc_sink_sink_payload_data;
wire    [3:0] main_basesoc_core_tx_cdc_sink_sink_payload_error;
wire    [3:0] main_basesoc_core_tx_cdc_sink_sink_payload_last_be;
wire          main_basesoc_core_tx_cdc_sink_sink_ready;
wire          main_basesoc_core_tx_cdc_sink_sink_valid;
wire          main_basesoc_core_tx_cdc_source_source_first;
wire          main_basesoc_core_tx_cdc_source_source_last;
wire   [31:0] main_basesoc_core_tx_cdc_source_source_payload_data;
wire    [3:0] main_basesoc_core_tx_cdc_source_source_payload_error;
wire    [3:0] main_basesoc_core_tx_cdc_source_source_payload_last_be;
wire          main_basesoc_core_tx_cdc_source_source_ready;
wire          main_basesoc_core_tx_cdc_source_source_valid;
wire          main_basesoc_core_tx_converter_converter_first;
wire          main_basesoc_core_tx_converter_converter_last;
reg     [1:0] main_basesoc_core_tx_converter_converter_mux = 2'd0;
wire          main_basesoc_core_tx_converter_converter_sink_first;
wire          main_basesoc_core_tx_converter_converter_sink_last;
reg    [39:0] main_basesoc_core_tx_converter_converter_sink_payload_data = 40'd0;
wire          main_basesoc_core_tx_converter_converter_sink_ready;
wire          main_basesoc_core_tx_converter_converter_sink_valid;
wire          main_basesoc_core_tx_converter_converter_source_first;
wire          main_basesoc_core_tx_converter_converter_source_last;
reg     [9:0] main_basesoc_core_tx_converter_converter_source_payload_data = 10'd0;
wire          main_basesoc_core_tx_converter_converter_source_payload_valid_token_count;
wire          main_basesoc_core_tx_converter_converter_source_ready;
wire          main_basesoc_core_tx_converter_converter_source_valid;
wire          main_basesoc_core_tx_converter_sink_first;
wire          main_basesoc_core_tx_converter_sink_last;
wire   [31:0] main_basesoc_core_tx_converter_sink_payload_data;
wire    [3:0] main_basesoc_core_tx_converter_sink_payload_error;
wire    [3:0] main_basesoc_core_tx_converter_sink_payload_last_be;
wire          main_basesoc_core_tx_converter_sink_ready;
wire          main_basesoc_core_tx_converter_sink_valid;
wire          main_basesoc_core_tx_converter_source_first;
wire          main_basesoc_core_tx_converter_source_last;
wire    [7:0] main_basesoc_core_tx_converter_source_payload_data;
wire          main_basesoc_core_tx_converter_source_payload_error;
wire          main_basesoc_core_tx_converter_source_payload_last_be;
wire          main_basesoc_core_tx_converter_source_ready;
wire          main_basesoc_core_tx_converter_source_source_first;
wire          main_basesoc_core_tx_converter_source_source_last;
wire    [9:0] main_basesoc_core_tx_converter_source_source_payload_data;
wire          main_basesoc_core_tx_converter_source_source_ready;
wire          main_basesoc_core_tx_converter_source_source_valid;
wire          main_basesoc_core_tx_converter_source_valid;
wire          main_basesoc_core_tx_crc_be;
reg           main_basesoc_core_tx_crc_ce = 1'd0;
reg     [1:0] main_basesoc_core_tx_crc_cnt = 2'd3;
wire          main_basesoc_core_tx_crc_cnt_done;
reg    [31:0] main_basesoc_core_tx_crc_crc_next = 32'd0;
reg    [31:0] main_basesoc_core_tx_crc_crc_packet = 32'd0;
reg    [31:0] main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0 = 32'd0;
reg           main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0 = 1'd0;
wire   [31:0] main_basesoc_core_tx_crc_crc_prev;
wire    [7:0] main_basesoc_core_tx_crc_data0;
wire    [7:0] main_basesoc_core_tx_crc_data1;
reg           main_basesoc_core_tx_crc_error = 1'd0;
reg           main_basesoc_core_tx_crc_is_ongoing0 = 1'd0;
reg           main_basesoc_core_tx_crc_is_ongoing1 = 1'd0;
reg           main_basesoc_core_tx_crc_last_be = 1'd0;
reg           main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 = 1'd0;
reg           main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 = 1'd0;
wire          main_basesoc_core_tx_crc_pipe_valid_sink_first;
wire          main_basesoc_core_tx_crc_pipe_valid_sink_last;
wire    [7:0] main_basesoc_core_tx_crc_pipe_valid_sink_payload_data;
wire          main_basesoc_core_tx_crc_pipe_valid_sink_payload_error;
wire          main_basesoc_core_tx_crc_pipe_valid_sink_payload_last_be;
wire          main_basesoc_core_tx_crc_pipe_valid_sink_ready;
wire          main_basesoc_core_tx_crc_pipe_valid_sink_valid;
reg           main_basesoc_core_tx_crc_pipe_valid_source_first = 1'd0;
reg           main_basesoc_core_tx_crc_pipe_valid_source_last = 1'd0;
reg     [7:0] main_basesoc_core_tx_crc_pipe_valid_source_payload_data = 8'd0;
reg           main_basesoc_core_tx_crc_pipe_valid_source_payload_error = 1'd0;
reg           main_basesoc_core_tx_crc_pipe_valid_source_payload_last_be = 1'd0;
wire          main_basesoc_core_tx_crc_pipe_valid_source_ready;
reg           main_basesoc_core_tx_crc_pipe_valid_source_valid = 1'd0;
reg    [31:0] main_basesoc_core_tx_crc_reg = 32'd4294967295;
reg           main_basesoc_core_tx_crc_reset = 1'd0;
wire          main_basesoc_core_tx_crc_sink_first;
wire          main_basesoc_core_tx_crc_sink_last;
wire    [7:0] main_basesoc_core_tx_crc_sink_payload_data;
wire          main_basesoc_core_tx_crc_sink_payload_error;
wire          main_basesoc_core_tx_crc_sink_payload_last_be;
reg           main_basesoc_core_tx_crc_sink_ready = 1'd0;
wire          main_basesoc_core_tx_crc_sink_sink_first;
wire          main_basesoc_core_tx_crc_sink_sink_last;
wire    [7:0] main_basesoc_core_tx_crc_sink_sink_payload_data;
wire          main_basesoc_core_tx_crc_sink_sink_payload_error;
wire          main_basesoc_core_tx_crc_sink_sink_payload_last_be;
wire          main_basesoc_core_tx_crc_sink_sink_ready;
wire          main_basesoc_core_tx_crc_sink_sink_valid;
wire          main_basesoc_core_tx_crc_sink_valid;
reg           main_basesoc_core_tx_crc_source_first = 1'd0;
reg           main_basesoc_core_tx_crc_source_last = 1'd0;
reg     [7:0] main_basesoc_core_tx_crc_source_payload_data = 8'd0;
reg           main_basesoc_core_tx_crc_source_payload_error = 1'd0;
reg           main_basesoc_core_tx_crc_source_payload_last_be = 1'd0;
wire          main_basesoc_core_tx_crc_source_ready;
wire          main_basesoc_core_tx_crc_source_source_first;
wire          main_basesoc_core_tx_crc_source_source_last;
wire    [7:0] main_basesoc_core_tx_crc_source_source_payload_data;
wire          main_basesoc_core_tx_crc_source_source_payload_error;
wire          main_basesoc_core_tx_crc_source_source_payload_last_be;
wire          main_basesoc_core_tx_crc_source_source_ready;
wire          main_basesoc_core_tx_crc_source_source_valid;
reg           main_basesoc_core_tx_crc_source_valid = 1'd0;
reg    [31:0] main_basesoc_core_tx_crc_value = 32'd0;
reg     [3:0] main_basesoc_core_tx_gap_counter = 4'd0;
reg     [3:0] main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value = 4'd0;
reg           main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce = 1'd0;
wire          main_basesoc_core_tx_gap_sink_first;
wire          main_basesoc_core_tx_gap_sink_last;
wire    [7:0] main_basesoc_core_tx_gap_sink_payload_data;
wire          main_basesoc_core_tx_gap_sink_payload_error;
wire          main_basesoc_core_tx_gap_sink_payload_last_be;
reg           main_basesoc_core_tx_gap_sink_ready = 1'd0;
wire          main_basesoc_core_tx_gap_sink_valid;
reg           main_basesoc_core_tx_gap_source_first = 1'd0;
reg           main_basesoc_core_tx_gap_source_last = 1'd0;
reg     [7:0] main_basesoc_core_tx_gap_source_payload_data = 8'd0;
reg           main_basesoc_core_tx_gap_source_payload_error = 1'd0;
reg           main_basesoc_core_tx_gap_source_payload_last_be = 1'd0;
wire          main_basesoc_core_tx_gap_source_ready;
reg           main_basesoc_core_tx_gap_source_valid = 1'd0;
wire          main_basesoc_core_tx_last_be_last_handler_sink_first;
wire          main_basesoc_core_tx_last_be_last_handler_sink_last;
wire    [7:0] main_basesoc_core_tx_last_be_last_handler_sink_payload_data;
wire          main_basesoc_core_tx_last_be_last_handler_sink_payload_error;
wire          main_basesoc_core_tx_last_be_last_handler_sink_payload_last_be;
reg           main_basesoc_core_tx_last_be_last_handler_sink_ready = 1'd0;
wire          main_basesoc_core_tx_last_be_last_handler_sink_valid;
reg           main_basesoc_core_tx_last_be_last_handler_source_first = 1'd0;
reg           main_basesoc_core_tx_last_be_last_handler_source_last = 1'd0;
reg     [7:0] main_basesoc_core_tx_last_be_last_handler_source_payload_data = 8'd0;
reg           main_basesoc_core_tx_last_be_last_handler_source_payload_error = 1'd0;
reg           main_basesoc_core_tx_last_be_last_handler_source_payload_last_be = 1'd0;
wire          main_basesoc_core_tx_last_be_last_handler_source_ready;
reg           main_basesoc_core_tx_last_be_last_handler_source_valid = 1'd0;
wire          main_basesoc_core_tx_last_be_sink_sink_first;
wire          main_basesoc_core_tx_last_be_sink_sink_last;
wire    [7:0] main_basesoc_core_tx_last_be_sink_sink_payload_data;
wire          main_basesoc_core_tx_last_be_sink_sink_payload_error;
wire          main_basesoc_core_tx_last_be_sink_sink_payload_last_be;
wire          main_basesoc_core_tx_last_be_sink_sink_ready;
wire          main_basesoc_core_tx_last_be_sink_sink_valid;
wire          main_basesoc_core_tx_last_be_source_source_first;
wire          main_basesoc_core_tx_last_be_source_source_last;
wire    [7:0] main_basesoc_core_tx_last_be_source_source_payload_data;
wire          main_basesoc_core_tx_last_be_source_source_payload_error;
wire          main_basesoc_core_tx_last_be_source_source_payload_last_be;
wire          main_basesoc_core_tx_last_be_source_source_ready;
wire          main_basesoc_core_tx_last_be_source_source_valid;
reg    [15:0] main_basesoc_core_tx_padding_counter = 16'd0;
reg    [15:0] main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value = 16'd0;
reg           main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce = 1'd0;
wire          main_basesoc_core_tx_padding_counter_done;
wire          main_basesoc_core_tx_padding_sink_first;
wire          main_basesoc_core_tx_padding_sink_last;
wire    [7:0] main_basesoc_core_tx_padding_sink_payload_data;
wire          main_basesoc_core_tx_padding_sink_payload_error;
wire          main_basesoc_core_tx_padding_sink_payload_last_be;
reg           main_basesoc_core_tx_padding_sink_ready = 1'd0;
wire          main_basesoc_core_tx_padding_sink_valid;
reg           main_basesoc_core_tx_padding_source_first = 1'd0;
reg           main_basesoc_core_tx_padding_source_last = 1'd0;
reg     [7:0] main_basesoc_core_tx_padding_source_payload_data = 8'd0;
reg           main_basesoc_core_tx_padding_source_payload_error = 1'd0;
reg           main_basesoc_core_tx_padding_source_payload_last_be = 1'd0;
wire          main_basesoc_core_tx_padding_source_ready;
reg           main_basesoc_core_tx_padding_source_valid = 1'd0;
reg     [2:0] main_basesoc_core_tx_preamble_count = 3'd0;
reg     [2:0] main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value = 3'd0;
reg           main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce = 1'd0;
reg    [63:0] main_basesoc_core_tx_preamble_preamble = 64'd15372286728091293013;
wire          main_basesoc_core_tx_preamble_sink_first;
wire          main_basesoc_core_tx_preamble_sink_last;
wire    [7:0] main_basesoc_core_tx_preamble_sink_payload_data;
wire          main_basesoc_core_tx_preamble_sink_payload_error;
wire          main_basesoc_core_tx_preamble_sink_payload_last_be;
reg           main_basesoc_core_tx_preamble_sink_ready = 1'd0;
wire          main_basesoc_core_tx_preamble_sink_valid;
reg           main_basesoc_core_tx_preamble_source_first = 1'd0;
reg           main_basesoc_core_tx_preamble_source_last = 1'd0;
reg     [7:0] main_basesoc_core_tx_preamble_source_payload_data = 8'd0;
reg           main_basesoc_core_tx_preamble_source_payload_error = 1'd0;
wire          main_basesoc_core_tx_preamble_source_payload_last_be;
wire          main_basesoc_core_tx_preamble_source_ready;
reg           main_basesoc_core_tx_preamble_source_valid = 1'd0;
wire          main_basesoc_core_we;
wire          main_basesoc_cpu_rst;
wire   [31:0] main_basesoc_dat_r;
wire          main_basesoc_idbus_ack;
reg    [31:0] main_basesoc_idbus_adr = 32'd0;
reg    [31:0] main_basesoc_idbus_adr_femtorv_next_value0 = 32'd0;
reg           main_basesoc_idbus_adr_femtorv_next_value_ce0 = 1'd0;
reg     [1:0] main_basesoc_idbus_bte = 2'd0;
reg     [2:0] main_basesoc_idbus_cti = 3'd0;
reg           main_basesoc_idbus_cyc = 1'd0;
wire   [31:0] main_basesoc_idbus_dat_r;
reg    [31:0] main_basesoc_idbus_dat_w = 32'd0;
reg    [31:0] main_basesoc_idbus_dat_w_femtorv_next_value1 = 32'd0;
reg           main_basesoc_idbus_dat_w_femtorv_next_value_ce1 = 1'd0;
wire          main_basesoc_idbus_err;
reg     [3:0] main_basesoc_idbus_sel = 4'd0;
reg     [3:0] main_basesoc_idbus_sel_femtorv_next_value2 = 4'd0;
reg           main_basesoc_idbus_sel_femtorv_next_value_ce2 = 1'd0;
reg           main_basesoc_idbus_stb = 1'd0;
reg           main_basesoc_idbus_we = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value3 = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value_ce3 = 1'd0;
reg           main_basesoc_interface0_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_interface0_ram_bus_adr;
wire    [1:0] main_basesoc_interface0_ram_bus_bte;
wire    [2:0] main_basesoc_interface0_ram_bus_cti;
wire          main_basesoc_interface0_ram_bus_cyc;
wire   [31:0] main_basesoc_interface0_ram_bus_dat_r;
wire   [31:0] main_basesoc_interface0_ram_bus_dat_w;
reg           main_basesoc_interface0_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_interface0_ram_bus_sel;
wire          main_basesoc_interface0_ram_bus_stb;
wire          main_basesoc_interface0_ram_bus_we;
reg           main_basesoc_interface1_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_interface1_ram_bus_adr;
wire    [1:0] main_basesoc_interface1_ram_bus_bte;
wire    [2:0] main_basesoc_interface1_ram_bus_cti;
wire          main_basesoc_interface1_ram_bus_cyc;
wire   [31:0] main_basesoc_interface1_ram_bus_dat_r;
wire   [31:0] main_basesoc_interface1_ram_bus_dat_w;
reg           main_basesoc_interface1_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_interface1_ram_bus_sel;
wire          main_basesoc_interface1_ram_bus_stb;
wire          main_basesoc_interface1_ram_bus_we;
reg           main_basesoc_latch = 1'd0;
wire   [31:0] main_basesoc_mbus_addr;
reg           main_basesoc_mbus_rbusy = 1'd0;
reg    [31:0] main_basesoc_mbus_rdata0 = 32'd0;
reg    [31:0] main_basesoc_mbus_rdata1 = 32'd0;
wire          main_basesoc_mbus_rstrb;
reg           main_basesoc_mbus_wbusy = 1'd0;
wire   [31:0] main_basesoc_mbus_wdata;
wire    [3:0] main_basesoc_mbus_wmask;
reg           main_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_cti;
wire          main_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_dat_w;
reg           main_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_sel;
wire          main_basesoc_ram_bus_stb;
wire          main_basesoc_ram_bus_we;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_basesoc_soc_rst = 1'd0;
wire   [10:0] main_basesoc_sram0_adr;
reg           main_basesoc_sram0_adr_burst = 1'd0;
wire   [31:0] main_basesoc_sram0_dat_r;
wire   [31:0] main_basesoc_sram0_dat_w;
reg     [3:0] main_basesoc_sram0_we = 4'd0;
wire   [13:0] main_basesoc_sram1_adr;
reg           main_basesoc_sram1_adr_burst = 1'd0;
wire   [31:0] main_basesoc_sram1_dat_r;
wire   [31:0] main_basesoc_sram1_dat_w;
reg     [3:0] main_basesoc_sram1_we = 4'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
wire          main_basesoc_timer_pending_status;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
wire          main_basesoc_timer_status_status;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
wire          main_basesoc_wishbone_interface_bus_rx_ack;
wire   [29:0] main_basesoc_wishbone_interface_bus_rx_adr;
wire    [1:0] main_basesoc_wishbone_interface_bus_rx_bte;
wire    [2:0] main_basesoc_wishbone_interface_bus_rx_cti;
wire          main_basesoc_wishbone_interface_bus_rx_cyc;
wire   [31:0] main_basesoc_wishbone_interface_bus_rx_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_bus_rx_dat_w;
wire          main_basesoc_wishbone_interface_bus_rx_err;
wire    [3:0] main_basesoc_wishbone_interface_bus_rx_sel;
wire          main_basesoc_wishbone_interface_bus_rx_stb;
wire          main_basesoc_wishbone_interface_bus_rx_we;
wire          main_basesoc_wishbone_interface_bus_tx_ack;
wire   [29:0] main_basesoc_wishbone_interface_bus_tx_adr;
wire    [1:0] main_basesoc_wishbone_interface_bus_tx_bte;
wire    [2:0] main_basesoc_wishbone_interface_bus_tx_cti;
wire          main_basesoc_wishbone_interface_bus_tx_cyc;
wire   [31:0] main_basesoc_wishbone_interface_bus_tx_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_bus_tx_dat_w;
wire          main_basesoc_wishbone_interface_bus_tx_err;
wire    [3:0] main_basesoc_wishbone_interface_bus_tx_sel;
wire          main_basesoc_wishbone_interface_bus_tx_stb;
wire          main_basesoc_wishbone_interface_bus_tx_we;
reg     [1:0] main_basesoc_wishbone_interface_decoder0_slave_sel = 2'd0;
reg     [1:0] main_basesoc_wishbone_interface_decoder0_slave_sel_r = 2'd0;
reg     [1:0] main_basesoc_wishbone_interface_decoder1_slave_sel = 2'd0;
reg     [1:0] main_basesoc_wishbone_interface_decoder1_slave_sel_r = 2'd0;
wire          main_basesoc_wishbone_interface_ev_irq;
reg           main_basesoc_wishbone_interface_interface0_ack = 1'd0;
wire   [29:0] main_basesoc_wishbone_interface_interface0_adr;
wire    [1:0] main_basesoc_wishbone_interface_interface0_bte;
wire    [2:0] main_basesoc_wishbone_interface_interface0_cti;
wire          main_basesoc_wishbone_interface_interface0_cyc;
wire   [31:0] main_basesoc_wishbone_interface_interface0_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_interface0_dat_w;
reg           main_basesoc_wishbone_interface_interface0_err = 1'd0;
wire    [3:0] main_basesoc_wishbone_interface_interface0_sel;
wire          main_basesoc_wishbone_interface_interface0_stb;
wire          main_basesoc_wishbone_interface_interface0_we;
reg           main_basesoc_wishbone_interface_interface1_ack = 1'd0;
wire   [29:0] main_basesoc_wishbone_interface_interface1_adr;
wire    [1:0] main_basesoc_wishbone_interface_interface1_bte;
wire    [2:0] main_basesoc_wishbone_interface_interface1_cti;
wire          main_basesoc_wishbone_interface_interface1_cyc;
wire   [31:0] main_basesoc_wishbone_interface_interface1_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_interface1_dat_w;
reg           main_basesoc_wishbone_interface_interface1_err = 1'd0;
wire    [3:0] main_basesoc_wishbone_interface_interface1_sel;
wire          main_basesoc_wishbone_interface_interface1_stb;
wire          main_basesoc_wishbone_interface_interface1_we;
reg           main_basesoc_wishbone_interface_interface2_ack = 1'd0;
wire   [29:0] main_basesoc_wishbone_interface_interface2_adr;
wire    [1:0] main_basesoc_wishbone_interface_interface2_bte;
wire    [2:0] main_basesoc_wishbone_interface_interface2_cti;
wire          main_basesoc_wishbone_interface_interface2_cyc;
wire   [31:0] main_basesoc_wishbone_interface_interface2_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_interface2_dat_w;
reg           main_basesoc_wishbone_interface_interface2_err = 1'd0;
wire    [3:0] main_basesoc_wishbone_interface_interface2_sel;
wire          main_basesoc_wishbone_interface_interface2_stb;
wire          main_basesoc_wishbone_interface_interface2_we;
reg           main_basesoc_wishbone_interface_interface3_ack = 1'd0;
wire   [29:0] main_basesoc_wishbone_interface_interface3_adr;
wire    [1:0] main_basesoc_wishbone_interface_interface3_bte;
wire    [2:0] main_basesoc_wishbone_interface_interface3_cti;
wire          main_basesoc_wishbone_interface_interface3_cyc;
wire   [31:0] main_basesoc_wishbone_interface_interface3_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_interface3_dat_w;
reg           main_basesoc_wishbone_interface_interface3_err = 1'd0;
wire    [3:0] main_basesoc_wishbone_interface_interface3_sel;
wire          main_basesoc_wishbone_interface_interface3_stb;
wire          main_basesoc_wishbone_interface_interface3_we;
reg           main_basesoc_wishbone_interface_reader_cmd_fifo_consume = 1'd0;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_do_read;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_first;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_last;
wire   [10:0] main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_payload_length;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_payload_slot;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_first;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_last;
wire   [10:0] main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_payload_length;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_payload_slot;
reg     [1:0] main_basesoc_wishbone_interface_reader_cmd_fifo_level = 2'd0;
reg           main_basesoc_wishbone_interface_reader_cmd_fifo_produce = 1'd0;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_rdport_adr;
wire   [13:0] main_basesoc_wishbone_interface_reader_cmd_fifo_rdport_dat_r;
reg           main_basesoc_wishbone_interface_reader_cmd_fifo_replace = 1'd0;
reg           main_basesoc_wishbone_interface_reader_cmd_fifo_sink_first = 1'd0;
reg           main_basesoc_wishbone_interface_reader_cmd_fifo_sink_last = 1'd0;
wire   [10:0] main_basesoc_wishbone_interface_reader_cmd_fifo_sink_payload_length;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_sink_payload_slot;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_sink_ready;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_sink_valid;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_source_first;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_source_last;
wire   [10:0] main_basesoc_wishbone_interface_reader_cmd_fifo_source_payload_length;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_source_payload_slot;
reg           main_basesoc_wishbone_interface_reader_cmd_fifo_source_ready = 1'd0;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_source_valid;
wire   [13:0] main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_din;
wire   [13:0] main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_dout;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_re;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_readable;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_we;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_writable;
reg           main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_adr = 1'd0;
wire   [13:0] main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_dat_r;
wire   [13:0] main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_dat_w;
wire          main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_we;
reg           main_basesoc_wishbone_interface_reader_enable_re = 1'd0;
reg           main_basesoc_wishbone_interface_reader_enable_storage = 1'd0;
wire          main_basesoc_wishbone_interface_reader_event00;
wire          main_basesoc_wishbone_interface_reader_event01;
wire          main_basesoc_wishbone_interface_reader_event02;
reg           main_basesoc_wishbone_interface_reader_eventsourcepulse_clear = 1'd0;
reg           main_basesoc_wishbone_interface_reader_eventsourcepulse_pending = 1'd0;
wire          main_basesoc_wishbone_interface_reader_eventsourcepulse_status;
reg           main_basesoc_wishbone_interface_reader_eventsourcepulse_trigger = 1'd0;
wire          main_basesoc_wishbone_interface_reader_irq;
reg    [10:0] main_basesoc_wishbone_interface_reader_length = 11'd0;
reg    [10:0] main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value = 11'd0;
reg           main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce = 1'd0;
reg           main_basesoc_wishbone_interface_reader_length_re = 1'd0;
reg    [10:0] main_basesoc_wishbone_interface_reader_length_storage = 11'd0;
reg           main_basesoc_wishbone_interface_reader_level_re = 1'd0;
wire    [1:0] main_basesoc_wishbone_interface_reader_level_status;
wire          main_basesoc_wishbone_interface_reader_level_we;
wire    [8:0] main_basesoc_wishbone_interface_reader_memory0_adr;
wire   [31:0] main_basesoc_wishbone_interface_reader_memory0_dat_r;
wire          main_basesoc_wishbone_interface_reader_memory0_re;
wire    [8:0] main_basesoc_wishbone_interface_reader_memory1_adr;
wire   [31:0] main_basesoc_wishbone_interface_reader_memory1_dat_r;
wire          main_basesoc_wishbone_interface_reader_memory1_re;
reg           main_basesoc_wishbone_interface_reader_pending_r = 1'd0;
reg           main_basesoc_wishbone_interface_reader_pending_re = 1'd0;
wire          main_basesoc_wishbone_interface_reader_pending_status;
wire          main_basesoc_wishbone_interface_reader_pending_we;
reg    [31:0] main_basesoc_wishbone_interface_reader_rd_data = 32'd0;
reg           main_basesoc_wishbone_interface_reader_read = 1'd0;
reg           main_basesoc_wishbone_interface_reader_ready_re = 1'd0;
wire          main_basesoc_wishbone_interface_reader_ready_status;
wire          main_basesoc_wishbone_interface_reader_ready_we;
reg           main_basesoc_wishbone_interface_reader_slot_re = 1'd0;
reg           main_basesoc_wishbone_interface_reader_slot_storage = 1'd0;
reg           main_basesoc_wishbone_interface_reader_source_source_first = 1'd0;
reg           main_basesoc_wishbone_interface_reader_source_source_last = 1'd0;
wire   [31:0] main_basesoc_wishbone_interface_reader_source_source_payload_data;
reg     [3:0] main_basesoc_wishbone_interface_reader_source_source_payload_error = 4'd0;
reg     [3:0] main_basesoc_wishbone_interface_reader_source_source_payload_last_be = 4'd0;
wire          main_basesoc_wishbone_interface_reader_source_source_ready;
reg           main_basesoc_wishbone_interface_reader_source_source_valid = 1'd0;
wire          main_basesoc_wishbone_interface_reader_start_r;
reg           main_basesoc_wishbone_interface_reader_start_re = 1'd0;
reg           main_basesoc_wishbone_interface_reader_start_w = 1'd0;
reg           main_basesoc_wishbone_interface_reader_start_we = 1'd0;
reg           main_basesoc_wishbone_interface_reader_status_re = 1'd0;
wire          main_basesoc_wishbone_interface_reader_status_status;
wire          main_basesoc_wishbone_interface_reader_status_we;
wire          main_basesoc_wishbone_interface_sink_first;
wire          main_basesoc_wishbone_interface_sink_last;
wire   [31:0] main_basesoc_wishbone_interface_sink_payload_data;
wire    [3:0] main_basesoc_wishbone_interface_sink_payload_error;
wire    [3:0] main_basesoc_wishbone_interface_sink_payload_last_be;
wire          main_basesoc_wishbone_interface_sink_ready;
wire          main_basesoc_wishbone_interface_sink_valid;
wire          main_basesoc_wishbone_interface_source_first;
wire          main_basesoc_wishbone_interface_source_last;
wire   [31:0] main_basesoc_wishbone_interface_source_payload_data;
wire    [3:0] main_basesoc_wishbone_interface_source_payload_error;
wire    [3:0] main_basesoc_wishbone_interface_source_payload_last_be;
wire          main_basesoc_wishbone_interface_source_ready;
wire          main_basesoc_wishbone_interface_source_valid;
wire    [8:0] main_basesoc_wishbone_interface_sram0_adr;
reg           main_basesoc_wishbone_interface_sram0_adr_burst = 1'd0;
wire   [31:0] main_basesoc_wishbone_interface_sram0_dat_r;
wire    [8:0] main_basesoc_wishbone_interface_sram1_adr;
reg           main_basesoc_wishbone_interface_sram1_adr_burst = 1'd0;
wire   [31:0] main_basesoc_wishbone_interface_sram1_dat_r;
wire    [8:0] main_basesoc_wishbone_interface_sram2_adr;
reg           main_basesoc_wishbone_interface_sram2_adr_burst = 1'd0;
wire   [31:0] main_basesoc_wishbone_interface_sram2_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_sram2_dat_w;
reg     [3:0] main_basesoc_wishbone_interface_sram2_we = 4'd0;
wire    [8:0] main_basesoc_wishbone_interface_sram3_adr;
reg           main_basesoc_wishbone_interface_sram3_adr_burst = 1'd0;
wire   [31:0] main_basesoc_wishbone_interface_sram3_dat_r;
wire   [31:0] main_basesoc_wishbone_interface_sram3_dat_w;
reg     [3:0] main_basesoc_wishbone_interface_sram3_we = 4'd0;
wire          main_basesoc_wishbone_interface_writer_available0;
wire          main_basesoc_wishbone_interface_writer_available1;
wire          main_basesoc_wishbone_interface_writer_available2;
reg           main_basesoc_wishbone_interface_writer_available_clear = 1'd0;
wire          main_basesoc_wishbone_interface_writer_available_pending;
wire          main_basesoc_wishbone_interface_writer_available_status;
wire          main_basesoc_wishbone_interface_writer_available_trigger;
reg           main_basesoc_wishbone_interface_writer_enable_re = 1'd0;
reg           main_basesoc_wishbone_interface_writer_enable_storage = 1'd0;
reg           main_basesoc_wishbone_interface_writer_errors_re = 1'd0;
reg    [31:0] main_basesoc_wishbone_interface_writer_errors_status = 32'd0;
reg    [31:0] main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value = 32'd0;
reg           main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce = 1'd0;
wire          main_basesoc_wishbone_interface_writer_errors_we;
wire          main_basesoc_wishbone_interface_writer_irq;
reg    [10:0] main_basesoc_wishbone_interface_writer_length = 11'd0;
reg    [10:0] main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value = 11'd0;
reg           main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce = 1'd0;
reg     [3:0] main_basesoc_wishbone_interface_writer_length_inc = 4'd0;
reg           main_basesoc_wishbone_interface_writer_length_re = 1'd0;
wire   [10:0] main_basesoc_wishbone_interface_writer_length_status;
wire          main_basesoc_wishbone_interface_writer_length_we;
reg     [8:0] main_basesoc_wishbone_interface_writer_memory0_adr = 9'd0;
wire   [31:0] main_basesoc_wishbone_interface_writer_memory0_dat_r;
reg    [31:0] main_basesoc_wishbone_interface_writer_memory0_dat_w = 32'd0;
reg           main_basesoc_wishbone_interface_writer_memory0_we = 1'd0;
reg     [8:0] main_basesoc_wishbone_interface_writer_memory1_adr = 9'd0;
wire   [31:0] main_basesoc_wishbone_interface_writer_memory1_dat_r;
reg    [31:0] main_basesoc_wishbone_interface_writer_memory1_dat_w = 32'd0;
reg           main_basesoc_wishbone_interface_writer_memory1_we = 1'd0;
reg           main_basesoc_wishbone_interface_writer_pending_r = 1'd0;
reg           main_basesoc_wishbone_interface_writer_pending_re = 1'd0;
wire          main_basesoc_wishbone_interface_writer_pending_status;
wire          main_basesoc_wishbone_interface_writer_pending_we;
wire          main_basesoc_wishbone_interface_writer_sink_sink_first;
wire          main_basesoc_wishbone_interface_writer_sink_sink_last;
wire   [31:0] main_basesoc_wishbone_interface_writer_sink_sink_payload_data;
wire    [3:0] main_basesoc_wishbone_interface_writer_sink_sink_payload_error;
wire    [3:0] main_basesoc_wishbone_interface_writer_sink_sink_payload_last_be;
reg           main_basesoc_wishbone_interface_writer_sink_sink_ready = 1'd1;
wire          main_basesoc_wishbone_interface_writer_sink_sink_valid;
reg           main_basesoc_wishbone_interface_writer_slot = 1'd0;
reg           main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value = 1'd0;
reg           main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce = 1'd0;
reg           main_basesoc_wishbone_interface_writer_slot_re = 1'd0;
wire          main_basesoc_wishbone_interface_writer_slot_status;
wire          main_basesoc_wishbone_interface_writer_slot_we;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_consume = 1'd0;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_do_read;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_first;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_last;
wire   [10:0] main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_payload_length;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_payload_slot;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_first;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_last;
wire   [10:0] main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_payload_length;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_payload_slot;
reg     [1:0] main_basesoc_wishbone_interface_writer_stat_fifo_level = 2'd0;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_produce = 1'd0;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_rdport_adr;
wire   [13:0] main_basesoc_wishbone_interface_writer_stat_fifo_rdport_dat_r;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_replace = 1'd0;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_sink_first = 1'd0;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_sink_last = 1'd0;
reg    [10:0] main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_length = 11'd0;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_slot = 1'd0;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_sink_ready;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_sink_valid = 1'd0;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_source_first;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_source_last;
wire   [10:0] main_basesoc_wishbone_interface_writer_stat_fifo_source_payload_length;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_source_payload_slot;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_source_ready;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_source_valid;
wire   [13:0] main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_din;
wire   [13:0] main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_dout;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_re;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_readable;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_we;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_writable;
reg           main_basesoc_wishbone_interface_writer_stat_fifo_wrport_adr = 1'd0;
wire   [13:0] main_basesoc_wishbone_interface_writer_stat_fifo_wrport_dat_r;
wire   [13:0] main_basesoc_wishbone_interface_writer_stat_fifo_wrport_dat_w;
wire          main_basesoc_wishbone_interface_writer_stat_fifo_wrport_we;
reg           main_basesoc_wishbone_interface_writer_status_re = 1'd0;
wire          main_basesoc_wishbone_interface_writer_status_status;
wire          main_basesoc_wishbone_interface_writer_status_we;
wire   [31:0] main_basesoc_wishbone_interface_writer_wr_data;
reg           main_basesoc_wishbone_interface_writer_write = 1'd0;
reg           main_chaser = 1'd0;
reg    [23:0] main_count = 24'd12000000;
wire          main_crg_clkin;
wire          main_crg_clkout;
wire          main_crg_locked;
wire          main_crg_reset;
wire          main_crg_rst_n;
wire          main_done;
reg     [8:0] main_ethphy_counter = 9'd0;
wire          main_ethphy_counter_ce;
wire          main_ethphy_counter_done;
wire          main_ethphy_liteethphyrmiirx_ce;
reg     [1:0] main_ethphy_liteethphyrmiirx_converter_demux = 2'd0;
wire          main_ethphy_liteethphyrmiirx_converter_load_part;
reg           main_ethphy_liteethphyrmiirx_converter_sink_first = 1'd0;
reg           main_ethphy_liteethphyrmiirx_converter_sink_last = 1'd0;
wire    [1:0] main_ethphy_liteethphyrmiirx_converter_sink_payload_data;
wire          main_ethphy_liteethphyrmiirx_converter_sink_ready;
reg           main_ethphy_liteethphyrmiirx_converter_sink_valid = 1'd0;
reg           main_ethphy_liteethphyrmiirx_converter_source_first = 1'd0;
reg           main_ethphy_liteethphyrmiirx_converter_source_last = 1'd0;
reg     [7:0] main_ethphy_liteethphyrmiirx_converter_source_payload_data = 8'd0;
reg     [2:0] main_ethphy_liteethphyrmiirx_converter_source_payload_valid_token_count = 3'd0;
wire          main_ethphy_liteethphyrmiirx_converter_source_ready;
wire          main_ethphy_liteethphyrmiirx_converter_source_valid;
reg           main_ethphy_liteethphyrmiirx_converter_strobe_all = 1'd0;
reg     [9:0] main_ethphy_liteethphyrmiirx_count = 10'd0;
reg     [9:0] main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value0 = 10'd0;
reg           main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value_ce0 = 1'd0;
reg           main_ethphy_liteethphyrmiirx_crs_dv = 1'd0;
reg           main_ethphy_liteethphyrmiirx_crs_dv_d = 1'd0;
wire          main_ethphy_liteethphyrmiirx_crs_dv_i;
reg           main_ethphy_liteethphyrmiirx_crs_first = 1'd0;
reg           main_ethphy_liteethphyrmiirx_crs_last = 1'd0;
reg           main_ethphy_liteethphyrmiirx_crs_run = 1'd0;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_first;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_last;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_payload_data;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_ready;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_valid;
reg           main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_first = 1'd0;
reg           main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_last = 1'd0;
reg     [1:0] main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_payload_data = 2'd0;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_ready;
reg           main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_valid = 1'd0;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_first;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_last;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_payload_data;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_ready;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_valid;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_first;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_last;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_payload_data;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_ready;
wire          main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_valid;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_first;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_last;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_payload_data;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_ready;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_valid;
reg           main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_first = 1'd0;
reg           main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_last = 1'd0;
reg     [1:0] main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_payload_data = 2'd0;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_ready;
reg           main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_valid = 1'd0;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_first;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_last;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_payload_data;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_ready;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_valid;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_first;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_last;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_payload_data;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_ready;
wire          main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_valid;
reg           main_ethphy_liteethphyrmiirx_delay_sink_first = 1'd0;
reg           main_ethphy_liteethphyrmiirx_delay_sink_last = 1'd0;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_sink_payload_data;
wire          main_ethphy_liteethphyrmiirx_delay_sink_ready;
wire          main_ethphy_liteethphyrmiirx_delay_sink_valid;
wire          main_ethphy_liteethphyrmiirx_delay_source_first;
wire          main_ethphy_liteethphyrmiirx_delay_source_last;
wire    [1:0] main_ethphy_liteethphyrmiirx_delay_source_payload_data;
reg           main_ethphy_liteethphyrmiirx_delay_source_ready = 1'd0;
wire          main_ethphy_liteethphyrmiirx_delay_source_valid;
reg           main_ethphy_liteethphyrmiirx_rst = 1'd0;
reg     [1:0] main_ethphy_liteethphyrmiirx_rx_data = 2'd0;
wire    [1:0] main_ethphy_liteethphyrmiirx_rx_data_i;
wire          main_ethphy_liteethphyrmiirx_source_source_first0;
wire          main_ethphy_liteethphyrmiirx_source_source_first1;
wire          main_ethphy_liteethphyrmiirx_source_source_last0;
wire          main_ethphy_liteethphyrmiirx_source_source_last1;
wire    [7:0] main_ethphy_liteethphyrmiirx_source_source_payload_data0;
wire    [7:0] main_ethphy_liteethphyrmiirx_source_source_payload_data1;
reg           main_ethphy_liteethphyrmiirx_source_source_payload_error = 1'd0;
reg           main_ethphy_liteethphyrmiirx_source_source_payload_last_be = 1'd0;
wire          main_ethphy_liteethphyrmiirx_source_source_ready0;
wire          main_ethphy_liteethphyrmiirx_source_source_ready1;
wire          main_ethphy_liteethphyrmiirx_source_source_valid0;
wire          main_ethphy_liteethphyrmiirx_source_source_valid1;
wire          main_ethphy_liteethphyrmiirx_speed0;
reg           main_ethphy_liteethphyrmiirx_speed1 = 1'd0;
reg           main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value1 = 1'd0;
reg           main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value_ce1 = 1'd0;
reg     [3:0] main_ethphy_liteethphyrmiirx_timer = 4'd0;
wire          main_ethphy_liteethphyrmiitx_ce;
wire          main_ethphy_liteethphyrmiitx_converter_first;
wire          main_ethphy_liteethphyrmiitx_converter_last;
reg     [1:0] main_ethphy_liteethphyrmiitx_converter_mux = 2'd0;
reg           main_ethphy_liteethphyrmiitx_converter_sink_first = 1'd0;
reg           main_ethphy_liteethphyrmiitx_converter_sink_last = 1'd0;
wire    [7:0] main_ethphy_liteethphyrmiitx_converter_sink_payload_data;
wire          main_ethphy_liteethphyrmiitx_converter_sink_ready;
wire          main_ethphy_liteethphyrmiitx_converter_sink_valid;
wire          main_ethphy_liteethphyrmiitx_converter_source_first;
wire          main_ethphy_liteethphyrmiitx_converter_source_last;
reg     [1:0] main_ethphy_liteethphyrmiitx_converter_source_payload_data = 2'd0;
wire          main_ethphy_liteethphyrmiitx_converter_source_payload_valid_token_count;
wire          main_ethphy_liteethphyrmiitx_converter_source_ready;
wire          main_ethphy_liteethphyrmiitx_converter_source_valid;
wire          main_ethphy_liteethphyrmiitx_rst;
wire          main_ethphy_liteethphyrmiitx_sink_first;
wire          main_ethphy_liteethphyrmiitx_sink_last;
wire    [7:0] main_ethphy_liteethphyrmiitx_sink_payload_data;
wire          main_ethphy_liteethphyrmiitx_sink_payload_error;
wire          main_ethphy_liteethphyrmiitx_sink_payload_last_be;
wire          main_ethphy_liteethphyrmiitx_sink_ready;
wire          main_ethphy_liteethphyrmiitx_sink_valid;
wire          main_ethphy_liteethphyrmiitx_source_source_first;
wire          main_ethphy_liteethphyrmiitx_source_source_last;
wire    [1:0] main_ethphy_liteethphyrmiitx_source_source_payload_data;
wire          main_ethphy_liteethphyrmiitx_source_source_ready;
wire          main_ethphy_liteethphyrmiitx_source_source_valid;
wire          main_ethphy_liteethphyrmiitx_speed;
reg     [3:0] main_ethphy_liteethphyrmiitx_timer = 4'd0;
wire          main_ethphy_reset0;
wire          main_ethphy_reset1;
reg           main_ethphy_reset_re = 1'd0;
reg           main_ethphy_reset_storage = 1'd0;
reg           main_leds = 1'd0;
reg           main_mode = 1'd0;
reg           main_re = 1'd0;
reg           main_storage = 1'd0;
wire          main_wait;
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_basesoc_bus_error = builder_error;
assign main_crg_reset = ((~main_crg_rst_n) | (~user_btn_n0));
assign main_crg_clkin = clk0;
assign sys_clk = main_crg_clkout;
assign main_crg_locked = (builder_gatematepll_locked_s1 & (~main_crg_reset));
assign main_basesoc_adapted_interface_dat_w = main_basesoc_idbus_dat_w;
assign main_basesoc_idbus_dat_r = main_basesoc_adapted_interface_dat_r;
assign main_basesoc_adapted_interface_sel = main_basesoc_idbus_sel;
assign main_basesoc_adapted_interface_cyc = main_basesoc_idbus_cyc;
assign main_basesoc_adapted_interface_stb = main_basesoc_idbus_stb;
assign main_basesoc_idbus_ack = main_basesoc_adapted_interface_ack;
assign main_basesoc_adapted_interface_we = main_basesoc_idbus_we;
assign main_basesoc_adapted_interface_cti = main_basesoc_idbus_cti;
assign main_basesoc_adapted_interface_bte = main_basesoc_idbus_bte;
assign main_basesoc_idbus_err = main_basesoc_adapted_interface_err;
assign main_basesoc_adapted_interface_adr = main_basesoc_idbus_adr[31:2];
assign builder_shared_adr = builder_self0;
assign builder_shared_dat_w = builder_self1;
assign builder_shared_sel = builder_self2;
assign builder_shared_cyc = builder_self3;
assign builder_shared_stb = builder_self4;
assign builder_shared_we = builder_self5;
assign builder_shared_cti = builder_self6;
assign builder_shared_bte = builder_self7;
assign main_basesoc_adapted_interface_dat_r = builder_shared_dat_r;
assign main_basesoc_adapted_interface_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_adapted_interface_err = (builder_shared_err & (builder_grant == 1'd0));
assign builder_request = {main_basesoc_adapted_interface_cyc};
assign builder_grant = 1'd0;
always @(*) begin
    builder_slave_sel <= 6'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_slave_sel[1] <= (builder_shared_adr[29:11] == 12'd2048);
    builder_slave_sel[2] <= (builder_shared_adr[29:14] == 15'd16384);
    builder_slave_sel[3] <= (builder_shared_adr[29:10] == 20'd524288);
    builder_slave_sel[4] <= (builder_shared_adr[29:10] == 20'd524289);
    builder_slave_sel[5] <= (builder_shared_adr[29:14] == 16'd33280);
end
assign main_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_interface0_ram_bus_adr = builder_shared_adr;
assign main_basesoc_interface0_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_interface0_ram_bus_sel = builder_shared_sel;
assign main_basesoc_interface0_ram_bus_stb = builder_shared_stb;
assign main_basesoc_interface0_ram_bus_we = builder_shared_we;
assign main_basesoc_interface0_ram_bus_cti = builder_shared_cti;
assign main_basesoc_interface0_ram_bus_bte = builder_shared_bte;
assign main_basesoc_interface1_ram_bus_adr = builder_shared_adr;
assign main_basesoc_interface1_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_interface1_ram_bus_sel = builder_shared_sel;
assign main_basesoc_interface1_ram_bus_stb = builder_shared_stb;
assign main_basesoc_interface1_ram_bus_we = builder_shared_we;
assign main_basesoc_interface1_ram_bus_cti = builder_shared_cti;
assign main_basesoc_interface1_ram_bus_bte = builder_shared_bte;
assign main_basesoc_wishbone_interface_bus_rx_adr = builder_shared_adr;
assign main_basesoc_wishbone_interface_bus_rx_dat_w = builder_shared_dat_w;
assign main_basesoc_wishbone_interface_bus_rx_sel = builder_shared_sel;
assign main_basesoc_wishbone_interface_bus_rx_stb = builder_shared_stb;
assign main_basesoc_wishbone_interface_bus_rx_we = builder_shared_we;
assign main_basesoc_wishbone_interface_bus_rx_cti = builder_shared_cti;
assign main_basesoc_wishbone_interface_bus_rx_bte = builder_shared_bte;
assign main_basesoc_wishbone_interface_bus_tx_adr = builder_shared_adr;
assign main_basesoc_wishbone_interface_bus_tx_dat_w = builder_shared_dat_w;
assign main_basesoc_wishbone_interface_bus_tx_sel = builder_shared_sel;
assign main_basesoc_wishbone_interface_bus_tx_stb = builder_shared_stb;
assign main_basesoc_wishbone_interface_bus_tx_we = builder_shared_we;
assign main_basesoc_wishbone_interface_bus_tx_cti = builder_shared_cti;
assign main_basesoc_wishbone_interface_bus_tx_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_basesoc_interface0_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_basesoc_interface1_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign main_basesoc_wishbone_interface_bus_rx_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign main_basesoc_wishbone_interface_bus_tx_cyc = (builder_shared_cyc & builder_slave_sel[4]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_slave_sel[5]);
assign builder_shared_err = (((((main_basesoc_ram_bus_err | main_basesoc_interface0_ram_bus_err) | main_basesoc_interface1_ram_bus_err) | main_basesoc_wishbone_interface_bus_rx_err) | main_basesoc_wishbone_interface_bus_tx_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= (((((main_basesoc_ram_bus_ack | main_basesoc_interface0_ram_bus_ack) | main_basesoc_interface1_ram_bus_ack) | main_basesoc_wishbone_interface_bus_rx_ack) | main_basesoc_wishbone_interface_bus_tx_ack) | builder_interface0_ack);
    builder_shared_dat_r <= (((((({32{builder_slave_sel_r[0]}} & main_basesoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_basesoc_interface0_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_basesoc_interface1_ram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & main_basesoc_wishbone_interface_bus_rx_dat_r)) | ({32{builder_slave_sel_r[4]}} & main_basesoc_wishbone_interface_bus_tx_dat_r)) | ({32{builder_slave_sel_r[5]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
always @(*) begin
    main_basesoc_mbus_rdata0 <= 32'd0;
    main_basesoc_mbus_rdata0 <= main_basesoc_mbus_rdata1;
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata0 <= main_basesoc_idbus_dat_r;
    end
end
always @(*) begin
    builder_femtorv_next_state <= 1'd0;
    main_basesoc_idbus_adr_femtorv_next_value0 <= 32'd0;
    main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd0;
    main_basesoc_idbus_cyc <= 1'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value1 <= 32'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd0;
    main_basesoc_idbus_sel_femtorv_next_value2 <= 4'd0;
    main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd0;
    main_basesoc_idbus_stb <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value3 <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd0;
    main_basesoc_latch <= 1'd0;
    main_basesoc_mbus_rbusy <= 1'd0;
    main_basesoc_mbus_wbusy <= 1'd0;
    builder_femtorv_next_state <= builder_femtorv_state;
    case (builder_femtorv_state)
        1'd1: begin
            main_basesoc_idbus_stb <= 1'd1;
            main_basesoc_idbus_cyc <= 1'd1;
            main_basesoc_mbus_wbusy <= 1'd1;
            main_basesoc_mbus_rbusy <= 1'd1;
            if (main_basesoc_idbus_ack) begin
                main_basesoc_mbus_wbusy <= 1'd0;
                main_basesoc_mbus_rbusy <= 1'd0;
                main_basesoc_latch <= 1'd1;
                builder_femtorv_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_idbus_adr_femtorv_next_value0 <= main_basesoc_mbus_addr;
            main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd1;
            main_basesoc_idbus_dat_w_femtorv_next_value1 <= main_basesoc_mbus_wdata;
            main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd1;
            main_basesoc_idbus_sel_femtorv_next_value2 <= main_basesoc_mbus_wmask;
            main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd1;
            if ((main_basesoc_mbus_rstrb | (main_basesoc_mbus_wmask != 1'd0))) begin
                main_basesoc_idbus_we_femtorv_next_value3 <= (main_basesoc_mbus_wmask != 1'd0);
                main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd1;
                builder_femtorv_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_adr = main_basesoc_ram_bus_adr[14:0];
assign main_basesoc_ram_bus_dat_r = main_basesoc_dat_r;
always @(*) begin
    main_basesoc_sram0_we <= 4'd0;
    main_basesoc_sram0_we[0] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[0]);
    main_basesoc_sram0_we[1] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[1]);
    main_basesoc_sram0_we[2] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[2]);
    main_basesoc_sram0_we[3] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[3]);
end
assign main_basesoc_sram0_adr = main_basesoc_interface0_ram_bus_adr[10:0];
assign main_basesoc_interface0_ram_bus_dat_r = main_basesoc_sram0_dat_r;
assign main_basesoc_sram0_dat_w = main_basesoc_interface0_ram_bus_dat_w;
always @(*) begin
    main_basesoc_sram1_we <= 4'd0;
    main_basesoc_sram1_we[0] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[0]);
    main_basesoc_sram1_we[1] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[1]);
    main_basesoc_sram1_we[2] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[2]);
    main_basesoc_sram1_we[3] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[3]);
end
assign main_basesoc_sram1_adr = main_basesoc_interface1_ram_bus_adr[13:0];
assign main_basesoc_interface1_ram_bus_dat_r = main_basesoc_sram1_dat_r;
assign main_basesoc_sram1_dat_w = main_basesoc_interface1_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data[0];
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 1'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {user_led_n0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
assign main_ethphy_liteethphyrmiitx_speed = main_ethphy_liteethphyrmiirx_speed0;
assign main_ethphy_reset0 = (main_ethphy_reset_storage | main_ethphy_reset1);
assign main_ethphy_counter_done = (main_ethphy_counter == 9'd256);
assign main_ethphy_counter_ce = (~main_ethphy_counter_done);
assign main_ethphy_reset1 = (~main_ethphy_counter_done);
assign main_ethphy_liteethphyrmiitx_rst = (~main_ethphy_liteethphyrmiitx_sink_valid);
assign main_ethphy_liteethphyrmiitx_converter_sink_valid = main_ethphy_liteethphyrmiitx_sink_valid;
assign main_ethphy_liteethphyrmiitx_sink_ready = main_ethphy_liteethphyrmiitx_converter_sink_ready;
assign main_ethphy_liteethphyrmiitx_converter_sink_payload_data = main_ethphy_liteethphyrmiitx_sink_payload_data;
assign main_ethphy_liteethphyrmiitx_source_source_ready = main_ethphy_liteethphyrmiitx_ce;
assign main_ethphy_liteethphyrmiitx_ce = (main_ethphy_liteethphyrmiitx_timer == 1'd0);
assign main_ethphy_liteethphyrmiitx_source_source_valid = main_ethphy_liteethphyrmiitx_converter_source_valid;
assign main_ethphy_liteethphyrmiitx_converter_source_ready = main_ethphy_liteethphyrmiitx_source_source_ready;
assign main_ethphy_liteethphyrmiitx_source_source_first = main_ethphy_liteethphyrmiitx_converter_source_first;
assign main_ethphy_liteethphyrmiitx_source_source_last = main_ethphy_liteethphyrmiitx_converter_source_last;
assign main_ethphy_liteethphyrmiitx_source_source_payload_data = main_ethphy_liteethphyrmiitx_converter_source_payload_data;
assign main_ethphy_liteethphyrmiitx_converter_first = (main_ethphy_liteethphyrmiitx_converter_mux == 1'd0);
assign main_ethphy_liteethphyrmiitx_converter_last = (main_ethphy_liteethphyrmiitx_converter_mux == 2'd3);
assign main_ethphy_liteethphyrmiitx_converter_source_valid = main_ethphy_liteethphyrmiitx_converter_sink_valid;
assign main_ethphy_liteethphyrmiitx_converter_source_first = (main_ethphy_liteethphyrmiitx_converter_sink_first & main_ethphy_liteethphyrmiitx_converter_first);
assign main_ethphy_liteethphyrmiitx_converter_source_last = (main_ethphy_liteethphyrmiitx_converter_sink_last & main_ethphy_liteethphyrmiitx_converter_last);
assign main_ethphy_liteethphyrmiitx_converter_sink_ready = (main_ethphy_liteethphyrmiitx_converter_last & main_ethphy_liteethphyrmiitx_converter_source_ready);
always @(*) begin
    main_ethphy_liteethphyrmiitx_converter_source_payload_data <= 2'd0;
    case (main_ethphy_liteethphyrmiitx_converter_mux)
        1'd0: begin
            main_ethphy_liteethphyrmiitx_converter_source_payload_data <= main_ethphy_liteethphyrmiitx_converter_sink_payload_data[1:0];
        end
        1'd1: begin
            main_ethphy_liteethphyrmiitx_converter_source_payload_data <= main_ethphy_liteethphyrmiitx_converter_sink_payload_data[3:2];
        end
        2'd2: begin
            main_ethphy_liteethphyrmiitx_converter_source_payload_data <= main_ethphy_liteethphyrmiitx_converter_sink_payload_data[5:4];
        end
        default: begin
            main_ethphy_liteethphyrmiitx_converter_source_payload_data <= main_ethphy_liteethphyrmiitx_converter_sink_payload_data[7:6];
        end
    endcase
end
assign main_ethphy_liteethphyrmiitx_converter_source_payload_valid_token_count = main_ethphy_liteethphyrmiitx_converter_last;
always @(*) begin
    main_ethphy_liteethphyrmiirx_crs_first <= 1'd0;
    main_ethphy_liteethphyrmiirx_crs_last <= 1'd0;
    if (main_ethphy_liteethphyrmiirx_ce) begin
        main_ethphy_liteethphyrmiirx_crs_first <= (main_ethphy_liteethphyrmiirx_crs_dv & (main_ethphy_liteethphyrmiirx_rx_data != 1'd0));
        main_ethphy_liteethphyrmiirx_crs_last <= ((~main_ethphy_liteethphyrmiirx_crs_dv) & (~main_ethphy_liteethphyrmiirx_crs_dv_d));
    end
end
assign main_ethphy_liteethphyrmiirx_delay_sink_valid = (main_ethphy_liteethphyrmiirx_crs_first | (main_ethphy_liteethphyrmiirx_crs_run & main_ethphy_liteethphyrmiirx_ce));
assign main_ethphy_liteethphyrmiirx_delay_sink_payload_data = main_ethphy_liteethphyrmiirx_rx_data;
assign main_ethphy_liteethphyrmiirx_converter_sink_payload_data = main_ethphy_liteethphyrmiirx_delay_source_payload_data;
always @(*) begin
    main_ethphy_liteethphyrmiirx_converter_sink_last <= 1'd0;
    main_ethphy_liteethphyrmiirx_converter_sink_valid <= 1'd0;
    main_ethphy_liteethphyrmiirx_delay_source_ready <= 1'd0;
    main_ethphy_liteethphyrmiirx_delay_source_ready <= (~main_ethphy_liteethphyrmiirx_crs_run);
    if ((main_ethphy_liteethphyrmiirx_crs_run & main_ethphy_liteethphyrmiirx_ce)) begin
        main_ethphy_liteethphyrmiirx_converter_sink_valid <= main_ethphy_liteethphyrmiirx_delay_source_valid;
        main_ethphy_liteethphyrmiirx_delay_source_ready <= main_ethphy_liteethphyrmiirx_converter_sink_ready;
        main_ethphy_liteethphyrmiirx_converter_sink_last <= main_ethphy_liteethphyrmiirx_crs_last;
    end
end
assign main_ethphy_liteethphyrmiirx_source_source_valid0 = main_ethphy_liteethphyrmiirx_source_source_valid1;
assign main_ethphy_liteethphyrmiirx_source_source_ready1 = main_ethphy_liteethphyrmiirx_source_source_ready0;
assign main_ethphy_liteethphyrmiirx_source_source_first0 = main_ethphy_liteethphyrmiirx_source_source_first1;
assign main_ethphy_liteethphyrmiirx_source_source_last0 = main_ethphy_liteethphyrmiirx_source_source_last1;
assign main_ethphy_liteethphyrmiirx_source_source_payload_data0 = main_ethphy_liteethphyrmiirx_source_source_payload_data1;
assign main_ethphy_liteethphyrmiirx_speed0 = main_ethphy_liteethphyrmiirx_speed1;
assign main_ethphy_liteethphyrmiirx_ce = (main_ethphy_liteethphyrmiirx_timer == 1'd0);
assign main_ethphy_liteethphyrmiirx_source_source_valid1 = main_ethphy_liteethphyrmiirx_converter_source_valid;
assign main_ethphy_liteethphyrmiirx_converter_source_ready = main_ethphy_liteethphyrmiirx_source_source_ready1;
assign main_ethphy_liteethphyrmiirx_source_source_first1 = main_ethphy_liteethphyrmiirx_converter_source_first;
assign main_ethphy_liteethphyrmiirx_source_source_last1 = main_ethphy_liteethphyrmiirx_converter_source_last;
assign main_ethphy_liteethphyrmiirx_source_source_payload_data1 = main_ethphy_liteethphyrmiirx_converter_source_payload_data;
assign main_ethphy_liteethphyrmiirx_converter_sink_ready = ((~main_ethphy_liteethphyrmiirx_converter_strobe_all) | main_ethphy_liteethphyrmiirx_converter_source_ready);
assign main_ethphy_liteethphyrmiirx_converter_source_valid = main_ethphy_liteethphyrmiirx_converter_strobe_all;
assign main_ethphy_liteethphyrmiirx_converter_load_part = (main_ethphy_liteethphyrmiirx_converter_sink_valid & main_ethphy_liteethphyrmiirx_converter_sink_ready);
assign main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_ready = ((~main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_valid) | main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_ready);
assign main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_valid = main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_valid;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_ready = main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_ready;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_first = main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_first;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_last = main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_last;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_payload_data = main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_payload_data;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_valid = main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_valid;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_ready = main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_ready;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_first = main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_first;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_last = main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_last;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_payload_data = main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_payload_data;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_ready = ((~main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_valid) | main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_ready);
assign main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_valid = main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_valid;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_ready = main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_ready;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_first = main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_first;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_last = main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_last;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_payload_data = main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_payload_data;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_valid = main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_valid;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_ready = main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_ready;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_first = main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_first;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_last = main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_last;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_payload_data = main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_payload_data;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_valid = main_ethphy_liteethphyrmiirx_delay_sink_valid;
assign main_ethphy_liteethphyrmiirx_delay_sink_ready = main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_ready;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_first = main_ethphy_liteethphyrmiirx_delay_sink_first;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_last = main_ethphy_liteethphyrmiirx_delay_sink_last;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_sink_sink_payload_data = main_ethphy_liteethphyrmiirx_delay_sink_payload_data;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_valid = main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_valid;
assign main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_ready = main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_ready;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_first = main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_first;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_last = main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_last;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_sink_sink_payload_data = main_ethphy_liteethphyrmiirx_delay_buffer0_source_source_payload_data;
assign main_ethphy_liteethphyrmiirx_delay_source_valid = main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_valid;
assign main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_ready = main_ethphy_liteethphyrmiirx_delay_source_ready;
assign main_ethphy_liteethphyrmiirx_delay_source_first = main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_first;
assign main_ethphy_liteethphyrmiirx_delay_source_last = main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_last;
assign main_ethphy_liteethphyrmiirx_delay_source_payload_data = main_ethphy_liteethphyrmiirx_delay_buffer1_source_source_payload_data;
always @(*) begin
    builder_liteethphyrmii_next_state <= 2'd0;
    main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value0 <= 10'd0;
    main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value_ce0 <= 1'd0;
    main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value1 <= 1'd0;
    main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value_ce1 <= 1'd0;
    builder_liteethphyrmii_next_state <= builder_liteethphyrmii_state;
    case (builder_liteethphyrmii_state)
        1'd1: begin
            main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value0 <= (main_ethphy_liteethphyrmiirx_count + 1'd1);
            main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value_ce0 <= 1'd1;
            if (main_ethphy_liteethphyrmiirx_rx_data_i[0]) begin
                if ((main_ethphy_liteethphyrmiirx_count < 5'd20)) begin
                    main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value1 <= 1'd1;
                    main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value_ce1 <= 1'd1;
                end else begin
                    main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value1 <= 1'd0;
                    main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value_ce1 <= 1'd1;
                end
                builder_liteethphyrmii_next_state <= 2'd2;
            end
            if ((~main_ethphy_liteethphyrmiirx_crs_dv_i)) begin
                builder_liteethphyrmii_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (main_ethphy_liteethphyrmiirx_crs_last) begin
                builder_liteethphyrmii_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_ethphy_liteethphyrmiirx_crs_dv_i) begin
                main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value0 <= 1'd0;
                main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value_ce0 <= 1'd1;
                builder_liteethphyrmii_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_core_sink_valid = main_basesoc_wishbone_interface_source_valid;
assign main_basesoc_wishbone_interface_source_ready = main_basesoc_core_sink_ready;
assign main_basesoc_core_sink_first = main_basesoc_wishbone_interface_source_first;
assign main_basesoc_core_sink_last = main_basesoc_wishbone_interface_source_last;
assign main_basesoc_core_sink_payload_data = main_basesoc_wishbone_interface_source_payload_data;
assign main_basesoc_core_sink_payload_last_be = main_basesoc_wishbone_interface_source_payload_last_be;
assign main_basesoc_core_sink_payload_error = main_basesoc_wishbone_interface_source_payload_error;
assign main_basesoc_wishbone_interface_sink_valid = main_basesoc_core_source_valid;
assign main_basesoc_core_source_ready = main_basesoc_wishbone_interface_sink_ready;
assign main_basesoc_wishbone_interface_sink_first = main_basesoc_core_source_first;
assign main_basesoc_wishbone_interface_sink_last = main_basesoc_core_source_last;
assign main_basesoc_wishbone_interface_sink_payload_data = main_basesoc_core_source_payload_data;
assign main_basesoc_wishbone_interface_sink_payload_last_be = main_basesoc_core_source_payload_last_be;
assign main_basesoc_wishbone_interface_sink_payload_error = main_basesoc_core_source_payload_error;
assign main_basesoc_core_tx_cdc_cdc_sink_valid = main_basesoc_core_tx_cdc_sink_sink_valid;
assign main_basesoc_core_tx_cdc_sink_sink_ready = main_basesoc_core_tx_cdc_cdc_sink_ready;
assign main_basesoc_core_tx_cdc_cdc_sink_first = main_basesoc_core_tx_cdc_sink_sink_first;
assign main_basesoc_core_tx_cdc_cdc_sink_last = main_basesoc_core_tx_cdc_sink_sink_last;
assign main_basesoc_core_tx_cdc_cdc_sink_payload_data = main_basesoc_core_tx_cdc_sink_sink_payload_data;
assign main_basesoc_core_tx_cdc_cdc_sink_payload_last_be = main_basesoc_core_tx_cdc_sink_sink_payload_last_be;
assign main_basesoc_core_tx_cdc_cdc_sink_payload_error = main_basesoc_core_tx_cdc_sink_sink_payload_error;
assign main_basesoc_core_tx_cdc_source_source_valid = main_basesoc_core_tx_cdc_cdc_source_valid;
assign main_basesoc_core_tx_cdc_cdc_source_ready = main_basesoc_core_tx_cdc_source_source_ready;
assign main_basesoc_core_tx_cdc_source_source_first = main_basesoc_core_tx_cdc_cdc_source_first;
assign main_basesoc_core_tx_cdc_source_source_last = main_basesoc_core_tx_cdc_cdc_source_last;
assign main_basesoc_core_tx_cdc_source_source_payload_data = main_basesoc_core_tx_cdc_cdc_source_payload_data;
assign main_basesoc_core_tx_cdc_source_source_payload_last_be = main_basesoc_core_tx_cdc_cdc_source_payload_last_be;
assign main_basesoc_core_tx_cdc_source_source_payload_error = main_basesoc_core_tx_cdc_cdc_source_payload_error;
assign main_basesoc_core_tx_cdc_cdc_asyncfifo_din = {main_basesoc_core_tx_cdc_cdc_fifo_in_last, main_basesoc_core_tx_cdc_cdc_fifo_in_first, main_basesoc_core_tx_cdc_cdc_fifo_in_payload_error, main_basesoc_core_tx_cdc_cdc_fifo_in_payload_last_be, main_basesoc_core_tx_cdc_cdc_fifo_in_payload_data};
assign {main_basesoc_core_tx_cdc_cdc_fifo_out_last, main_basesoc_core_tx_cdc_cdc_fifo_out_first, main_basesoc_core_tx_cdc_cdc_fifo_out_payload_error, main_basesoc_core_tx_cdc_cdc_fifo_out_payload_last_be, main_basesoc_core_tx_cdc_cdc_fifo_out_payload_data} = main_basesoc_core_tx_cdc_cdc_asyncfifo_dout;
assign main_basesoc_core_tx_cdc_cdc_sink_ready = main_basesoc_core_tx_cdc_cdc_asyncfifo_writable;
assign main_basesoc_core_tx_cdc_cdc_asyncfifo_we = main_basesoc_core_tx_cdc_cdc_sink_valid;
assign main_basesoc_core_tx_cdc_cdc_fifo_in_first = main_basesoc_core_tx_cdc_cdc_sink_first;
assign main_basesoc_core_tx_cdc_cdc_fifo_in_last = main_basesoc_core_tx_cdc_cdc_sink_last;
assign main_basesoc_core_tx_cdc_cdc_fifo_in_payload_data = main_basesoc_core_tx_cdc_cdc_sink_payload_data;
assign main_basesoc_core_tx_cdc_cdc_fifo_in_payload_last_be = main_basesoc_core_tx_cdc_cdc_sink_payload_last_be;
assign main_basesoc_core_tx_cdc_cdc_fifo_in_payload_error = main_basesoc_core_tx_cdc_cdc_sink_payload_error;
assign main_basesoc_core_tx_cdc_cdc_source_valid = main_basesoc_core_tx_cdc_cdc_asyncfifo_readable;
assign main_basesoc_core_tx_cdc_cdc_source_first = main_basesoc_core_tx_cdc_cdc_fifo_out_first;
assign main_basesoc_core_tx_cdc_cdc_source_last = main_basesoc_core_tx_cdc_cdc_fifo_out_last;
assign main_basesoc_core_tx_cdc_cdc_source_payload_data = main_basesoc_core_tx_cdc_cdc_fifo_out_payload_data;
assign main_basesoc_core_tx_cdc_cdc_source_payload_last_be = main_basesoc_core_tx_cdc_cdc_fifo_out_payload_last_be;
assign main_basesoc_core_tx_cdc_cdc_source_payload_error = main_basesoc_core_tx_cdc_cdc_fifo_out_payload_error;
assign main_basesoc_core_tx_cdc_cdc_asyncfifo_re = main_basesoc_core_tx_cdc_cdc_source_ready;
assign main_basesoc_core_tx_cdc_cdc_graycounter0_ce = (main_basesoc_core_tx_cdc_cdc_asyncfifo_writable & main_basesoc_core_tx_cdc_cdc_asyncfifo_we);
assign main_basesoc_core_tx_cdc_cdc_graycounter1_ce = (main_basesoc_core_tx_cdc_cdc_asyncfifo_readable & main_basesoc_core_tx_cdc_cdc_asyncfifo_re);
assign main_basesoc_core_tx_cdc_cdc_asyncfifo_writable = (((main_basesoc_core_tx_cdc_cdc_graycounter0_q[5] == main_basesoc_core_tx_cdc_cdc_consume_wdomain[5]) | (main_basesoc_core_tx_cdc_cdc_graycounter0_q[4] == main_basesoc_core_tx_cdc_cdc_consume_wdomain[4])) | (main_basesoc_core_tx_cdc_cdc_graycounter0_q[3:0] != main_basesoc_core_tx_cdc_cdc_consume_wdomain[3:0]));
assign main_basesoc_core_tx_cdc_cdc_asyncfifo_readable = (main_basesoc_core_tx_cdc_cdc_graycounter1_q != main_basesoc_core_tx_cdc_cdc_produce_rdomain);
assign main_basesoc_core_tx_cdc_cdc_wrport_adr = main_basesoc_core_tx_cdc_cdc_graycounter0_q_binary[4:0];
assign main_basesoc_core_tx_cdc_cdc_wrport_dat_w = main_basesoc_core_tx_cdc_cdc_asyncfifo_din;
assign main_basesoc_core_tx_cdc_cdc_wrport_we = main_basesoc_core_tx_cdc_cdc_graycounter0_ce;
assign main_basesoc_core_tx_cdc_cdc_rdport_adr = main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary[4:0];
assign main_basesoc_core_tx_cdc_cdc_asyncfifo_dout = main_basesoc_core_tx_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_basesoc_core_tx_cdc_cdc_graycounter0_q_next_binary <= 6'd0;
    if (main_basesoc_core_tx_cdc_cdc_graycounter0_ce) begin
        main_basesoc_core_tx_cdc_cdc_graycounter0_q_next_binary <= (main_basesoc_core_tx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_basesoc_core_tx_cdc_cdc_graycounter0_q_next_binary <= main_basesoc_core_tx_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_basesoc_core_tx_cdc_cdc_graycounter0_q_next = (main_basesoc_core_tx_cdc_cdc_graycounter0_q_next_binary ^ main_basesoc_core_tx_cdc_cdc_graycounter0_q_next_binary[5:1]);
always @(*) begin
    main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary <= 6'd0;
    if (main_basesoc_core_tx_cdc_cdc_graycounter1_ce) begin
        main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary <= (main_basesoc_core_tx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary <= main_basesoc_core_tx_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_basesoc_core_tx_cdc_cdc_graycounter1_q_next = (main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary ^ main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary[5:1]);
assign main_basesoc_core_tx_converter_converter_sink_valid = main_basesoc_core_tx_converter_sink_valid;
assign main_basesoc_core_tx_converter_converter_sink_first = main_basesoc_core_tx_converter_sink_first;
assign main_basesoc_core_tx_converter_converter_sink_last = main_basesoc_core_tx_converter_sink_last;
assign main_basesoc_core_tx_converter_sink_ready = main_basesoc_core_tx_converter_converter_sink_ready;
always @(*) begin
    main_basesoc_core_tx_converter_converter_sink_payload_data <= 40'd0;
    main_basesoc_core_tx_converter_converter_sink_payload_data[7:0] <= main_basesoc_core_tx_converter_sink_payload_data[7:0];
    main_basesoc_core_tx_converter_converter_sink_payload_data[8] <= main_basesoc_core_tx_converter_sink_payload_last_be[0];
    main_basesoc_core_tx_converter_converter_sink_payload_data[9] <= main_basesoc_core_tx_converter_sink_payload_error[0];
    main_basesoc_core_tx_converter_converter_sink_payload_data[17:10] <= main_basesoc_core_tx_converter_sink_payload_data[15:8];
    main_basesoc_core_tx_converter_converter_sink_payload_data[18] <= main_basesoc_core_tx_converter_sink_payload_last_be[1];
    main_basesoc_core_tx_converter_converter_sink_payload_data[19] <= main_basesoc_core_tx_converter_sink_payload_error[1];
    main_basesoc_core_tx_converter_converter_sink_payload_data[27:20] <= main_basesoc_core_tx_converter_sink_payload_data[23:16];
    main_basesoc_core_tx_converter_converter_sink_payload_data[28] <= main_basesoc_core_tx_converter_sink_payload_last_be[2];
    main_basesoc_core_tx_converter_converter_sink_payload_data[29] <= main_basesoc_core_tx_converter_sink_payload_error[2];
    main_basesoc_core_tx_converter_converter_sink_payload_data[37:30] <= main_basesoc_core_tx_converter_sink_payload_data[31:24];
    main_basesoc_core_tx_converter_converter_sink_payload_data[38] <= main_basesoc_core_tx_converter_sink_payload_last_be[3];
    main_basesoc_core_tx_converter_converter_sink_payload_data[39] <= main_basesoc_core_tx_converter_sink_payload_error[3];
end
assign main_basesoc_core_tx_converter_source_valid = main_basesoc_core_tx_converter_source_source_valid;
assign main_basesoc_core_tx_converter_source_first = main_basesoc_core_tx_converter_source_source_first;
assign main_basesoc_core_tx_converter_source_last = main_basesoc_core_tx_converter_source_source_last;
assign main_basesoc_core_tx_converter_source_source_ready = main_basesoc_core_tx_converter_source_ready;
assign {main_basesoc_core_tx_converter_source_payload_error, main_basesoc_core_tx_converter_source_payload_last_be, main_basesoc_core_tx_converter_source_payload_data} = main_basesoc_core_tx_converter_source_source_payload_data;
assign main_basesoc_core_tx_converter_source_source_valid = main_basesoc_core_tx_converter_converter_source_valid;
assign main_basesoc_core_tx_converter_converter_source_ready = main_basesoc_core_tx_converter_source_source_ready;
assign main_basesoc_core_tx_converter_source_source_first = main_basesoc_core_tx_converter_converter_source_first;
assign main_basesoc_core_tx_converter_source_source_last = main_basesoc_core_tx_converter_converter_source_last;
assign main_basesoc_core_tx_converter_source_source_payload_data = main_basesoc_core_tx_converter_converter_source_payload_data;
assign main_basesoc_core_tx_converter_converter_first = (main_basesoc_core_tx_converter_converter_mux == 1'd0);
assign main_basesoc_core_tx_converter_converter_last = (main_basesoc_core_tx_converter_converter_mux == 2'd3);
assign main_basesoc_core_tx_converter_converter_source_valid = main_basesoc_core_tx_converter_converter_sink_valid;
assign main_basesoc_core_tx_converter_converter_source_first = (main_basesoc_core_tx_converter_converter_sink_first & main_basesoc_core_tx_converter_converter_first);
assign main_basesoc_core_tx_converter_converter_source_last = (main_basesoc_core_tx_converter_converter_sink_last & main_basesoc_core_tx_converter_converter_last);
assign main_basesoc_core_tx_converter_converter_sink_ready = (main_basesoc_core_tx_converter_converter_last & main_basesoc_core_tx_converter_converter_source_ready);
always @(*) begin
    main_basesoc_core_tx_converter_converter_source_payload_data <= 10'd0;
    case (main_basesoc_core_tx_converter_converter_mux)
        1'd0: begin
            main_basesoc_core_tx_converter_converter_source_payload_data <= main_basesoc_core_tx_converter_converter_sink_payload_data[9:0];
        end
        1'd1: begin
            main_basesoc_core_tx_converter_converter_source_payload_data <= main_basesoc_core_tx_converter_converter_sink_payload_data[19:10];
        end
        2'd2: begin
            main_basesoc_core_tx_converter_converter_source_payload_data <= main_basesoc_core_tx_converter_converter_sink_payload_data[29:20];
        end
        default: begin
            main_basesoc_core_tx_converter_converter_source_payload_data <= main_basesoc_core_tx_converter_converter_sink_payload_data[39:30];
        end
    endcase
end
assign main_basesoc_core_tx_converter_converter_source_payload_valid_token_count = main_basesoc_core_tx_converter_converter_last;
assign main_basesoc_core_tx_last_be_last_handler_sink_valid = main_basesoc_core_tx_last_be_sink_sink_valid;
assign main_basesoc_core_tx_last_be_sink_sink_ready = main_basesoc_core_tx_last_be_last_handler_sink_ready;
assign main_basesoc_core_tx_last_be_last_handler_sink_first = main_basesoc_core_tx_last_be_sink_sink_first;
assign main_basesoc_core_tx_last_be_last_handler_sink_last = main_basesoc_core_tx_last_be_sink_sink_last;
assign main_basesoc_core_tx_last_be_last_handler_sink_payload_data = main_basesoc_core_tx_last_be_sink_sink_payload_data;
assign main_basesoc_core_tx_last_be_last_handler_sink_payload_last_be = main_basesoc_core_tx_last_be_sink_sink_payload_last_be;
assign main_basesoc_core_tx_last_be_last_handler_sink_payload_error = main_basesoc_core_tx_last_be_sink_sink_payload_error;
assign main_basesoc_core_tx_last_be_source_source_valid = main_basesoc_core_tx_last_be_last_handler_source_valid;
assign main_basesoc_core_tx_last_be_last_handler_source_ready = main_basesoc_core_tx_last_be_source_source_ready;
assign main_basesoc_core_tx_last_be_source_source_first = main_basesoc_core_tx_last_be_last_handler_source_first;
assign main_basesoc_core_tx_last_be_source_source_last = main_basesoc_core_tx_last_be_last_handler_source_last;
assign main_basesoc_core_tx_last_be_source_source_payload_data = main_basesoc_core_tx_last_be_last_handler_source_payload_data;
assign main_basesoc_core_tx_last_be_source_source_payload_last_be = main_basesoc_core_tx_last_be_last_handler_source_payload_last_be;
assign main_basesoc_core_tx_last_be_source_source_payload_error = main_basesoc_core_tx_last_be_last_handler_source_payload_error;
always @(*) begin
    builder_txdatapath_liteethmactxlastbe_next_state <= 1'd0;
    main_basesoc_core_tx_last_be_last_handler_sink_ready <= 1'd0;
    main_basesoc_core_tx_last_be_last_handler_source_first <= 1'd0;
    main_basesoc_core_tx_last_be_last_handler_source_last <= 1'd0;
    main_basesoc_core_tx_last_be_last_handler_source_payload_data <= 8'd0;
    main_basesoc_core_tx_last_be_last_handler_source_payload_error <= 1'd0;
    main_basesoc_core_tx_last_be_last_handler_source_payload_last_be <= 1'd0;
    main_basesoc_core_tx_last_be_last_handler_source_valid <= 1'd0;
    builder_txdatapath_liteethmactxlastbe_next_state <= builder_txdatapath_liteethmactxlastbe_state;
    case (builder_txdatapath_liteethmactxlastbe_state)
        1'd1: begin
            main_basesoc_core_tx_last_be_last_handler_sink_ready <= 1'd1;
            if ((main_basesoc_core_tx_last_be_last_handler_sink_valid & main_basesoc_core_tx_last_be_last_handler_sink_last)) begin
                builder_txdatapath_liteethmactxlastbe_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_core_tx_last_be_last_handler_source_valid <= main_basesoc_core_tx_last_be_last_handler_sink_valid;
            main_basesoc_core_tx_last_be_last_handler_sink_ready <= main_basesoc_core_tx_last_be_last_handler_source_ready;
            main_basesoc_core_tx_last_be_last_handler_source_first <= main_basesoc_core_tx_last_be_last_handler_sink_first;
            main_basesoc_core_tx_last_be_last_handler_source_last <= main_basesoc_core_tx_last_be_last_handler_sink_last;
            main_basesoc_core_tx_last_be_last_handler_source_payload_data <= main_basesoc_core_tx_last_be_last_handler_sink_payload_data;
            main_basesoc_core_tx_last_be_last_handler_source_payload_last_be <= main_basesoc_core_tx_last_be_last_handler_sink_payload_last_be;
            main_basesoc_core_tx_last_be_last_handler_source_payload_error <= main_basesoc_core_tx_last_be_last_handler_sink_payload_error;
            main_basesoc_core_tx_last_be_last_handler_source_last <= (main_basesoc_core_tx_last_be_last_handler_sink_payload_last_be != 1'd0);
            if ((main_basesoc_core_tx_last_be_last_handler_sink_valid & main_basesoc_core_tx_last_be_last_handler_sink_ready)) begin
                if ((main_basesoc_core_tx_last_be_last_handler_source_last & (~main_basesoc_core_tx_last_be_last_handler_sink_last))) begin
                    builder_txdatapath_liteethmactxlastbe_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_basesoc_core_tx_padding_counter_done = (main_basesoc_core_tx_padding_counter >= 6'd59);
always @(*) begin
    builder_txdatapath_liteethmacpaddinginserter_next_state <= 1'd0;
    main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= 16'd0;
    main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd0;
    main_basesoc_core_tx_padding_sink_ready <= 1'd0;
    main_basesoc_core_tx_padding_source_first <= 1'd0;
    main_basesoc_core_tx_padding_source_last <= 1'd0;
    main_basesoc_core_tx_padding_source_payload_data <= 8'd0;
    main_basesoc_core_tx_padding_source_payload_error <= 1'd0;
    main_basesoc_core_tx_padding_source_payload_last_be <= 1'd0;
    main_basesoc_core_tx_padding_source_valid <= 1'd0;
    builder_txdatapath_liteethmacpaddinginserter_next_state <= builder_txdatapath_liteethmacpaddinginserter_state;
    case (builder_txdatapath_liteethmacpaddinginserter_state)
        1'd1: begin
            main_basesoc_core_tx_padding_source_valid <= 1'd1;
            if (main_basesoc_core_tx_padding_counter_done) begin
                main_basesoc_core_tx_padding_source_payload_last_be <= 1'd1;
                main_basesoc_core_tx_padding_source_last <= 1'd1;
            end
            main_basesoc_core_tx_padding_source_payload_data <= 1'd0;
            if ((main_basesoc_core_tx_padding_source_valid & main_basesoc_core_tx_padding_source_ready)) begin
                main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= (main_basesoc_core_tx_padding_counter + 1'd1);
                main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                if (main_basesoc_core_tx_padding_counter_done) begin
                    main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= 1'd0;
                    main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                    builder_txdatapath_liteethmacpaddinginserter_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_core_tx_padding_source_valid <= main_basesoc_core_tx_padding_sink_valid;
            main_basesoc_core_tx_padding_sink_ready <= main_basesoc_core_tx_padding_source_ready;
            main_basesoc_core_tx_padding_source_first <= main_basesoc_core_tx_padding_sink_first;
            main_basesoc_core_tx_padding_source_last <= main_basesoc_core_tx_padding_sink_last;
            main_basesoc_core_tx_padding_source_payload_data <= main_basesoc_core_tx_padding_sink_payload_data;
            main_basesoc_core_tx_padding_source_payload_last_be <= main_basesoc_core_tx_padding_sink_payload_last_be;
            main_basesoc_core_tx_padding_source_payload_error <= main_basesoc_core_tx_padding_sink_payload_error;
            if ((main_basesoc_core_tx_padding_source_valid & main_basesoc_core_tx_padding_source_ready)) begin
                main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= (main_basesoc_core_tx_padding_counter + 1'd1);
                main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                if (main_basesoc_core_tx_padding_sink_last) begin
                    if ((~main_basesoc_core_tx_padding_counter_done)) begin
                        main_basesoc_core_tx_padding_source_last <= 1'd0;
                        main_basesoc_core_tx_padding_source_payload_last_be <= 1'd0;
                        builder_txdatapath_liteethmacpaddinginserter_next_state <= 1'd1;
                    end else begin
                        if (((main_basesoc_core_tx_padding_counter == 6'd59) & (main_basesoc_core_tx_padding_sink_payload_last_be < 1'd1))) begin
                            main_basesoc_core_tx_padding_source_payload_last_be <= 1'd1;
                        end else begin
                            main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= 1'd0;
                            main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                        end
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_core_tx_crc_data0 = main_basesoc_core_tx_crc_sink_payload_data;
assign main_basesoc_core_tx_crc_be = main_basesoc_core_tx_crc_sink_payload_last_be;
assign main_basesoc_core_tx_crc_cnt_done = (main_basesoc_core_tx_crc_cnt == 1'd0);
assign main_basesoc_core_tx_crc_sink_valid = main_basesoc_core_tx_crc_source_source_valid;
assign main_basesoc_core_tx_crc_source_source_ready = main_basesoc_core_tx_crc_sink_ready;
assign main_basesoc_core_tx_crc_sink_first = main_basesoc_core_tx_crc_source_source_first;
assign main_basesoc_core_tx_crc_sink_last = main_basesoc_core_tx_crc_source_source_last;
assign main_basesoc_core_tx_crc_sink_payload_data = main_basesoc_core_tx_crc_source_source_payload_data;
assign main_basesoc_core_tx_crc_sink_payload_last_be = main_basesoc_core_tx_crc_source_source_payload_last_be;
assign main_basesoc_core_tx_crc_sink_payload_error = main_basesoc_core_tx_crc_source_source_payload_error;
assign main_basesoc_core_tx_crc_data1 = main_basesoc_core_tx_crc_data0;
assign main_basesoc_core_tx_crc_crc_prev = main_basesoc_core_tx_crc_reg;
always @(*) begin
    main_basesoc_core_tx_crc_error <= 1'd0;
    main_basesoc_core_tx_crc_value <= 32'd0;
    if (main_basesoc_core_tx_crc_be) begin
        main_basesoc_core_tx_crc_value <= ({main_basesoc_core_tx_crc_crc_next[0], main_basesoc_core_tx_crc_crc_next[1], main_basesoc_core_tx_crc_crc_next[2], main_basesoc_core_tx_crc_crc_next[3], main_basesoc_core_tx_crc_crc_next[4], main_basesoc_core_tx_crc_crc_next[5], main_basesoc_core_tx_crc_crc_next[6], main_basesoc_core_tx_crc_crc_next[7], main_basesoc_core_tx_crc_crc_next[8], main_basesoc_core_tx_crc_crc_next[9], main_basesoc_core_tx_crc_crc_next[10], main_basesoc_core_tx_crc_crc_next[11], main_basesoc_core_tx_crc_crc_next[12], main_basesoc_core_tx_crc_crc_next[13], main_basesoc_core_tx_crc_crc_next[14], main_basesoc_core_tx_crc_crc_next[15], main_basesoc_core_tx_crc_crc_next[16], main_basesoc_core_tx_crc_crc_next[17], main_basesoc_core_tx_crc_crc_next[18], main_basesoc_core_tx_crc_crc_next[19], main_basesoc_core_tx_crc_crc_next[20], main_basesoc_core_tx_crc_crc_next[21], main_basesoc_core_tx_crc_crc_next[22], main_basesoc_core_tx_crc_crc_next[23], main_basesoc_core_tx_crc_crc_next[24], main_basesoc_core_tx_crc_crc_next[25], main_basesoc_core_tx_crc_crc_next[26], main_basesoc_core_tx_crc_crc_next[27], main_basesoc_core_tx_crc_crc_next[28], main_basesoc_core_tx_crc_crc_next[29], main_basesoc_core_tx_crc_crc_next[30], main_basesoc_core_tx_crc_crc_next[31]} ^ 32'd4294967295);
        main_basesoc_core_tx_crc_error <= (main_basesoc_core_tx_crc_crc_next != 32'd3338984827);
    end
end
always @(*) begin
    main_basesoc_core_tx_crc_crc_next <= 32'd0;
    main_basesoc_core_tx_crc_crc_next[0] <= (((main_basesoc_core_tx_crc_crc_prev[24] ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[1] <= (((((((main_basesoc_core_tx_crc_crc_prev[25] ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[2] <= (((((((((main_basesoc_core_tx_crc_crc_prev[26] ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[3] <= (((((((main_basesoc_core_tx_crc_crc_prev[27] ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]);
    main_basesoc_core_tx_crc_crc_next[4] <= (((((((((main_basesoc_core_tx_crc_crc_prev[28] ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[5] <= (((((((((((((main_basesoc_core_tx_crc_crc_prev[29] ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[6] <= (((((((((((main_basesoc_core_tx_crc_crc_prev[30] ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]);
    main_basesoc_core_tx_crc_crc_next[7] <= (((((((((main_basesoc_core_tx_crc_crc_prev[31] ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[8] <= ((((((((main_basesoc_core_tx_crc_crc_prev[0] ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_data1[6]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[9] <= ((((((((main_basesoc_core_tx_crc_crc_prev[1] ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_data1[6]);
    main_basesoc_core_tx_crc_crc_next[10] <= ((((((((main_basesoc_core_tx_crc_crc_prev[2] ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[11] <= ((((((((main_basesoc_core_tx_crc_crc_prev[3] ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_data1[6]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[12] <= ((((((((((((main_basesoc_core_tx_crc_crc_prev[4] ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_data1[6]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[13] <= ((((((((((((main_basesoc_core_tx_crc_crc_prev[5] ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]);
    main_basesoc_core_tx_crc_crc_next[14] <= ((((((((((main_basesoc_core_tx_crc_crc_prev[6] ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]);
    main_basesoc_core_tx_crc_crc_next[15] <= ((((((((main_basesoc_core_tx_crc_crc_prev[7] ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]);
    main_basesoc_core_tx_crc_crc_next[16] <= ((((((main_basesoc_core_tx_crc_crc_prev[8] ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[17] <= ((((((main_basesoc_core_tx_crc_crc_prev[9] ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_data1[6]);
    main_basesoc_core_tx_crc_crc_next[18] <= ((((((main_basesoc_core_tx_crc_crc_prev[10] ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]);
    main_basesoc_core_tx_crc_crc_next[19] <= ((((main_basesoc_core_tx_crc_crc_prev[11] ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]);
    main_basesoc_core_tx_crc_crc_next[20] <= ((main_basesoc_core_tx_crc_crc_prev[12] ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]);
    main_basesoc_core_tx_crc_crc_next[21] <= ((main_basesoc_core_tx_crc_crc_prev[13] ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]);
    main_basesoc_core_tx_crc_crc_next[22] <= ((main_basesoc_core_tx_crc_crc_prev[14] ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[23] <= ((((((main_basesoc_core_tx_crc_crc_prev[15] ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_data1[6]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[24] <= ((((((main_basesoc_core_tx_crc_crc_prev[16] ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]);
    main_basesoc_core_tx_crc_crc_next[25] <= ((((main_basesoc_core_tx_crc_crc_prev[17] ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]);
    main_basesoc_core_tx_crc_crc_next[26] <= ((((((((main_basesoc_core_tx_crc_crc_prev[18] ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]) ^ main_basesoc_core_tx_crc_crc_prev[24]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_data1[7]);
    main_basesoc_core_tx_crc_crc_next[27] <= ((((((((main_basesoc_core_tx_crc_crc_prev[19] ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]) ^ main_basesoc_core_tx_crc_crc_prev[25]) ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_data1[6]);
    main_basesoc_core_tx_crc_crc_next[28] <= ((((((main_basesoc_core_tx_crc_crc_prev[20] ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]) ^ main_basesoc_core_tx_crc_crc_prev[26]) ^ main_basesoc_core_tx_crc_data1[5]);
    main_basesoc_core_tx_crc_crc_next[29] <= ((((((main_basesoc_core_tx_crc_crc_prev[21] ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_crc_prev[30]) ^ main_basesoc_core_tx_crc_data1[1]) ^ main_basesoc_core_tx_crc_crc_prev[27]) ^ main_basesoc_core_tx_crc_data1[4]);
    main_basesoc_core_tx_crc_crc_next[30] <= ((((main_basesoc_core_tx_crc_crc_prev[22] ^ main_basesoc_core_tx_crc_crc_prev[31]) ^ main_basesoc_core_tx_crc_data1[0]) ^ main_basesoc_core_tx_crc_crc_prev[28]) ^ main_basesoc_core_tx_crc_data1[3]);
    main_basesoc_core_tx_crc_crc_next[31] <= ((main_basesoc_core_tx_crc_crc_prev[23] ^ main_basesoc_core_tx_crc_crc_prev[29]) ^ main_basesoc_core_tx_crc_data1[2]);
end
always @(*) begin
    builder_txdatapath_bufferizeendpoints_next_state <= 2'd0;
    main_basesoc_core_tx_crc_ce <= 1'd0;
    main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0 <= 32'd0;
    main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0 <= 1'd0;
    main_basesoc_core_tx_crc_is_ongoing0 <= 1'd0;
    main_basesoc_core_tx_crc_is_ongoing1 <= 1'd0;
    main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 <= 1'd0;
    main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 <= 1'd0;
    main_basesoc_core_tx_crc_reset <= 1'd0;
    main_basesoc_core_tx_crc_sink_ready <= 1'd0;
    main_basesoc_core_tx_crc_source_first <= 1'd0;
    main_basesoc_core_tx_crc_source_last <= 1'd0;
    main_basesoc_core_tx_crc_source_payload_data <= 8'd0;
    main_basesoc_core_tx_crc_source_payload_error <= 1'd0;
    main_basesoc_core_tx_crc_source_payload_last_be <= 1'd0;
    main_basesoc_core_tx_crc_source_valid <= 1'd0;
    builder_txdatapath_bufferizeendpoints_next_state <= builder_txdatapath_bufferizeendpoints_state;
    case (builder_txdatapath_bufferizeendpoints_state)
        1'd1: begin
            main_basesoc_core_tx_crc_ce <= (main_basesoc_core_tx_crc_sink_valid & main_basesoc_core_tx_crc_source_ready);
            main_basesoc_core_tx_crc_source_valid <= main_basesoc_core_tx_crc_sink_valid;
            main_basesoc_core_tx_crc_sink_ready <= main_basesoc_core_tx_crc_source_ready;
            main_basesoc_core_tx_crc_source_first <= main_basesoc_core_tx_crc_sink_first;
            main_basesoc_core_tx_crc_source_last <= main_basesoc_core_tx_crc_sink_last;
            main_basesoc_core_tx_crc_source_payload_data <= main_basesoc_core_tx_crc_sink_payload_data;
            main_basesoc_core_tx_crc_source_payload_last_be <= main_basesoc_core_tx_crc_sink_payload_last_be;
            main_basesoc_core_tx_crc_source_payload_error <= main_basesoc_core_tx_crc_sink_payload_error;
            main_basesoc_core_tx_crc_source_last <= 1'd0;
            main_basesoc_core_tx_crc_source_payload_last_be <= 1'd0;
            if (main_basesoc_core_tx_crc_sink_last) begin
                if (main_basesoc_core_tx_crc_sink_payload_last_be) begin
                    main_basesoc_core_tx_crc_source_payload_data <= main_basesoc_core_tx_crc_sink_payload_data;
                end
                if ((1'd0 & (main_basesoc_core_tx_crc_sink_payload_last_be <= 4'd15))) begin
                    main_basesoc_core_tx_crc_source_last <= 1'd1;
                    main_basesoc_core_tx_crc_source_payload_last_be <= (main_basesoc_core_tx_crc_sink_payload_last_be <<< -3'd3);
                end
            end
            if (((main_basesoc_core_tx_crc_sink_valid & main_basesoc_core_tx_crc_sink_last) & main_basesoc_core_tx_crc_source_ready)) begin
                if ((1'd0 & (main_basesoc_core_tx_crc_sink_payload_last_be <= 4'd15))) begin
                    builder_txdatapath_bufferizeendpoints_next_state <= 1'd0;
                end else begin
                    main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0 <= main_basesoc_core_tx_crc_value;
                    main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
                    if (1'd0) begin
                        main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 <= (main_basesoc_core_tx_crc_sink_payload_last_be >>> 3'd4);
                        main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
                    end else begin
                        main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 <= main_basesoc_core_tx_crc_sink_payload_last_be;
                        main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
                    end
                    builder_txdatapath_bufferizeendpoints_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            main_basesoc_core_tx_crc_source_valid <= 1'd1;
            case (main_basesoc_core_tx_crc_cnt)
                1'd0: begin
                    main_basesoc_core_tx_crc_source_payload_data <= main_basesoc_core_tx_crc_crc_packet[31:24];
                end
                1'd1: begin
                    main_basesoc_core_tx_crc_source_payload_data <= main_basesoc_core_tx_crc_crc_packet[23:16];
                end
                2'd2: begin
                    main_basesoc_core_tx_crc_source_payload_data <= main_basesoc_core_tx_crc_crc_packet[15:8];
                end
                default: begin
                    main_basesoc_core_tx_crc_source_payload_data <= main_basesoc_core_tx_crc_crc_packet[7:0];
                end
            endcase
            if (main_basesoc_core_tx_crc_cnt_done) begin
                main_basesoc_core_tx_crc_source_last <= 1'd1;
                if (main_basesoc_core_tx_crc_source_ready) begin
                    builder_txdatapath_bufferizeendpoints_next_state <= 1'd0;
                end
            end
            main_basesoc_core_tx_crc_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_basesoc_core_tx_crc_reset <= 1'd1;
            main_basesoc_core_tx_crc_sink_ready <= 1'd1;
            if (main_basesoc_core_tx_crc_sink_valid) begin
                main_basesoc_core_tx_crc_sink_ready <= 1'd0;
                builder_txdatapath_bufferizeendpoints_next_state <= 1'd1;
            end
            main_basesoc_core_tx_crc_is_ongoing0 <= 1'd1;
        end
    endcase
end
assign main_basesoc_core_tx_crc_pipe_valid_sink_ready = ((~main_basesoc_core_tx_crc_pipe_valid_source_valid) | main_basesoc_core_tx_crc_pipe_valid_source_ready);
assign main_basesoc_core_tx_crc_pipe_valid_sink_valid = main_basesoc_core_tx_crc_sink_sink_valid;
assign main_basesoc_core_tx_crc_sink_sink_ready = main_basesoc_core_tx_crc_pipe_valid_sink_ready;
assign main_basesoc_core_tx_crc_pipe_valid_sink_first = main_basesoc_core_tx_crc_sink_sink_first;
assign main_basesoc_core_tx_crc_pipe_valid_sink_last = main_basesoc_core_tx_crc_sink_sink_last;
assign main_basesoc_core_tx_crc_pipe_valid_sink_payload_data = main_basesoc_core_tx_crc_sink_sink_payload_data;
assign main_basesoc_core_tx_crc_pipe_valid_sink_payload_last_be = main_basesoc_core_tx_crc_sink_sink_payload_last_be;
assign main_basesoc_core_tx_crc_pipe_valid_sink_payload_error = main_basesoc_core_tx_crc_sink_sink_payload_error;
assign main_basesoc_core_tx_crc_source_source_valid = main_basesoc_core_tx_crc_pipe_valid_source_valid;
assign main_basesoc_core_tx_crc_pipe_valid_source_ready = main_basesoc_core_tx_crc_source_source_ready;
assign main_basesoc_core_tx_crc_source_source_first = main_basesoc_core_tx_crc_pipe_valid_source_first;
assign main_basesoc_core_tx_crc_source_source_last = main_basesoc_core_tx_crc_pipe_valid_source_last;
assign main_basesoc_core_tx_crc_source_source_payload_data = main_basesoc_core_tx_crc_pipe_valid_source_payload_data;
assign main_basesoc_core_tx_crc_source_source_payload_last_be = main_basesoc_core_tx_crc_pipe_valid_source_payload_last_be;
assign main_basesoc_core_tx_crc_source_source_payload_error = main_basesoc_core_tx_crc_pipe_valid_source_payload_error;
assign main_basesoc_core_tx_preamble_source_payload_last_be = main_basesoc_core_tx_preamble_sink_payload_last_be;
always @(*) begin
    builder_txdatapath_liteethmacpreambleinserter_next_state <= 2'd0;
    main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value <= 3'd0;
    main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce <= 1'd0;
    main_basesoc_core_tx_preamble_sink_ready <= 1'd0;
    main_basesoc_core_tx_preamble_source_first <= 1'd0;
    main_basesoc_core_tx_preamble_source_last <= 1'd0;
    main_basesoc_core_tx_preamble_source_payload_data <= 8'd0;
    main_basesoc_core_tx_preamble_source_payload_error <= 1'd0;
    main_basesoc_core_tx_preamble_source_valid <= 1'd0;
    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_sink_payload_data;
    builder_txdatapath_liteethmacpreambleinserter_next_state <= builder_txdatapath_liteethmacpreambleinserter_state;
    case (builder_txdatapath_liteethmacpreambleinserter_state)
        1'd1: begin
            main_basesoc_core_tx_preamble_source_valid <= 1'd1;
            case (main_basesoc_core_tx_preamble_count)
                1'd0: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[7:0];
                end
                1'd1: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[15:8];
                end
                2'd2: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[23:16];
                end
                2'd3: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[31:24];
                end
                3'd4: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[39:32];
                end
                3'd5: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[47:40];
                end
                3'd6: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[55:48];
                end
                default: begin
                    main_basesoc_core_tx_preamble_source_payload_data <= main_basesoc_core_tx_preamble_preamble[63:56];
                end
            endcase
            if (main_basesoc_core_tx_preamble_source_ready) begin
                if ((main_basesoc_core_tx_preamble_count == 3'd7)) begin
                    builder_txdatapath_liteethmacpreambleinserter_next_state <= 2'd2;
                end else begin
                    main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value <= (main_basesoc_core_tx_preamble_count + 1'd1);
                    main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_core_tx_preamble_source_valid <= main_basesoc_core_tx_preamble_sink_valid;
            main_basesoc_core_tx_preamble_sink_ready <= main_basesoc_core_tx_preamble_source_ready;
            main_basesoc_core_tx_preamble_source_first <= main_basesoc_core_tx_preamble_sink_first;
            main_basesoc_core_tx_preamble_source_last <= main_basesoc_core_tx_preamble_sink_last;
            main_basesoc_core_tx_preamble_source_payload_error <= main_basesoc_core_tx_preamble_sink_payload_error;
            if (((main_basesoc_core_tx_preamble_sink_valid & main_basesoc_core_tx_preamble_sink_last) & main_basesoc_core_tx_preamble_source_ready)) begin
                builder_txdatapath_liteethmacpreambleinserter_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_core_tx_preamble_sink_ready <= 1'd1;
            main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value <= 1'd0;
            main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce <= 1'd1;
            if (main_basesoc_core_tx_preamble_sink_valid) begin
                main_basesoc_core_tx_preamble_sink_ready <= 1'd0;
                builder_txdatapath_liteethmacpreambleinserter_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_txdatapath_liteethmacgap_next_state <= 1'd0;
    main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value <= 4'd0;
    main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce <= 1'd0;
    main_basesoc_core_tx_gap_sink_ready <= 1'd0;
    main_basesoc_core_tx_gap_source_first <= 1'd0;
    main_basesoc_core_tx_gap_source_last <= 1'd0;
    main_basesoc_core_tx_gap_source_payload_data <= 8'd0;
    main_basesoc_core_tx_gap_source_payload_error <= 1'd0;
    main_basesoc_core_tx_gap_source_payload_last_be <= 1'd0;
    main_basesoc_core_tx_gap_source_valid <= 1'd0;
    builder_txdatapath_liteethmacgap_next_state <= builder_txdatapath_liteethmacgap_state;
    case (builder_txdatapath_liteethmacgap_state)
        1'd1: begin
            main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value <= (main_basesoc_core_tx_gap_counter + 1'd1);
            main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce <= 1'd1;
            if ((main_basesoc_core_tx_gap_counter == 4'd11)) begin
                builder_txdatapath_liteethmacgap_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value <= 1'd0;
            main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce <= 1'd1;
            main_basesoc_core_tx_gap_source_valid <= main_basesoc_core_tx_gap_sink_valid;
            main_basesoc_core_tx_gap_sink_ready <= main_basesoc_core_tx_gap_source_ready;
            main_basesoc_core_tx_gap_source_first <= main_basesoc_core_tx_gap_sink_first;
            main_basesoc_core_tx_gap_source_last <= main_basesoc_core_tx_gap_sink_last;
            main_basesoc_core_tx_gap_source_payload_data <= main_basesoc_core_tx_gap_sink_payload_data;
            main_basesoc_core_tx_gap_source_payload_last_be <= main_basesoc_core_tx_gap_sink_payload_last_be;
            main_basesoc_core_tx_gap_source_payload_error <= main_basesoc_core_tx_gap_sink_payload_error;
            if (((main_basesoc_core_tx_gap_sink_valid & main_basesoc_core_tx_gap_sink_last) & main_basesoc_core_tx_gap_sink_ready)) begin
                builder_txdatapath_liteethmacgap_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_core_tx_cdc_sink_sink_valid = main_basesoc_core_sink_valid;
assign main_basesoc_core_sink_ready = main_basesoc_core_tx_cdc_sink_sink_ready;
assign main_basesoc_core_tx_cdc_sink_sink_first = main_basesoc_core_sink_first;
assign main_basesoc_core_tx_cdc_sink_sink_last = main_basesoc_core_sink_last;
assign main_basesoc_core_tx_cdc_sink_sink_payload_data = main_basesoc_core_sink_payload_data;
assign main_basesoc_core_tx_cdc_sink_sink_payload_last_be = main_basesoc_core_sink_payload_last_be;
assign main_basesoc_core_tx_cdc_sink_sink_payload_error = main_basesoc_core_sink_payload_error;
assign main_basesoc_core_tx_converter_sink_valid = main_basesoc_core_tx_cdc_source_source_valid;
assign main_basesoc_core_tx_cdc_source_source_ready = main_basesoc_core_tx_converter_sink_ready;
assign main_basesoc_core_tx_converter_sink_first = main_basesoc_core_tx_cdc_source_source_first;
assign main_basesoc_core_tx_converter_sink_last = main_basesoc_core_tx_cdc_source_source_last;
assign main_basesoc_core_tx_converter_sink_payload_data = main_basesoc_core_tx_cdc_source_source_payload_data;
assign main_basesoc_core_tx_converter_sink_payload_last_be = main_basesoc_core_tx_cdc_source_source_payload_last_be;
assign main_basesoc_core_tx_converter_sink_payload_error = main_basesoc_core_tx_cdc_source_source_payload_error;
assign main_basesoc_core_tx_last_be_sink_sink_valid = main_basesoc_core_tx_converter_source_valid;
assign main_basesoc_core_tx_converter_source_ready = main_basesoc_core_tx_last_be_sink_sink_ready;
assign main_basesoc_core_tx_last_be_sink_sink_first = main_basesoc_core_tx_converter_source_first;
assign main_basesoc_core_tx_last_be_sink_sink_last = main_basesoc_core_tx_converter_source_last;
assign main_basesoc_core_tx_last_be_sink_sink_payload_data = main_basesoc_core_tx_converter_source_payload_data;
assign main_basesoc_core_tx_last_be_sink_sink_payload_last_be = main_basesoc_core_tx_converter_source_payload_last_be;
assign main_basesoc_core_tx_last_be_sink_sink_payload_error = main_basesoc_core_tx_converter_source_payload_error;
assign main_basesoc_core_tx_padding_sink_valid = main_basesoc_core_tx_last_be_source_source_valid;
assign main_basesoc_core_tx_last_be_source_source_ready = main_basesoc_core_tx_padding_sink_ready;
assign main_basesoc_core_tx_padding_sink_first = main_basesoc_core_tx_last_be_source_source_first;
assign main_basesoc_core_tx_padding_sink_last = main_basesoc_core_tx_last_be_source_source_last;
assign main_basesoc_core_tx_padding_sink_payload_data = main_basesoc_core_tx_last_be_source_source_payload_data;
assign main_basesoc_core_tx_padding_sink_payload_last_be = main_basesoc_core_tx_last_be_source_source_payload_last_be;
assign main_basesoc_core_tx_padding_sink_payload_error = main_basesoc_core_tx_last_be_source_source_payload_error;
assign main_basesoc_core_tx_crc_sink_sink_valid = main_basesoc_core_tx_padding_source_valid;
assign main_basesoc_core_tx_padding_source_ready = main_basesoc_core_tx_crc_sink_sink_ready;
assign main_basesoc_core_tx_crc_sink_sink_first = main_basesoc_core_tx_padding_source_first;
assign main_basesoc_core_tx_crc_sink_sink_last = main_basesoc_core_tx_padding_source_last;
assign main_basesoc_core_tx_crc_sink_sink_payload_data = main_basesoc_core_tx_padding_source_payload_data;
assign main_basesoc_core_tx_crc_sink_sink_payload_last_be = main_basesoc_core_tx_padding_source_payload_last_be;
assign main_basesoc_core_tx_crc_sink_sink_payload_error = main_basesoc_core_tx_padding_source_payload_error;
assign main_basesoc_core_tx_preamble_sink_valid = main_basesoc_core_tx_crc_source_valid;
assign main_basesoc_core_tx_crc_source_ready = main_basesoc_core_tx_preamble_sink_ready;
assign main_basesoc_core_tx_preamble_sink_first = main_basesoc_core_tx_crc_source_first;
assign main_basesoc_core_tx_preamble_sink_last = main_basesoc_core_tx_crc_source_last;
assign main_basesoc_core_tx_preamble_sink_payload_data = main_basesoc_core_tx_crc_source_payload_data;
assign main_basesoc_core_tx_preamble_sink_payload_last_be = main_basesoc_core_tx_crc_source_payload_last_be;
assign main_basesoc_core_tx_preamble_sink_payload_error = main_basesoc_core_tx_crc_source_payload_error;
assign main_basesoc_core_tx_gap_sink_valid = main_basesoc_core_tx_preamble_source_valid;
assign main_basesoc_core_tx_preamble_source_ready = main_basesoc_core_tx_gap_sink_ready;
assign main_basesoc_core_tx_gap_sink_first = main_basesoc_core_tx_preamble_source_first;
assign main_basesoc_core_tx_gap_sink_last = main_basesoc_core_tx_preamble_source_last;
assign main_basesoc_core_tx_gap_sink_payload_data = main_basesoc_core_tx_preamble_source_payload_data;
assign main_basesoc_core_tx_gap_sink_payload_last_be = main_basesoc_core_tx_preamble_source_payload_last_be;
assign main_basesoc_core_tx_gap_sink_payload_error = main_basesoc_core_tx_preamble_source_payload_error;
assign main_ethphy_liteethphyrmiitx_sink_valid = main_basesoc_core_tx_gap_source_valid;
assign main_basesoc_core_tx_gap_source_ready = main_ethphy_liteethphyrmiitx_sink_ready;
assign main_ethphy_liteethphyrmiitx_sink_first = main_basesoc_core_tx_gap_source_first;
assign main_ethphy_liteethphyrmiitx_sink_last = main_basesoc_core_tx_gap_source_last;
assign main_ethphy_liteethphyrmiitx_sink_payload_data = main_basesoc_core_tx_gap_source_payload_data;
assign main_ethphy_liteethphyrmiitx_sink_payload_last_be = main_basesoc_core_tx_gap_source_payload_last_be;
assign main_ethphy_liteethphyrmiitx_sink_payload_error = main_basesoc_core_tx_gap_source_payload_error;
assign main_basesoc_core_pulsesynchronizer0_i = main_basesoc_core_rx_preamble_error;
assign main_basesoc_core_pulsesynchronizer1_i = main_basesoc_core_liteethmaccrc32checker_error;
assign main_basesoc_core_rx_preamble_source_payload_data = main_basesoc_core_rx_preamble_sink_payload_data;
assign main_basesoc_core_rx_preamble_source_payload_last_be = main_basesoc_core_rx_preamble_sink_payload_last_be;
always @(*) begin
    builder_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd0;
    main_basesoc_core_rx_preamble_error <= 1'd0;
    main_basesoc_core_rx_preamble_sink_ready <= 1'd0;
    main_basesoc_core_rx_preamble_source_first <= 1'd0;
    main_basesoc_core_rx_preamble_source_last <= 1'd0;
    main_basesoc_core_rx_preamble_source_payload_error <= 1'd0;
    main_basesoc_core_rx_preamble_source_valid <= 1'd0;
    builder_rxdatapath_liteethmacpreamblechecker_next_state <= builder_rxdatapath_liteethmacpreamblechecker_state;
    case (builder_rxdatapath_liteethmacpreamblechecker_state)
        1'd1: begin
            main_basesoc_core_rx_preamble_source_valid <= main_basesoc_core_rx_preamble_sink_valid;
            main_basesoc_core_rx_preamble_sink_ready <= main_basesoc_core_rx_preamble_source_ready;
            main_basesoc_core_rx_preamble_source_first <= main_basesoc_core_rx_preamble_sink_first;
            main_basesoc_core_rx_preamble_source_last <= main_basesoc_core_rx_preamble_sink_last;
            main_basesoc_core_rx_preamble_source_payload_error <= main_basesoc_core_rx_preamble_sink_payload_error;
            if (((main_basesoc_core_rx_preamble_source_valid & main_basesoc_core_rx_preamble_source_last) & main_basesoc_core_rx_preamble_source_ready)) begin
                builder_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_core_rx_preamble_sink_ready <= 1'd1;
            if (((main_basesoc_core_rx_preamble_sink_valid & (~main_basesoc_core_rx_preamble_sink_last)) & (main_basesoc_core_rx_preamble_sink_payload_data == main_basesoc_core_rx_preamble_preamble[63:56]))) begin
                builder_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd1;
            end
            if ((main_basesoc_core_rx_preamble_sink_valid & main_basesoc_core_rx_preamble_sink_last)) begin
                main_basesoc_core_rx_preamble_error <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_core_pulsesynchronizer0_o = (main_basesoc_core_pulsesynchronizer0_toggle_o ^ main_basesoc_core_pulsesynchronizer0_toggle_o_r);
assign main_basesoc_core_liteethmaccrc32checker_fifo_full = (main_basesoc_core_liteethmaccrc32checker_syncfifo_level == 3'd4);
assign main_basesoc_core_liteethmaccrc32checker_fifo_in = (main_basesoc_core_liteethmaccrc32checker_sink_sink_valid & ((~main_basesoc_core_liteethmaccrc32checker_fifo_full) | main_basesoc_core_liteethmaccrc32checker_fifo_out));
assign main_basesoc_core_liteethmaccrc32checker_fifo_out = (main_basesoc_core_liteethmaccrc32checker_source_source_valid & main_basesoc_core_liteethmaccrc32checker_source_source_ready);
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_first = main_basesoc_core_liteethmaccrc32checker_sink_sink_first;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_last = main_basesoc_core_liteethmaccrc32checker_sink_sink_last;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_data = main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_data;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_last_be = main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_error = main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_error;
always @(*) begin
    main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_valid <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_valid <= main_basesoc_core_liteethmaccrc32checker_sink_sink_valid;
    main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_valid <= main_basesoc_core_liteethmaccrc32checker_fifo_in;
end
always @(*) begin
    main_basesoc_core_liteethmaccrc32checker_sink_sink_ready <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_sink_sink_ready <= main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_ready;
    main_basesoc_core_liteethmaccrc32checker_sink_sink_ready <= main_basesoc_core_liteethmaccrc32checker_fifo_in;
end
assign main_basesoc_core_liteethmaccrc32checker_crc_data0 = main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_data;
assign main_basesoc_core_liteethmaccrc32checker_crc_be = main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be;
assign main_basesoc_core_liteethmaccrc32checker_source_source_first = main_basesoc_core_liteethmaccrc32checker_syncfifo_source_first;
assign main_basesoc_core_liteethmaccrc32checker_source_source_payload_data = main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_data;
assign main_basesoc_core_liteethmaccrc32checker_sink_sink_valid = main_basesoc_core_bufferizeendpoints_source_source_valid;
assign main_basesoc_core_bufferizeendpoints_source_source_ready = main_basesoc_core_liteethmaccrc32checker_sink_sink_ready;
assign main_basesoc_core_liteethmaccrc32checker_sink_sink_first = main_basesoc_core_bufferizeendpoints_source_source_first;
assign main_basesoc_core_liteethmaccrc32checker_sink_sink_last = main_basesoc_core_bufferizeendpoints_source_source_last;
assign main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_data = main_basesoc_core_bufferizeendpoints_source_source_payload_data;
assign main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be = main_basesoc_core_bufferizeendpoints_source_source_payload_last_be;
assign main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_error = main_basesoc_core_bufferizeendpoints_source_source_payload_error;
assign main_basesoc_core_liteethmaccrc32checker_crc_data1 = main_basesoc_core_liteethmaccrc32checker_crc_data0;
assign main_basesoc_core_liteethmaccrc32checker_crc_crc_prev = main_basesoc_core_liteethmaccrc32checker_crc_reg;
always @(*) begin
    main_basesoc_core_liteethmaccrc32checker_crc_error0 <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_crc_value <= 32'd0;
    if (main_basesoc_core_liteethmaccrc32checker_crc_be) begin
        main_basesoc_core_liteethmaccrc32checker_crc_value <= ({main_basesoc_core_liteethmaccrc32checker_crc_crc_next[0], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[1], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[2], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[3], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[4], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[5], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[6], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[7], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[8], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[9], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[10], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[11], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[12], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[13], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[14], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[15], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[16], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[17], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[18], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[19], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[20], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[21], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[22], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[23], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[24], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[25], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[26], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[27], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[28], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[29], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[30], main_basesoc_core_liteethmaccrc32checker_crc_crc_next[31]} ^ 32'd4294967295);
        main_basesoc_core_liteethmaccrc32checker_crc_error0 <= (main_basesoc_core_liteethmaccrc32checker_crc_crc_next != 32'd3338984827);
    end
end
always @(*) begin
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next <= 32'd0;
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[0] <= (((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[1] <= (((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[2] <= (((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26] ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[3] <= (((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27] ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[4] <= (((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28] ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[5] <= (((((((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29] ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[6] <= (((((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30] ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[7] <= (((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31] ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[8] <= ((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[0] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[9] <= ((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[1] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[10] <= ((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[2] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[11] <= ((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[3] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[12] <= ((((((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[4] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[13] <= ((((((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[5] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[14] <= ((((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[6] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[15] <= ((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[7] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[16] <= ((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[8] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[17] <= ((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[9] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[18] <= ((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[10] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[19] <= ((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[11] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[20] <= ((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[12] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[21] <= ((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[13] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[22] <= ((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[14] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[23] <= ((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[15] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[24] <= ((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[16] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[25] <= ((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[17] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[26] <= ((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[18] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[7]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[27] <= ((((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[19] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[6]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[28] <= ((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[20] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[5]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[29] <= ((((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[21] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[1]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[4]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[30] <= ((((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[22] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[0]) ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[3]);
    main_basesoc_core_liteethmaccrc32checker_crc_crc_next[31] <= ((main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[23] ^ main_basesoc_core_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_basesoc_core_liteethmaccrc32checker_crc_data1[2]);
end
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_din = {main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_last, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_first, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_error, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_data};
assign {main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_last, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_first, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_error, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be, main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_data} = main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_dout;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_ready = main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_writable;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_we = main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_valid;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_first = main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_first;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_last = main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_last;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_data = main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_data;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be = main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_last_be;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_in_payload_error = main_basesoc_core_liteethmaccrc32checker_syncfifo_sink_payload_error;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_source_valid = main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_readable;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_source_first = main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_first;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_source_last = main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_last;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_data = main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_data;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_last_be = main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_error = main_basesoc_core_liteethmaccrc32checker_syncfifo_fifo_out_payload_error;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_re = main_basesoc_core_liteethmaccrc32checker_syncfifo_source_ready;
always @(*) begin
    main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_adr <= 3'd0;
    if (main_basesoc_core_liteethmaccrc32checker_syncfifo_replace) begin
        main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_adr <= (main_basesoc_core_liteethmaccrc32checker_syncfifo_produce - 1'd1);
    end else begin
        main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_adr <= main_basesoc_core_liteethmaccrc32checker_syncfifo_produce;
    end
end
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_dat_w = main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_din;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_we = (main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_we & (main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_writable | main_basesoc_core_liteethmaccrc32checker_syncfifo_replace));
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_do_read = (main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_readable & main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_re);
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_rdport_adr = main_basesoc_core_liteethmaccrc32checker_syncfifo_consume;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_dout = main_basesoc_core_liteethmaccrc32checker_syncfifo_rdport_dat_r;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_writable = (main_basesoc_core_liteethmaccrc32checker_syncfifo_level != 3'd5);
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_readable = (main_basesoc_core_liteethmaccrc32checker_syncfifo_level != 1'd0);
always @(*) begin
    builder_rxdatapath_bufferizeendpoints_next_state <= 2'd0;
    main_basesoc_core_liteethmaccrc32checker_crc_ce <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1 <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1 <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_crc_reset <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_error <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_fifo_reset <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0 <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0 <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_source_source_last <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_source_source_payload_error <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_source_source_payload_last_be <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_source_source_valid <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_syncfifo_source_ready <= 1'd0;
    main_basesoc_core_liteethmaccrc32checker_source_source_payload_error <= main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_error;
    builder_rxdatapath_bufferizeendpoints_next_state <= builder_rxdatapath_bufferizeendpoints_state;
    case (builder_rxdatapath_bufferizeendpoints_state)
        1'd1: begin
            if ((main_basesoc_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_core_liteethmaccrc32checker_sink_sink_ready)) begin
                main_basesoc_core_liteethmaccrc32checker_crc_ce <= 1'd1;
                builder_rxdatapath_bufferizeendpoints_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_basesoc_core_liteethmaccrc32checker_syncfifo_source_ready <= main_basesoc_core_liteethmaccrc32checker_fifo_out;
            main_basesoc_core_liteethmaccrc32checker_source_source_valid <= (main_basesoc_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_core_liteethmaccrc32checker_fifo_full);
            if (1'd1) begin
                main_basesoc_core_liteethmaccrc32checker_source_source_last <= main_basesoc_core_liteethmaccrc32checker_sink_sink_last;
                main_basesoc_core_liteethmaccrc32checker_source_source_payload_last_be <= main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be;
            end else begin
                if ((main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be & 4'd15)) begin
                    main_basesoc_core_liteethmaccrc32checker_source_source_last <= main_basesoc_core_liteethmaccrc32checker_sink_sink_last;
                    main_basesoc_core_liteethmaccrc32checker_source_source_payload_last_be <= (main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be <<< -3'd3);
                end else begin
                    main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0 <= (main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be >>> 3'd4);
                    main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                    main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1 <= main_basesoc_core_liteethmaccrc32checker_crc_error0;
                    main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                end
            end
            main_basesoc_core_liteethmaccrc32checker_source_source_payload_error <= (main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_error | {1{(main_basesoc_core_liteethmaccrc32checker_crc_error0 & main_basesoc_core_liteethmaccrc32checker_sink_sink_last)}});
            main_basesoc_core_liteethmaccrc32checker_error <= ((main_basesoc_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_core_liteethmaccrc32checker_sink_sink_last) & main_basesoc_core_liteethmaccrc32checker_crc_error0);
            if ((main_basesoc_core_liteethmaccrc32checker_sink_sink_valid & main_basesoc_core_liteethmaccrc32checker_sink_sink_ready)) begin
                main_basesoc_core_liteethmaccrc32checker_crc_ce <= 1'd1;
                if ((main_basesoc_core_liteethmaccrc32checker_sink_sink_last & (main_basesoc_core_liteethmaccrc32checker_sink_sink_payload_last_be > 4'd15))) begin
                    builder_rxdatapath_bufferizeendpoints_next_state <= 2'd3;
                end else begin
                    if (main_basesoc_core_liteethmaccrc32checker_sink_sink_last) begin
                        builder_rxdatapath_bufferizeendpoints_next_state <= 1'd0;
                    end
                end
            end
        end
        2'd3: begin
            main_basesoc_core_liteethmaccrc32checker_source_source_valid <= main_basesoc_core_liteethmaccrc32checker_syncfifo_source_valid;
            main_basesoc_core_liteethmaccrc32checker_syncfifo_source_ready <= main_basesoc_core_liteethmaccrc32checker_source_source_ready;
            main_basesoc_core_liteethmaccrc32checker_source_source_last <= main_basesoc_core_liteethmaccrc32checker_syncfifo_source_last;
            main_basesoc_core_liteethmaccrc32checker_source_source_payload_error <= (main_basesoc_core_liteethmaccrc32checker_syncfifo_source_payload_error | {1{main_basesoc_core_liteethmaccrc32checker_crc_error1}});
            main_basesoc_core_liteethmaccrc32checker_source_source_payload_last_be <= main_basesoc_core_liteethmaccrc32checker_last_be;
            if ((main_basesoc_core_liteethmaccrc32checker_source_source_valid & main_basesoc_core_liteethmaccrc32checker_source_source_ready)) begin
                builder_rxdatapath_bufferizeendpoints_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_core_liteethmaccrc32checker_crc_reset <= 1'd1;
            main_basesoc_core_liteethmaccrc32checker_fifo_reset <= 1'd1;
            builder_rxdatapath_bufferizeendpoints_next_state <= 1'd1;
        end
    endcase
end
assign main_basesoc_core_bufferizeendpoints_pipe_valid_sink_ready = ((~main_basesoc_core_bufferizeendpoints_pipe_valid_source_valid) | main_basesoc_core_bufferizeendpoints_pipe_valid_source_ready);
assign main_basesoc_core_bufferizeendpoints_pipe_valid_sink_valid = main_basesoc_core_bufferizeendpoints_sink_sink_valid;
assign main_basesoc_core_bufferizeendpoints_sink_sink_ready = main_basesoc_core_bufferizeendpoints_pipe_valid_sink_ready;
assign main_basesoc_core_bufferizeendpoints_pipe_valid_sink_first = main_basesoc_core_bufferizeendpoints_sink_sink_first;
assign main_basesoc_core_bufferizeendpoints_pipe_valid_sink_last = main_basesoc_core_bufferizeendpoints_sink_sink_last;
assign main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_data = main_basesoc_core_bufferizeendpoints_sink_sink_payload_data;
assign main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_last_be = main_basesoc_core_bufferizeendpoints_sink_sink_payload_last_be;
assign main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_error = main_basesoc_core_bufferizeendpoints_sink_sink_payload_error;
assign main_basesoc_core_bufferizeendpoints_source_source_valid = main_basesoc_core_bufferizeendpoints_pipe_valid_source_valid;
assign main_basesoc_core_bufferizeendpoints_pipe_valid_source_ready = main_basesoc_core_bufferizeendpoints_source_source_ready;
assign main_basesoc_core_bufferizeendpoints_source_source_first = main_basesoc_core_bufferizeendpoints_pipe_valid_source_first;
assign main_basesoc_core_bufferizeendpoints_source_source_last = main_basesoc_core_bufferizeendpoints_pipe_valid_source_last;
assign main_basesoc_core_bufferizeendpoints_source_source_payload_data = main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_data;
assign main_basesoc_core_bufferizeendpoints_source_source_payload_last_be = main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_last_be;
assign main_basesoc_core_bufferizeendpoints_source_source_payload_error = main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_error;
assign main_basesoc_core_pulsesynchronizer1_o = (main_basesoc_core_pulsesynchronizer1_toggle_o ^ main_basesoc_core_pulsesynchronizer1_toggle_o_r);
assign main_basesoc_core_rx_padding_source_valid = main_basesoc_core_rx_padding_sink_valid;
assign main_basesoc_core_rx_padding_sink_ready = main_basesoc_core_rx_padding_source_ready;
assign main_basesoc_core_rx_padding_source_first = main_basesoc_core_rx_padding_sink_first;
assign main_basesoc_core_rx_padding_source_last = main_basesoc_core_rx_padding_sink_last;
assign main_basesoc_core_rx_padding_source_payload_data = main_basesoc_core_rx_padding_sink_payload_data;
assign main_basesoc_core_rx_padding_source_payload_last_be = main_basesoc_core_rx_padding_sink_payload_last_be;
assign main_basesoc_core_rx_padding_source_payload_error = main_basesoc_core_rx_padding_sink_payload_error;
assign main_basesoc_core_rx_last_be_source_valid = main_basesoc_core_rx_last_be_sink_valid;
assign main_basesoc_core_rx_last_be_sink_ready = main_basesoc_core_rx_last_be_source_ready;
assign main_basesoc_core_rx_last_be_source_first = main_basesoc_core_rx_last_be_sink_first;
assign main_basesoc_core_rx_last_be_source_last = main_basesoc_core_rx_last_be_sink_last;
assign main_basesoc_core_rx_last_be_source_payload_data = main_basesoc_core_rx_last_be_sink_payload_data;
assign main_basesoc_core_rx_last_be_source_payload_error = main_basesoc_core_rx_last_be_sink_payload_error;
always @(*) begin
    main_basesoc_core_rx_last_be_source_payload_last_be <= 1'd0;
    main_basesoc_core_rx_last_be_source_payload_last_be <= main_basesoc_core_rx_last_be_sink_payload_last_be;
    if (1'd1) begin
        main_basesoc_core_rx_last_be_source_payload_last_be <= main_basesoc_core_rx_last_be_sink_last;
    end
end
assign main_basesoc_core_rx_converter_converter_sink_valid = main_basesoc_core_rx_converter_sink_valid;
assign main_basesoc_core_rx_converter_converter_sink_first = main_basesoc_core_rx_converter_sink_first;
assign main_basesoc_core_rx_converter_converter_sink_last = main_basesoc_core_rx_converter_sink_last;
assign main_basesoc_core_rx_converter_sink_ready = main_basesoc_core_rx_converter_converter_sink_ready;
assign main_basesoc_core_rx_converter_converter_sink_payload_data = {main_basesoc_core_rx_converter_sink_payload_error, main_basesoc_core_rx_converter_sink_payload_last_be, main_basesoc_core_rx_converter_sink_payload_data};
assign main_basesoc_core_rx_converter_source_valid = main_basesoc_core_rx_converter_source_source_valid;
assign main_basesoc_core_rx_converter_source_first = main_basesoc_core_rx_converter_source_source_first;
assign main_basesoc_core_rx_converter_source_last = main_basesoc_core_rx_converter_source_source_last;
assign main_basesoc_core_rx_converter_source_source_ready = main_basesoc_core_rx_converter_source_ready;
always @(*) begin
    main_basesoc_core_rx_converter_source_payload_data <= 32'd0;
    main_basesoc_core_rx_converter_source_payload_data[7:0] <= main_basesoc_core_rx_converter_source_source_payload_data[7:0];
    main_basesoc_core_rx_converter_source_payload_data[15:8] <= main_basesoc_core_rx_converter_source_source_payload_data[17:10];
    main_basesoc_core_rx_converter_source_payload_data[23:16] <= main_basesoc_core_rx_converter_source_source_payload_data[27:20];
    main_basesoc_core_rx_converter_source_payload_data[31:24] <= main_basesoc_core_rx_converter_source_source_payload_data[37:30];
end
always @(*) begin
    main_basesoc_core_rx_converter_source_payload_last_be <= 4'd0;
    main_basesoc_core_rx_converter_source_payload_last_be[0] <= main_basesoc_core_rx_converter_source_source_payload_data[8];
    main_basesoc_core_rx_converter_source_payload_last_be[1] <= main_basesoc_core_rx_converter_source_source_payload_data[18];
    main_basesoc_core_rx_converter_source_payload_last_be[2] <= main_basesoc_core_rx_converter_source_source_payload_data[28];
    main_basesoc_core_rx_converter_source_payload_last_be[3] <= main_basesoc_core_rx_converter_source_source_payload_data[38];
end
always @(*) begin
    main_basesoc_core_rx_converter_source_payload_error <= 4'd0;
    main_basesoc_core_rx_converter_source_payload_error[0] <= main_basesoc_core_rx_converter_source_source_payload_data[9];
    main_basesoc_core_rx_converter_source_payload_error[1] <= main_basesoc_core_rx_converter_source_source_payload_data[19];
    main_basesoc_core_rx_converter_source_payload_error[2] <= main_basesoc_core_rx_converter_source_source_payload_data[29];
    main_basesoc_core_rx_converter_source_payload_error[3] <= main_basesoc_core_rx_converter_source_source_payload_data[39];
end
assign main_basesoc_core_rx_converter_source_source_valid = main_basesoc_core_rx_converter_converter_source_valid;
assign main_basesoc_core_rx_converter_converter_source_ready = main_basesoc_core_rx_converter_source_source_ready;
assign main_basesoc_core_rx_converter_source_source_first = main_basesoc_core_rx_converter_converter_source_first;
assign main_basesoc_core_rx_converter_source_source_last = main_basesoc_core_rx_converter_converter_source_last;
assign main_basesoc_core_rx_converter_source_source_payload_data = main_basesoc_core_rx_converter_converter_source_payload_data;
assign main_basesoc_core_rx_converter_converter_sink_ready = ((~main_basesoc_core_rx_converter_converter_strobe_all) | main_basesoc_core_rx_converter_converter_source_ready);
assign main_basesoc_core_rx_converter_converter_source_valid = main_basesoc_core_rx_converter_converter_strobe_all;
assign main_basesoc_core_rx_converter_converter_load_part = (main_basesoc_core_rx_converter_converter_sink_valid & main_basesoc_core_rx_converter_converter_sink_ready);
assign main_basesoc_core_rx_cdc_cdc_sink_valid = main_basesoc_core_rx_cdc_sink_sink_valid;
assign main_basesoc_core_rx_cdc_sink_sink_ready = main_basesoc_core_rx_cdc_cdc_sink_ready;
assign main_basesoc_core_rx_cdc_cdc_sink_first = main_basesoc_core_rx_cdc_sink_sink_first;
assign main_basesoc_core_rx_cdc_cdc_sink_last = main_basesoc_core_rx_cdc_sink_sink_last;
assign main_basesoc_core_rx_cdc_cdc_sink_payload_data = main_basesoc_core_rx_cdc_sink_sink_payload_data;
assign main_basesoc_core_rx_cdc_cdc_sink_payload_last_be = main_basesoc_core_rx_cdc_sink_sink_payload_last_be;
assign main_basesoc_core_rx_cdc_cdc_sink_payload_error = main_basesoc_core_rx_cdc_sink_sink_payload_error;
assign main_basesoc_core_rx_cdc_source_source_valid = main_basesoc_core_rx_cdc_cdc_source_valid;
assign main_basesoc_core_rx_cdc_cdc_source_ready = main_basesoc_core_rx_cdc_source_source_ready;
assign main_basesoc_core_rx_cdc_source_source_first = main_basesoc_core_rx_cdc_cdc_source_first;
assign main_basesoc_core_rx_cdc_source_source_last = main_basesoc_core_rx_cdc_cdc_source_last;
assign main_basesoc_core_rx_cdc_source_source_payload_data = main_basesoc_core_rx_cdc_cdc_source_payload_data;
assign main_basesoc_core_rx_cdc_source_source_payload_last_be = main_basesoc_core_rx_cdc_cdc_source_payload_last_be;
assign main_basesoc_core_rx_cdc_source_source_payload_error = main_basesoc_core_rx_cdc_cdc_source_payload_error;
assign main_basesoc_core_rx_cdc_cdc_asyncfifo_din = {main_basesoc_core_rx_cdc_cdc_fifo_in_last, main_basesoc_core_rx_cdc_cdc_fifo_in_first, main_basesoc_core_rx_cdc_cdc_fifo_in_payload_error, main_basesoc_core_rx_cdc_cdc_fifo_in_payload_last_be, main_basesoc_core_rx_cdc_cdc_fifo_in_payload_data};
assign {main_basesoc_core_rx_cdc_cdc_fifo_out_last, main_basesoc_core_rx_cdc_cdc_fifo_out_first, main_basesoc_core_rx_cdc_cdc_fifo_out_payload_error, main_basesoc_core_rx_cdc_cdc_fifo_out_payload_last_be, main_basesoc_core_rx_cdc_cdc_fifo_out_payload_data} = main_basesoc_core_rx_cdc_cdc_asyncfifo_dout;
assign main_basesoc_core_rx_cdc_cdc_sink_ready = main_basesoc_core_rx_cdc_cdc_asyncfifo_writable;
assign main_basesoc_core_rx_cdc_cdc_asyncfifo_we = main_basesoc_core_rx_cdc_cdc_sink_valid;
assign main_basesoc_core_rx_cdc_cdc_fifo_in_first = main_basesoc_core_rx_cdc_cdc_sink_first;
assign main_basesoc_core_rx_cdc_cdc_fifo_in_last = main_basesoc_core_rx_cdc_cdc_sink_last;
assign main_basesoc_core_rx_cdc_cdc_fifo_in_payload_data = main_basesoc_core_rx_cdc_cdc_sink_payload_data;
assign main_basesoc_core_rx_cdc_cdc_fifo_in_payload_last_be = main_basesoc_core_rx_cdc_cdc_sink_payload_last_be;
assign main_basesoc_core_rx_cdc_cdc_fifo_in_payload_error = main_basesoc_core_rx_cdc_cdc_sink_payload_error;
assign main_basesoc_core_rx_cdc_cdc_source_valid = main_basesoc_core_rx_cdc_cdc_asyncfifo_readable;
assign main_basesoc_core_rx_cdc_cdc_source_first = main_basesoc_core_rx_cdc_cdc_fifo_out_first;
assign main_basesoc_core_rx_cdc_cdc_source_last = main_basesoc_core_rx_cdc_cdc_fifo_out_last;
assign main_basesoc_core_rx_cdc_cdc_source_payload_data = main_basesoc_core_rx_cdc_cdc_fifo_out_payload_data;
assign main_basesoc_core_rx_cdc_cdc_source_payload_last_be = main_basesoc_core_rx_cdc_cdc_fifo_out_payload_last_be;
assign main_basesoc_core_rx_cdc_cdc_source_payload_error = main_basesoc_core_rx_cdc_cdc_fifo_out_payload_error;
assign main_basesoc_core_rx_cdc_cdc_asyncfifo_re = main_basesoc_core_rx_cdc_cdc_source_ready;
assign main_basesoc_core_rx_cdc_cdc_graycounter0_ce = (main_basesoc_core_rx_cdc_cdc_asyncfifo_writable & main_basesoc_core_rx_cdc_cdc_asyncfifo_we);
assign main_basesoc_core_rx_cdc_cdc_graycounter1_ce = (main_basesoc_core_rx_cdc_cdc_asyncfifo_readable & main_basesoc_core_rx_cdc_cdc_asyncfifo_re);
assign main_basesoc_core_rx_cdc_cdc_asyncfifo_writable = (((main_basesoc_core_rx_cdc_cdc_graycounter0_q[5] == main_basesoc_core_rx_cdc_cdc_consume_wdomain[5]) | (main_basesoc_core_rx_cdc_cdc_graycounter0_q[4] == main_basesoc_core_rx_cdc_cdc_consume_wdomain[4])) | (main_basesoc_core_rx_cdc_cdc_graycounter0_q[3:0] != main_basesoc_core_rx_cdc_cdc_consume_wdomain[3:0]));
assign main_basesoc_core_rx_cdc_cdc_asyncfifo_readable = (main_basesoc_core_rx_cdc_cdc_graycounter1_q != main_basesoc_core_rx_cdc_cdc_produce_rdomain);
assign main_basesoc_core_rx_cdc_cdc_wrport_adr = main_basesoc_core_rx_cdc_cdc_graycounter0_q_binary[4:0];
assign main_basesoc_core_rx_cdc_cdc_wrport_dat_w = main_basesoc_core_rx_cdc_cdc_asyncfifo_din;
assign main_basesoc_core_rx_cdc_cdc_wrport_we = main_basesoc_core_rx_cdc_cdc_graycounter0_ce;
assign main_basesoc_core_rx_cdc_cdc_rdport_adr = main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary[4:0];
assign main_basesoc_core_rx_cdc_cdc_asyncfifo_dout = main_basesoc_core_rx_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_basesoc_core_rx_cdc_cdc_graycounter0_q_next_binary <= 6'd0;
    if (main_basesoc_core_rx_cdc_cdc_graycounter0_ce) begin
        main_basesoc_core_rx_cdc_cdc_graycounter0_q_next_binary <= (main_basesoc_core_rx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_basesoc_core_rx_cdc_cdc_graycounter0_q_next_binary <= main_basesoc_core_rx_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_basesoc_core_rx_cdc_cdc_graycounter0_q_next = (main_basesoc_core_rx_cdc_cdc_graycounter0_q_next_binary ^ main_basesoc_core_rx_cdc_cdc_graycounter0_q_next_binary[5:1]);
always @(*) begin
    main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary <= 6'd0;
    if (main_basesoc_core_rx_cdc_cdc_graycounter1_ce) begin
        main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary <= (main_basesoc_core_rx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary <= main_basesoc_core_rx_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_basesoc_core_rx_cdc_cdc_graycounter1_q_next = (main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary ^ main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary[5:1]);
assign main_basesoc_core_rx_preamble_sink_valid = main_ethphy_liteethphyrmiirx_source_source_valid0;
assign main_ethphy_liteethphyrmiirx_source_source_ready0 = main_basesoc_core_rx_preamble_sink_ready;
assign main_basesoc_core_rx_preamble_sink_first = main_ethphy_liteethphyrmiirx_source_source_first0;
assign main_basesoc_core_rx_preamble_sink_last = main_ethphy_liteethphyrmiirx_source_source_last0;
assign main_basesoc_core_rx_preamble_sink_payload_data = main_ethphy_liteethphyrmiirx_source_source_payload_data0;
assign main_basesoc_core_rx_preamble_sink_payload_last_be = main_ethphy_liteethphyrmiirx_source_source_payload_last_be;
assign main_basesoc_core_rx_preamble_sink_payload_error = main_ethphy_liteethphyrmiirx_source_source_payload_error;
assign main_basesoc_core_bufferizeendpoints_sink_sink_valid = main_basesoc_core_rx_preamble_source_valid;
assign main_basesoc_core_rx_preamble_source_ready = main_basesoc_core_bufferizeendpoints_sink_sink_ready;
assign main_basesoc_core_bufferizeendpoints_sink_sink_first = main_basesoc_core_rx_preamble_source_first;
assign main_basesoc_core_bufferizeendpoints_sink_sink_last = main_basesoc_core_rx_preamble_source_last;
assign main_basesoc_core_bufferizeendpoints_sink_sink_payload_data = main_basesoc_core_rx_preamble_source_payload_data;
assign main_basesoc_core_bufferizeendpoints_sink_sink_payload_last_be = main_basesoc_core_rx_preamble_source_payload_last_be;
assign main_basesoc_core_bufferizeendpoints_sink_sink_payload_error = main_basesoc_core_rx_preamble_source_payload_error;
assign main_basesoc_core_rx_padding_sink_valid = main_basesoc_core_liteethmaccrc32checker_source_source_valid;
assign main_basesoc_core_liteethmaccrc32checker_source_source_ready = main_basesoc_core_rx_padding_sink_ready;
assign main_basesoc_core_rx_padding_sink_first = main_basesoc_core_liteethmaccrc32checker_source_source_first;
assign main_basesoc_core_rx_padding_sink_last = main_basesoc_core_liteethmaccrc32checker_source_source_last;
assign main_basesoc_core_rx_padding_sink_payload_data = main_basesoc_core_liteethmaccrc32checker_source_source_payload_data;
assign main_basesoc_core_rx_padding_sink_payload_last_be = main_basesoc_core_liteethmaccrc32checker_source_source_payload_last_be;
assign main_basesoc_core_rx_padding_sink_payload_error = main_basesoc_core_liteethmaccrc32checker_source_source_payload_error;
assign main_basesoc_core_rx_last_be_sink_valid = main_basesoc_core_rx_padding_source_valid;
assign main_basesoc_core_rx_padding_source_ready = main_basesoc_core_rx_last_be_sink_ready;
assign main_basesoc_core_rx_last_be_sink_first = main_basesoc_core_rx_padding_source_first;
assign main_basesoc_core_rx_last_be_sink_last = main_basesoc_core_rx_padding_source_last;
assign main_basesoc_core_rx_last_be_sink_payload_data = main_basesoc_core_rx_padding_source_payload_data;
assign main_basesoc_core_rx_last_be_sink_payload_last_be = main_basesoc_core_rx_padding_source_payload_last_be;
assign main_basesoc_core_rx_last_be_sink_payload_error = main_basesoc_core_rx_padding_source_payload_error;
assign main_basesoc_core_rx_converter_sink_valid = main_basesoc_core_rx_last_be_source_valid;
assign main_basesoc_core_rx_last_be_source_ready = main_basesoc_core_rx_converter_sink_ready;
assign main_basesoc_core_rx_converter_sink_first = main_basesoc_core_rx_last_be_source_first;
assign main_basesoc_core_rx_converter_sink_last = main_basesoc_core_rx_last_be_source_last;
assign main_basesoc_core_rx_converter_sink_payload_data = main_basesoc_core_rx_last_be_source_payload_data;
assign main_basesoc_core_rx_converter_sink_payload_last_be = main_basesoc_core_rx_last_be_source_payload_last_be;
assign main_basesoc_core_rx_converter_sink_payload_error = main_basesoc_core_rx_last_be_source_payload_error;
assign main_basesoc_core_rx_cdc_sink_sink_valid = main_basesoc_core_rx_converter_source_valid;
assign main_basesoc_core_rx_converter_source_ready = main_basesoc_core_rx_cdc_sink_sink_ready;
assign main_basesoc_core_rx_cdc_sink_sink_first = main_basesoc_core_rx_converter_source_first;
assign main_basesoc_core_rx_cdc_sink_sink_last = main_basesoc_core_rx_converter_source_last;
assign main_basesoc_core_rx_cdc_sink_sink_payload_data = main_basesoc_core_rx_converter_source_payload_data;
assign main_basesoc_core_rx_cdc_sink_sink_payload_last_be = main_basesoc_core_rx_converter_source_payload_last_be;
assign main_basesoc_core_rx_cdc_sink_sink_payload_error = main_basesoc_core_rx_converter_source_payload_error;
assign main_basesoc_core_source_valid = main_basesoc_core_rx_cdc_source_source_valid;
assign main_basesoc_core_rx_cdc_source_source_ready = main_basesoc_core_source_ready;
assign main_basesoc_core_source_first = main_basesoc_core_rx_cdc_source_source_first;
assign main_basesoc_core_source_last = main_basesoc_core_rx_cdc_source_source_last;
assign main_basesoc_core_source_payload_data = main_basesoc_core_rx_cdc_source_source_payload_data;
assign main_basesoc_core_source_payload_last_be = main_basesoc_core_rx_cdc_source_source_payload_last_be;
assign main_basesoc_core_source_payload_error = main_basesoc_core_rx_cdc_source_source_payload_error;
assign main_basesoc_wishbone_interface_writer_sink_sink_valid = main_basesoc_wishbone_interface_sink_valid;
assign main_basesoc_wishbone_interface_sink_ready = main_basesoc_wishbone_interface_writer_sink_sink_ready;
assign main_basesoc_wishbone_interface_writer_sink_sink_first = main_basesoc_wishbone_interface_sink_first;
assign main_basesoc_wishbone_interface_writer_sink_sink_last = main_basesoc_wishbone_interface_sink_last;
assign main_basesoc_wishbone_interface_writer_sink_sink_payload_data = main_basesoc_wishbone_interface_sink_payload_data;
assign main_basesoc_wishbone_interface_writer_sink_sink_payload_last_be = main_basesoc_wishbone_interface_sink_payload_last_be;
assign main_basesoc_wishbone_interface_writer_sink_sink_payload_error = main_basesoc_wishbone_interface_sink_payload_error;
assign main_basesoc_wishbone_interface_source_valid = main_basesoc_wishbone_interface_reader_source_source_valid;
assign main_basesoc_wishbone_interface_reader_source_source_ready = main_basesoc_wishbone_interface_source_ready;
assign main_basesoc_wishbone_interface_source_first = main_basesoc_wishbone_interface_reader_source_source_first;
assign main_basesoc_wishbone_interface_source_last = main_basesoc_wishbone_interface_reader_source_source_last;
assign main_basesoc_wishbone_interface_source_payload_data = main_basesoc_wishbone_interface_reader_source_source_payload_data;
assign main_basesoc_wishbone_interface_source_payload_last_be = main_basesoc_wishbone_interface_reader_source_source_payload_last_be;
assign main_basesoc_wishbone_interface_source_payload_error = main_basesoc_wishbone_interface_reader_source_source_payload_error;
always @(*) begin
    main_basesoc_wishbone_interface_writer_length_inc <= 4'd0;
    case (main_basesoc_wishbone_interface_writer_sink_sink_payload_last_be)
        1'd1: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 1'd1;
        end
        2'd2: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 2'd2;
        end
        3'd4: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 2'd3;
        end
        4'd8: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 3'd4;
        end
        5'd16: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 3'd5;
        end
        6'd32: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 3'd6;
        end
        7'd64: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 3'd7;
        end
        default: begin
            main_basesoc_wishbone_interface_writer_length_inc <= 3'd4;
        end
    endcase
end
assign main_basesoc_wishbone_interface_writer_stat_fifo_source_ready = main_basesoc_wishbone_interface_writer_available_clear;
assign main_basesoc_wishbone_interface_writer_available_trigger = main_basesoc_wishbone_interface_writer_stat_fifo_source_valid;
assign main_basesoc_wishbone_interface_writer_slot_status = main_basesoc_wishbone_interface_writer_stat_fifo_source_payload_slot;
assign main_basesoc_wishbone_interface_writer_length_status = main_basesoc_wishbone_interface_writer_stat_fifo_source_payload_length;
assign main_basesoc_wishbone_interface_writer_wr_data = main_basesoc_wishbone_interface_writer_sink_sink_payload_data;
always @(*) begin
    main_basesoc_wishbone_interface_writer_memory0_adr <= 9'd0;
    main_basesoc_wishbone_interface_writer_memory0_dat_w <= 32'd0;
    main_basesoc_wishbone_interface_writer_memory0_we <= 1'd0;
    main_basesoc_wishbone_interface_writer_memory1_adr <= 9'd0;
    main_basesoc_wishbone_interface_writer_memory1_dat_w <= 32'd0;
    main_basesoc_wishbone_interface_writer_memory1_we <= 1'd0;
    case (main_basesoc_wishbone_interface_writer_slot)
        1'd0: begin
            main_basesoc_wishbone_interface_writer_memory0_adr <= main_basesoc_wishbone_interface_writer_length[10:2];
            main_basesoc_wishbone_interface_writer_memory0_dat_w <= main_basesoc_wishbone_interface_writer_wr_data;
            if ((main_basesoc_wishbone_interface_writer_sink_sink_valid & main_basesoc_wishbone_interface_writer_write)) begin
                main_basesoc_wishbone_interface_writer_memory0_we <= 1'd1;
            end
        end
        1'd1: begin
            main_basesoc_wishbone_interface_writer_memory1_adr <= main_basesoc_wishbone_interface_writer_length[10:2];
            main_basesoc_wishbone_interface_writer_memory1_dat_w <= main_basesoc_wishbone_interface_writer_wr_data;
            if ((main_basesoc_wishbone_interface_writer_sink_sink_valid & main_basesoc_wishbone_interface_writer_write)) begin
                main_basesoc_wishbone_interface_writer_memory1_we <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_wishbone_interface_writer_available0 = main_basesoc_wishbone_interface_writer_available_status;
assign main_basesoc_wishbone_interface_writer_available1 = main_basesoc_wishbone_interface_writer_available_pending;
always @(*) begin
    main_basesoc_wishbone_interface_writer_available_clear <= 1'd0;
    if ((main_basesoc_wishbone_interface_writer_pending_re & main_basesoc_wishbone_interface_writer_pending_r)) begin
        main_basesoc_wishbone_interface_writer_available_clear <= 1'd1;
    end
end
assign main_basesoc_wishbone_interface_writer_irq = (main_basesoc_wishbone_interface_writer_pending_status & main_basesoc_wishbone_interface_writer_enable_storage);
assign main_basesoc_wishbone_interface_writer_available_status = main_basesoc_wishbone_interface_writer_available_trigger;
assign main_basesoc_wishbone_interface_writer_available_pending = main_basesoc_wishbone_interface_writer_available_trigger;
assign main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_din = {main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_last, main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_first, main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_payload_length, main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_payload_slot};
assign {main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_last, main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_first, main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_payload_length, main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_payload_slot} = main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_dout;
assign main_basesoc_wishbone_interface_writer_stat_fifo_sink_ready = main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_writable;
assign main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_we = main_basesoc_wishbone_interface_writer_stat_fifo_sink_valid;
assign main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_first = main_basesoc_wishbone_interface_writer_stat_fifo_sink_first;
assign main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_last = main_basesoc_wishbone_interface_writer_stat_fifo_sink_last;
assign main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_payload_slot = main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_slot;
assign main_basesoc_wishbone_interface_writer_stat_fifo_fifo_in_payload_length = main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_length;
assign main_basesoc_wishbone_interface_writer_stat_fifo_source_valid = main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_readable;
assign main_basesoc_wishbone_interface_writer_stat_fifo_source_first = main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_first;
assign main_basesoc_wishbone_interface_writer_stat_fifo_source_last = main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_last;
assign main_basesoc_wishbone_interface_writer_stat_fifo_source_payload_slot = main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_payload_slot;
assign main_basesoc_wishbone_interface_writer_stat_fifo_source_payload_length = main_basesoc_wishbone_interface_writer_stat_fifo_fifo_out_payload_length;
assign main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_re = main_basesoc_wishbone_interface_writer_stat_fifo_source_ready;
always @(*) begin
    main_basesoc_wishbone_interface_writer_stat_fifo_wrport_adr <= 1'd0;
    if (main_basesoc_wishbone_interface_writer_stat_fifo_replace) begin
        main_basesoc_wishbone_interface_writer_stat_fifo_wrport_adr <= (main_basesoc_wishbone_interface_writer_stat_fifo_produce - 1'd1);
    end else begin
        main_basesoc_wishbone_interface_writer_stat_fifo_wrport_adr <= main_basesoc_wishbone_interface_writer_stat_fifo_produce;
    end
end
assign main_basesoc_wishbone_interface_writer_stat_fifo_wrport_dat_w = main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_din;
assign main_basesoc_wishbone_interface_writer_stat_fifo_wrport_we = (main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_we & (main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_writable | main_basesoc_wishbone_interface_writer_stat_fifo_replace));
assign main_basesoc_wishbone_interface_writer_stat_fifo_do_read = (main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_readable & main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_re);
assign main_basesoc_wishbone_interface_writer_stat_fifo_rdport_adr = main_basesoc_wishbone_interface_writer_stat_fifo_consume;
assign main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_dout = main_basesoc_wishbone_interface_writer_stat_fifo_rdport_dat_r;
assign main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_writable = (main_basesoc_wishbone_interface_writer_stat_fifo_level != 2'd2);
assign main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_readable = (main_basesoc_wishbone_interface_writer_stat_fifo_level != 1'd0);
always @(*) begin
    builder_liteethmacsramwriter_next_state <= 3'd0;
    main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value <= 32'd0;
    main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce <= 1'd0;
    main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 11'd0;
    main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd0;
    main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value <= 1'd0;
    main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce <= 1'd0;
    main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_length <= 11'd0;
    main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_slot <= 1'd0;
    main_basesoc_wishbone_interface_writer_stat_fifo_sink_valid <= 1'd0;
    main_basesoc_wishbone_interface_writer_write <= 1'd0;
    builder_liteethmacsramwriter_next_state <= builder_liteethmacsramwriter_state;
    case (builder_liteethmacsramwriter_state)
        1'd1: begin
            if ((main_basesoc_wishbone_interface_writer_sink_sink_valid & main_basesoc_wishbone_interface_writer_sink_sink_last)) begin
                if (((main_basesoc_wishbone_interface_writer_sink_sink_payload_error & main_basesoc_wishbone_interface_writer_sink_sink_payload_last_be) != 1'd0)) begin
                    builder_liteethmacsramwriter_next_state <= 2'd3;
                end else begin
                    builder_liteethmacsramwriter_next_state <= 3'd4;
                end
            end
        end
        2'd2: begin
            if ((main_basesoc_wishbone_interface_writer_sink_sink_valid & main_basesoc_wishbone_interface_writer_sink_sink_last)) begin
                if ((main_basesoc_wishbone_interface_writer_sink_sink_payload_last_be != 1'd0)) begin
                    builder_liteethmacsramwriter_next_state <= 2'd3;
                end else begin
                    main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 1'd0;
                    main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
                    builder_liteethmacsramwriter_next_state <= 1'd0;
                end
            end
        end
        2'd3: begin
            main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 1'd0;
            main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
            builder_liteethmacsramwriter_next_state <= 1'd0;
        end
        3'd4: begin
            main_basesoc_wishbone_interface_writer_stat_fifo_sink_valid <= 1'd1;
            main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_slot <= main_basesoc_wishbone_interface_writer_slot;
            main_basesoc_wishbone_interface_writer_stat_fifo_sink_payload_length <= main_basesoc_wishbone_interface_writer_length;
            main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 1'd0;
            main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
            main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value <= (main_basesoc_wishbone_interface_writer_slot + 1'd1);
            main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce <= 1'd1;
            builder_liteethmacsramwriter_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_wishbone_interface_writer_sink_sink_valid) begin
                if (main_basesoc_wishbone_interface_writer_stat_fifo_sink_ready) begin
                    main_basesoc_wishbone_interface_writer_write <= 1'd1;
                    main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= (main_basesoc_wishbone_interface_writer_length + main_basesoc_wishbone_interface_writer_length_inc);
                    main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
                    if ((main_basesoc_wishbone_interface_writer_length >= 11'd1530)) begin
                        builder_liteethmacsramwriter_next_state <= 1'd1;
                    end
                    if (main_basesoc_wishbone_interface_writer_sink_sink_last) begin
                        if (((main_basesoc_wishbone_interface_writer_sink_sink_payload_error & main_basesoc_wishbone_interface_writer_sink_sink_payload_last_be) != 1'd0)) begin
                            builder_liteethmacsramwriter_next_state <= 2'd3;
                        end else begin
                            builder_liteethmacsramwriter_next_state <= 3'd4;
                        end
                    end
                end else begin
                    main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value <= (main_basesoc_wishbone_interface_writer_errors_status + 1'd1);
                    main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce <= 1'd1;
                    builder_liteethmacsramwriter_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_basesoc_wishbone_interface_reader_cmd_fifo_sink_valid = main_basesoc_wishbone_interface_reader_start_re;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_sink_payload_slot = main_basesoc_wishbone_interface_reader_slot_storage;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_sink_payload_length = main_basesoc_wishbone_interface_reader_length_storage;
assign main_basesoc_wishbone_interface_reader_ready_status = main_basesoc_wishbone_interface_reader_cmd_fifo_sink_ready;
assign main_basesoc_wishbone_interface_reader_level_status = main_basesoc_wishbone_interface_reader_cmd_fifo_level;
always @(*) begin
    main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 4'd0;
    if (main_basesoc_wishbone_interface_reader_source_source_last) begin
        case (main_basesoc_wishbone_interface_reader_cmd_fifo_source_payload_length[1:0])
            1'd1: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 1'd1;
            end
            2'd2: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 2'd2;
            end
            2'd3: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 3'd4;
            end
            3'd4: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 4'd8;
            end
            3'd5: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 5'd16;
            end
            3'd6: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 6'd32;
            end
            3'd7: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 7'd64;
            end
            default: begin
                main_basesoc_wishbone_interface_reader_source_source_payload_last_be <= 4'd8;
            end
        endcase
    end
end
assign main_basesoc_wishbone_interface_reader_memory0_re = main_basesoc_wishbone_interface_reader_read;
assign main_basesoc_wishbone_interface_reader_memory0_adr = main_basesoc_wishbone_interface_reader_length[10:2];
assign main_basesoc_wishbone_interface_reader_memory1_re = main_basesoc_wishbone_interface_reader_read;
assign main_basesoc_wishbone_interface_reader_memory1_adr = main_basesoc_wishbone_interface_reader_length[10:2];
always @(*) begin
    main_basesoc_wishbone_interface_reader_rd_data <= 32'd0;
    case (main_basesoc_wishbone_interface_reader_cmd_fifo_source_payload_slot)
        1'd0: begin
            main_basesoc_wishbone_interface_reader_rd_data <= main_basesoc_wishbone_interface_reader_memory0_dat_r;
        end
        1'd1: begin
            main_basesoc_wishbone_interface_reader_rd_data <= main_basesoc_wishbone_interface_reader_memory1_dat_r;
        end
    endcase
end
assign main_basesoc_wishbone_interface_reader_source_source_payload_data = main_basesoc_wishbone_interface_reader_rd_data;
assign main_basesoc_wishbone_interface_reader_event00 = main_basesoc_wishbone_interface_reader_eventsourcepulse_status;
assign main_basesoc_wishbone_interface_reader_event01 = main_basesoc_wishbone_interface_reader_eventsourcepulse_pending;
always @(*) begin
    main_basesoc_wishbone_interface_reader_eventsourcepulse_clear <= 1'd0;
    if ((main_basesoc_wishbone_interface_reader_pending_re & main_basesoc_wishbone_interface_reader_pending_r)) begin
        main_basesoc_wishbone_interface_reader_eventsourcepulse_clear <= 1'd1;
    end
end
assign main_basesoc_wishbone_interface_reader_irq = (main_basesoc_wishbone_interface_reader_pending_status & main_basesoc_wishbone_interface_reader_enable_storage);
assign main_basesoc_wishbone_interface_reader_eventsourcepulse_status = 1'd0;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_din = {main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_last, main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_first, main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_payload_length, main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_payload_slot};
assign {main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_last, main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_first, main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_payload_length, main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_payload_slot} = main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_dout;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_sink_ready = main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_writable;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_we = main_basesoc_wishbone_interface_reader_cmd_fifo_sink_valid;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_first = main_basesoc_wishbone_interface_reader_cmd_fifo_sink_first;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_last = main_basesoc_wishbone_interface_reader_cmd_fifo_sink_last;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_payload_slot = main_basesoc_wishbone_interface_reader_cmd_fifo_sink_payload_slot;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_in_payload_length = main_basesoc_wishbone_interface_reader_cmd_fifo_sink_payload_length;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_source_valid = main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_readable;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_source_first = main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_first;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_source_last = main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_last;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_source_payload_slot = main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_payload_slot;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_source_payload_length = main_basesoc_wishbone_interface_reader_cmd_fifo_fifo_out_payload_length;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_re = main_basesoc_wishbone_interface_reader_cmd_fifo_source_ready;
always @(*) begin
    main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_adr <= 1'd0;
    if (main_basesoc_wishbone_interface_reader_cmd_fifo_replace) begin
        main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_adr <= (main_basesoc_wishbone_interface_reader_cmd_fifo_produce - 1'd1);
    end else begin
        main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_adr <= main_basesoc_wishbone_interface_reader_cmd_fifo_produce;
    end
end
assign main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_dat_w = main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_din;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_we = (main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_we & (main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_writable | main_basesoc_wishbone_interface_reader_cmd_fifo_replace));
assign main_basesoc_wishbone_interface_reader_cmd_fifo_do_read = (main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_readable & main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_re);
assign main_basesoc_wishbone_interface_reader_cmd_fifo_rdport_adr = main_basesoc_wishbone_interface_reader_cmd_fifo_consume;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_dout = main_basesoc_wishbone_interface_reader_cmd_fifo_rdport_dat_r;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_writable = (main_basesoc_wishbone_interface_reader_cmd_fifo_level != 2'd2);
assign main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_readable = (main_basesoc_wishbone_interface_reader_cmd_fifo_level != 1'd0);
always @(*) begin
    builder_liteethmacsramreader_next_state <= 2'd0;
    main_basesoc_wishbone_interface_reader_cmd_fifo_source_ready <= 1'd0;
    main_basesoc_wishbone_interface_reader_eventsourcepulse_trigger <= 1'd0;
    main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value <= 11'd0;
    main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd0;
    main_basesoc_wishbone_interface_reader_read <= 1'd0;
    main_basesoc_wishbone_interface_reader_source_source_last <= 1'd0;
    main_basesoc_wishbone_interface_reader_source_source_valid <= 1'd0;
    builder_liteethmacsramreader_next_state <= builder_liteethmacsramreader_state;
    case (builder_liteethmacsramreader_state)
        1'd1: begin
            main_basesoc_wishbone_interface_reader_source_source_valid <= 1'd1;
            main_basesoc_wishbone_interface_reader_source_source_last <= (main_basesoc_wishbone_interface_reader_length >= main_basesoc_wishbone_interface_reader_cmd_fifo_source_payload_length);
            if (main_basesoc_wishbone_interface_reader_source_source_ready) begin
                main_basesoc_wishbone_interface_reader_read <= 1'd1;
                main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value <= (main_basesoc_wishbone_interface_reader_length + 3'd4);
                main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd1;
                if (main_basesoc_wishbone_interface_reader_source_source_last) begin
                    builder_liteethmacsramreader_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value <= 1'd0;
            main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd1;
            main_basesoc_wishbone_interface_reader_eventsourcepulse_trigger <= 1'd1;
            main_basesoc_wishbone_interface_reader_cmd_fifo_source_ready <= 1'd1;
            builder_liteethmacsramreader_next_state <= 1'd0;
        end
        default: begin
            if (main_basesoc_wishbone_interface_reader_cmd_fifo_source_valid) begin
                main_basesoc_wishbone_interface_reader_read <= 1'd1;
                main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value <= 3'd4;
                main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd1;
                builder_liteethmacsramreader_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_wishbone_interface_ev_irq = (main_basesoc_wishbone_interface_writer_irq | main_basesoc_wishbone_interface_reader_irq);
assign main_basesoc_wishbone_interface_sram0_adr = main_basesoc_wishbone_interface_interface0_adr[8:0];
assign main_basesoc_wishbone_interface_interface0_dat_r = main_basesoc_wishbone_interface_sram0_dat_r;
assign main_basesoc_wishbone_interface_sram1_adr = main_basesoc_wishbone_interface_interface1_adr[8:0];
assign main_basesoc_wishbone_interface_interface1_dat_r = main_basesoc_wishbone_interface_sram1_dat_r;
always @(*) begin
    main_basesoc_wishbone_interface_decoder0_slave_sel <= 2'd0;
    main_basesoc_wishbone_interface_decoder0_slave_sel[0] <= (main_basesoc_wishbone_interface_bus_rx_adr[9] == 1'd0);
    main_basesoc_wishbone_interface_decoder0_slave_sel[1] <= (main_basesoc_wishbone_interface_bus_rx_adr[9] == 1'd1);
end
assign main_basesoc_wishbone_interface_interface0_adr = main_basesoc_wishbone_interface_bus_rx_adr;
assign main_basesoc_wishbone_interface_interface0_dat_w = main_basesoc_wishbone_interface_bus_rx_dat_w;
assign main_basesoc_wishbone_interface_interface0_sel = main_basesoc_wishbone_interface_bus_rx_sel;
assign main_basesoc_wishbone_interface_interface0_stb = main_basesoc_wishbone_interface_bus_rx_stb;
assign main_basesoc_wishbone_interface_interface0_we = main_basesoc_wishbone_interface_bus_rx_we;
assign main_basesoc_wishbone_interface_interface0_cti = main_basesoc_wishbone_interface_bus_rx_cti;
assign main_basesoc_wishbone_interface_interface0_bte = main_basesoc_wishbone_interface_bus_rx_bte;
assign main_basesoc_wishbone_interface_interface1_adr = main_basesoc_wishbone_interface_bus_rx_adr;
assign main_basesoc_wishbone_interface_interface1_dat_w = main_basesoc_wishbone_interface_bus_rx_dat_w;
assign main_basesoc_wishbone_interface_interface1_sel = main_basesoc_wishbone_interface_bus_rx_sel;
assign main_basesoc_wishbone_interface_interface1_stb = main_basesoc_wishbone_interface_bus_rx_stb;
assign main_basesoc_wishbone_interface_interface1_we = main_basesoc_wishbone_interface_bus_rx_we;
assign main_basesoc_wishbone_interface_interface1_cti = main_basesoc_wishbone_interface_bus_rx_cti;
assign main_basesoc_wishbone_interface_interface1_bte = main_basesoc_wishbone_interface_bus_rx_bte;
assign main_basesoc_wishbone_interface_interface0_cyc = (main_basesoc_wishbone_interface_bus_rx_cyc & main_basesoc_wishbone_interface_decoder0_slave_sel[0]);
assign main_basesoc_wishbone_interface_interface1_cyc = (main_basesoc_wishbone_interface_bus_rx_cyc & main_basesoc_wishbone_interface_decoder0_slave_sel[1]);
assign main_basesoc_wishbone_interface_bus_rx_ack = (main_basesoc_wishbone_interface_interface0_ack | main_basesoc_wishbone_interface_interface1_ack);
assign main_basesoc_wishbone_interface_bus_rx_err = (main_basesoc_wishbone_interface_interface0_err | main_basesoc_wishbone_interface_interface1_err);
assign main_basesoc_wishbone_interface_bus_rx_dat_r = (({32{main_basesoc_wishbone_interface_decoder0_slave_sel_r[0]}} & main_basesoc_wishbone_interface_interface0_dat_r) | ({32{main_basesoc_wishbone_interface_decoder0_slave_sel_r[1]}} & main_basesoc_wishbone_interface_interface1_dat_r));
always @(*) begin
    main_basesoc_wishbone_interface_sram2_we <= 4'd0;
    main_basesoc_wishbone_interface_sram2_we[0] <= (((main_basesoc_wishbone_interface_interface2_cyc & main_basesoc_wishbone_interface_interface2_stb) & main_basesoc_wishbone_interface_interface2_we) & main_basesoc_wishbone_interface_interface2_sel[0]);
    main_basesoc_wishbone_interface_sram2_we[1] <= (((main_basesoc_wishbone_interface_interface2_cyc & main_basesoc_wishbone_interface_interface2_stb) & main_basesoc_wishbone_interface_interface2_we) & main_basesoc_wishbone_interface_interface2_sel[1]);
    main_basesoc_wishbone_interface_sram2_we[2] <= (((main_basesoc_wishbone_interface_interface2_cyc & main_basesoc_wishbone_interface_interface2_stb) & main_basesoc_wishbone_interface_interface2_we) & main_basesoc_wishbone_interface_interface2_sel[2]);
    main_basesoc_wishbone_interface_sram2_we[3] <= (((main_basesoc_wishbone_interface_interface2_cyc & main_basesoc_wishbone_interface_interface2_stb) & main_basesoc_wishbone_interface_interface2_we) & main_basesoc_wishbone_interface_interface2_sel[3]);
end
assign main_basesoc_wishbone_interface_sram2_adr = main_basesoc_wishbone_interface_interface2_adr[8:0];
assign main_basesoc_wishbone_interface_interface2_dat_r = main_basesoc_wishbone_interface_sram2_dat_r;
assign main_basesoc_wishbone_interface_sram2_dat_w = main_basesoc_wishbone_interface_interface2_dat_w;
always @(*) begin
    main_basesoc_wishbone_interface_sram3_we <= 4'd0;
    main_basesoc_wishbone_interface_sram3_we[0] <= (((main_basesoc_wishbone_interface_interface3_cyc & main_basesoc_wishbone_interface_interface3_stb) & main_basesoc_wishbone_interface_interface3_we) & main_basesoc_wishbone_interface_interface3_sel[0]);
    main_basesoc_wishbone_interface_sram3_we[1] <= (((main_basesoc_wishbone_interface_interface3_cyc & main_basesoc_wishbone_interface_interface3_stb) & main_basesoc_wishbone_interface_interface3_we) & main_basesoc_wishbone_interface_interface3_sel[1]);
    main_basesoc_wishbone_interface_sram3_we[2] <= (((main_basesoc_wishbone_interface_interface3_cyc & main_basesoc_wishbone_interface_interface3_stb) & main_basesoc_wishbone_interface_interface3_we) & main_basesoc_wishbone_interface_interface3_sel[2]);
    main_basesoc_wishbone_interface_sram3_we[3] <= (((main_basesoc_wishbone_interface_interface3_cyc & main_basesoc_wishbone_interface_interface3_stb) & main_basesoc_wishbone_interface_interface3_we) & main_basesoc_wishbone_interface_interface3_sel[3]);
end
assign main_basesoc_wishbone_interface_sram3_adr = main_basesoc_wishbone_interface_interface3_adr[8:0];
assign main_basesoc_wishbone_interface_interface3_dat_r = main_basesoc_wishbone_interface_sram3_dat_r;
assign main_basesoc_wishbone_interface_sram3_dat_w = main_basesoc_wishbone_interface_interface3_dat_w;
always @(*) begin
    main_basesoc_wishbone_interface_decoder1_slave_sel <= 2'd0;
    main_basesoc_wishbone_interface_decoder1_slave_sel[0] <= (main_basesoc_wishbone_interface_bus_tx_adr[9] == 1'd0);
    main_basesoc_wishbone_interface_decoder1_slave_sel[1] <= (main_basesoc_wishbone_interface_bus_tx_adr[9] == 1'd1);
end
assign main_basesoc_wishbone_interface_interface2_adr = main_basesoc_wishbone_interface_bus_tx_adr;
assign main_basesoc_wishbone_interface_interface2_dat_w = main_basesoc_wishbone_interface_bus_tx_dat_w;
assign main_basesoc_wishbone_interface_interface2_sel = main_basesoc_wishbone_interface_bus_tx_sel;
assign main_basesoc_wishbone_interface_interface2_stb = main_basesoc_wishbone_interface_bus_tx_stb;
assign main_basesoc_wishbone_interface_interface2_we = main_basesoc_wishbone_interface_bus_tx_we;
assign main_basesoc_wishbone_interface_interface2_cti = main_basesoc_wishbone_interface_bus_tx_cti;
assign main_basesoc_wishbone_interface_interface2_bte = main_basesoc_wishbone_interface_bus_tx_bte;
assign main_basesoc_wishbone_interface_interface3_adr = main_basesoc_wishbone_interface_bus_tx_adr;
assign main_basesoc_wishbone_interface_interface3_dat_w = main_basesoc_wishbone_interface_bus_tx_dat_w;
assign main_basesoc_wishbone_interface_interface3_sel = main_basesoc_wishbone_interface_bus_tx_sel;
assign main_basesoc_wishbone_interface_interface3_stb = main_basesoc_wishbone_interface_bus_tx_stb;
assign main_basesoc_wishbone_interface_interface3_we = main_basesoc_wishbone_interface_bus_tx_we;
assign main_basesoc_wishbone_interface_interface3_cti = main_basesoc_wishbone_interface_bus_tx_cti;
assign main_basesoc_wishbone_interface_interface3_bte = main_basesoc_wishbone_interface_bus_tx_bte;
assign main_basesoc_wishbone_interface_interface2_cyc = (main_basesoc_wishbone_interface_bus_tx_cyc & main_basesoc_wishbone_interface_decoder1_slave_sel[0]);
assign main_basesoc_wishbone_interface_interface3_cyc = (main_basesoc_wishbone_interface_bus_tx_cyc & main_basesoc_wishbone_interface_decoder1_slave_sel[1]);
assign main_basesoc_wishbone_interface_bus_tx_ack = (main_basesoc_wishbone_interface_interface2_ack | main_basesoc_wishbone_interface_interface3_ack);
assign main_basesoc_wishbone_interface_bus_tx_err = (main_basesoc_wishbone_interface_interface2_err | main_basesoc_wishbone_interface_interface3_err);
assign main_basesoc_wishbone_interface_bus_tx_dat_r = (({32{main_basesoc_wishbone_interface_decoder1_slave_sel_r[0]}} & main_basesoc_wishbone_interface_interface2_dat_r) | ({32{main_basesoc_wishbone_interface_decoder1_slave_sel_r[1]}} & main_basesoc_wishbone_interface_interface3_dat_r));
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_wishbone2csr_next_state <= 1'd0;
    builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
    case (builder_wishbone2csr_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr;
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage;
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage;
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status;
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign builder_csr_bankarray_csrbank1_sram_writer_slot_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_writer_slot_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_writer_slot_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_sram_writer_slot_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_writer_slot_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_writer_length_r = builder_csr_bankarray_interface1_bank_bus_dat_w[10:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_writer_length_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_writer_length_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_sram_writer_length_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_writer_length_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_writer_errors_r = builder_csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_writer_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_writer_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_sram_writer_errors_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_writer_errors_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_writer_ev_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_writer_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_writer_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank1_sram_writer_ev_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_writer_ev_status_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_writer_ev_pending_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_writer_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_writer_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank1_sram_writer_ev_pending_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_writer_ev_pending_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign main_basesoc_wishbone_interface_reader_start_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_basesoc_wishbone_interface_reader_start_re <= 1'd0;
    main_basesoc_wishbone_interface_reader_start_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        main_basesoc_wishbone_interface_reader_start_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_basesoc_wishbone_interface_reader_start_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_reader_ready_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_reader_ready_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_reader_ready_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank1_sram_reader_ready_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_reader_ready_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_reader_level_r = builder_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_reader_level_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_reader_level_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank1_sram_reader_level_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_reader_level_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_reader_slot0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_reader_slot0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_reader_slot0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank1_sram_reader_slot0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_reader_slot0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_reader_length0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[10:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_reader_length0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_reader_length0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csr_bankarray_csrbank1_sram_reader_length0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_reader_length0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_reader_ev_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_reader_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_reader_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank1_sram_reader_ev_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_reader_ev_status_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_reader_ev_pending_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_reader_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_reader_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank1_sram_reader_ev_pending_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_reader_ev_pending_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_preamble_crc_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_preamble_crc_re <= 1'd0;
    builder_csr_bankarray_csrbank1_preamble_crc_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd14))) begin
        builder_csr_bankarray_csrbank1_preamble_crc_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_preamble_crc_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_r = builder_csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_r = builder_csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 5'd16))) begin
        builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_sram_writer_slot_w = main_basesoc_wishbone_interface_writer_slot_status;
assign main_basesoc_wishbone_interface_writer_slot_we = builder_csr_bankarray_csrbank1_sram_writer_slot_we;
assign builder_csr_bankarray_csrbank1_sram_writer_length_w = main_basesoc_wishbone_interface_writer_length_status;
assign main_basesoc_wishbone_interface_writer_length_we = builder_csr_bankarray_csrbank1_sram_writer_length_we;
assign builder_csr_bankarray_csrbank1_sram_writer_errors_w = main_basesoc_wishbone_interface_writer_errors_status;
assign main_basesoc_wishbone_interface_writer_errors_we = builder_csr_bankarray_csrbank1_sram_writer_errors_we;
assign main_basesoc_wishbone_interface_writer_status_status = main_basesoc_wishbone_interface_writer_available0;
assign builder_csr_bankarray_csrbank1_sram_writer_ev_status_w = main_basesoc_wishbone_interface_writer_status_status;
assign main_basesoc_wishbone_interface_writer_status_we = builder_csr_bankarray_csrbank1_sram_writer_ev_status_we;
assign main_basesoc_wishbone_interface_writer_pending_status = main_basesoc_wishbone_interface_writer_available1;
assign builder_csr_bankarray_csrbank1_sram_writer_ev_pending_w = main_basesoc_wishbone_interface_writer_pending_status;
assign main_basesoc_wishbone_interface_writer_pending_we = builder_csr_bankarray_csrbank1_sram_writer_ev_pending_we;
assign main_basesoc_wishbone_interface_writer_available2 = main_basesoc_wishbone_interface_writer_enable_storage;
assign builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_w = main_basesoc_wishbone_interface_writer_enable_storage;
assign builder_csr_bankarray_csrbank1_sram_reader_ready_w = main_basesoc_wishbone_interface_reader_ready_status;
assign main_basesoc_wishbone_interface_reader_ready_we = builder_csr_bankarray_csrbank1_sram_reader_ready_we;
assign builder_csr_bankarray_csrbank1_sram_reader_level_w = main_basesoc_wishbone_interface_reader_level_status;
assign main_basesoc_wishbone_interface_reader_level_we = builder_csr_bankarray_csrbank1_sram_reader_level_we;
assign builder_csr_bankarray_csrbank1_sram_reader_slot0_w = main_basesoc_wishbone_interface_reader_slot_storage;
assign builder_csr_bankarray_csrbank1_sram_reader_length0_w = main_basesoc_wishbone_interface_reader_length_storage;
assign main_basesoc_wishbone_interface_reader_status_status = main_basesoc_wishbone_interface_reader_event00;
assign builder_csr_bankarray_csrbank1_sram_reader_ev_status_w = main_basesoc_wishbone_interface_reader_status_status;
assign main_basesoc_wishbone_interface_reader_status_we = builder_csr_bankarray_csrbank1_sram_reader_ev_status_we;
assign main_basesoc_wishbone_interface_reader_pending_status = main_basesoc_wishbone_interface_reader_event01;
assign builder_csr_bankarray_csrbank1_sram_reader_ev_pending_w = main_basesoc_wishbone_interface_reader_pending_status;
assign main_basesoc_wishbone_interface_reader_pending_we = builder_csr_bankarray_csrbank1_sram_reader_ev_pending_we;
assign main_basesoc_wishbone_interface_reader_event02 = main_basesoc_wishbone_interface_reader_enable_storage;
assign builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_w = main_basesoc_wishbone_interface_reader_enable_storage;
assign builder_csr_bankarray_csrbank1_preamble_crc_w = main_basesoc_core_status;
assign main_basesoc_core_we = builder_csr_bankarray_csrbank1_preamble_crc_we;
assign builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_w = main_basesoc_core_preamble_errors_status;
assign main_basesoc_core_preamble_errors_we = builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_we;
assign builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_w = main_basesoc_core_crc_errors_status;
assign main_basesoc_core_crc_errors_we = builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_we;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank2_crg_reset0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_crg_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_crg_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_crg_reset0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_crg_reset0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_crg_reset0_w = main_ethphy_reset_storage;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 2'd3);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank3_out0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_out0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_out0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_out0_w = main_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank4_load0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_load0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_load0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_reload0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_reload0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_reload0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_en0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank4_en0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_en0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_update_value0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_update_value0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_update_value0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_value_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_value_re <= 1'd0;
    builder_csr_bankarray_csrbank4_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_value_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_value_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_status_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_ev_status_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_status_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_pending_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_ev_pending_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_pending_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_ev_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_enable0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_load0_w = main_basesoc_timer_load_storage;
assign builder_csr_bankarray_csrbank4_reload0_w = main_basesoc_timer_reload_storage;
assign builder_csr_bankarray_csrbank4_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank4_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank4_value_w = main_basesoc_timer_value_status;
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank4_value_we;
assign main_basesoc_timer_status_status = main_basesoc_timer_zero0;
assign builder_csr_bankarray_csrbank4_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank4_ev_status_we;
assign main_basesoc_timer_pending_status = main_basesoc_timer_zero1;
assign builder_csr_bankarray_csrbank4_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank4_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank4_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_txfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank5_txfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_txfull_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_rxempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank5_rxempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_rxempty_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_status_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank5_ev_status_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_status_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_pending_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank5_ev_pending_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_pending_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_enable0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank5_ev_enable0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_enable0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_txempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank5_txempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_txempty_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_rxfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank5_rxfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_rxfull_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank5_txfull_we;
assign builder_csr_bankarray_csrbank5_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank5_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank5_ev_status_w = main_basesoc_uart_status_status;
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank5_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank5_ev_pending_w = main_basesoc_uart_pending_status;
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank5_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank5_ev_enable0_w = main_basesoc_uart_enable_storage;
assign builder_csr_bankarray_csrbank5_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank5_txempty_we;
assign builder_csr_bankarray_csrbank5_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank5_rxfull_we;
assign builder_csr_interconnect_adr = builder_interface1_adr;
assign builder_csr_interconnect_re = builder_interface1_re;
assign builder_csr_interconnect_we = builder_interface1_we;
assign builder_csr_interconnect_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface5_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_self0 <= 30'd0;
    case (builder_grant)
        default: begin
            builder_self0 <= main_basesoc_adapted_interface_adr;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 32'd0;
    case (builder_grant)
        default: begin
            builder_self1 <= main_basesoc_adapted_interface_dat_w;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 4'd0;
    case (builder_grant)
        default: begin
            builder_self2 <= main_basesoc_adapted_interface_sel;
        end
    endcase
end
always @(*) begin
    builder_self3 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self3 <= main_basesoc_adapted_interface_cyc;
        end
    endcase
end
always @(*) begin
    builder_self4 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self4 <= main_basesoc_adapted_interface_stb;
        end
    endcase
end
always @(*) begin
    builder_self5 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self5 <= main_basesoc_adapted_interface_we;
        end
    endcase
end
always @(*) begin
    builder_self6 <= 3'd0;
    case (builder_grant)
        default: begin
            builder_self6 <= main_basesoc_adapted_interface_cti;
        end
    endcase
end
always @(*) begin
    builder_self7 <= 2'd0;
    case (builder_grant)
        default: begin
            builder_self7 <= main_basesoc_adapted_interface_bte;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl01;
assign main_basesoc_core_tx_cdc_cdc_produce_rdomain = builder_multiregimpl11;
assign main_basesoc_core_tx_cdc_cdc_consume_wdomain = builder_multiregimpl21;
assign main_basesoc_core_pulsesynchronizer0_toggle_o = builder_multiregimpl31;
assign main_basesoc_core_pulsesynchronizer1_toggle_o = builder_multiregimpl41;
assign main_basesoc_core_rx_cdc_cdc_produce_rdomain = builder_multiregimpl51;
assign main_basesoc_core_rx_cdc_cdc_consume_wdomain = builder_multiregimpl61;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge eth_rmii_clocks_ref_clk) begin
    if (main_ethphy_liteethphyrmiirx_ce) begin
        main_ethphy_liteethphyrmiirx_crs_dv <= main_ethphy_liteethphyrmiirx_crs_dv_i;
        main_ethphy_liteethphyrmiirx_rx_data <= main_ethphy_liteethphyrmiirx_rx_data_i;
    end
    if (main_ethphy_liteethphyrmiirx_ce) begin
        main_ethphy_liteethphyrmiirx_crs_dv_d <= main_ethphy_liteethphyrmiirx_crs_dv;
    end
    if (main_ethphy_liteethphyrmiirx_crs_first) begin
        main_ethphy_liteethphyrmiirx_crs_run <= 1'd1;
    end
    if (main_ethphy_liteethphyrmiirx_crs_last) begin
        main_ethphy_liteethphyrmiirx_crs_run <= 1'd0;
    end
    main_ethphy_liteethphyrmiirx_timer <= (main_ethphy_liteethphyrmiirx_timer - 1'd1);
    if ((main_ethphy_liteethphyrmiirx_ce | main_ethphy_liteethphyrmiirx_rst)) begin
        case (main_ethphy_liteethphyrmiirx_speed0)
            1'd0: begin
                main_ethphy_liteethphyrmiirx_timer <= 4'd9;
            end
            1'd1: begin
                main_ethphy_liteethphyrmiirx_timer <= 1'd0;
            end
        endcase
    end
    if (main_ethphy_liteethphyrmiirx_converter_source_ready) begin
        main_ethphy_liteethphyrmiirx_converter_strobe_all <= 1'd0;
    end
    if (main_ethphy_liteethphyrmiirx_converter_load_part) begin
        if (((main_ethphy_liteethphyrmiirx_converter_demux == 2'd3) | main_ethphy_liteethphyrmiirx_converter_sink_last)) begin
            main_ethphy_liteethphyrmiirx_converter_demux <= 1'd0;
            main_ethphy_liteethphyrmiirx_converter_strobe_all <= 1'd1;
        end else begin
            main_ethphy_liteethphyrmiirx_converter_demux <= (main_ethphy_liteethphyrmiirx_converter_demux + 1'd1);
        end
    end
    if ((main_ethphy_liteethphyrmiirx_converter_source_valid & main_ethphy_liteethphyrmiirx_converter_source_ready)) begin
        if ((main_ethphy_liteethphyrmiirx_converter_sink_valid & main_ethphy_liteethphyrmiirx_converter_sink_ready)) begin
            main_ethphy_liteethphyrmiirx_converter_source_first <= main_ethphy_liteethphyrmiirx_converter_sink_first;
            main_ethphy_liteethphyrmiirx_converter_source_last <= main_ethphy_liteethphyrmiirx_converter_sink_last;
        end else begin
            main_ethphy_liteethphyrmiirx_converter_source_first <= 1'd0;
            main_ethphy_liteethphyrmiirx_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_ethphy_liteethphyrmiirx_converter_sink_valid & main_ethphy_liteethphyrmiirx_converter_sink_ready)) begin
            main_ethphy_liteethphyrmiirx_converter_source_first <= (main_ethphy_liteethphyrmiirx_converter_sink_first | main_ethphy_liteethphyrmiirx_converter_source_first);
            main_ethphy_liteethphyrmiirx_converter_source_last <= (main_ethphy_liteethphyrmiirx_converter_sink_last | main_ethphy_liteethphyrmiirx_converter_source_last);
        end
    end
    if (main_ethphy_liteethphyrmiirx_converter_load_part) begin
        case (main_ethphy_liteethphyrmiirx_converter_demux)
            1'd0: begin
                main_ethphy_liteethphyrmiirx_converter_source_payload_data[1:0] <= main_ethphy_liteethphyrmiirx_converter_sink_payload_data;
            end
            1'd1: begin
                main_ethphy_liteethphyrmiirx_converter_source_payload_data[3:2] <= main_ethphy_liteethphyrmiirx_converter_sink_payload_data;
            end
            2'd2: begin
                main_ethphy_liteethphyrmiirx_converter_source_payload_data[5:4] <= main_ethphy_liteethphyrmiirx_converter_sink_payload_data;
            end
            2'd3: begin
                main_ethphy_liteethphyrmiirx_converter_source_payload_data[7:6] <= main_ethphy_liteethphyrmiirx_converter_sink_payload_data;
            end
        endcase
    end
    if (main_ethphy_liteethphyrmiirx_converter_load_part) begin
        main_ethphy_liteethphyrmiirx_converter_source_payload_valid_token_count <= (main_ethphy_liteethphyrmiirx_converter_demux + 1'd1);
    end
    if (((~main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_valid) | main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_ready)) begin
        main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_valid <= main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_valid;
        main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_first <= main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_first;
        main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_last <= main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_last;
        main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_payload_data <= main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_sink_payload_data;
    end
    if (((~main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_valid) | main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_ready)) begin
        main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_valid <= main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_valid;
        main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_first <= main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_first;
        main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_last <= main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_last;
        main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_payload_data <= main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_sink_payload_data;
    end
    builder_liteethphyrmii_state <= builder_liteethphyrmii_next_state;
    if (main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value_ce0) begin
        main_ethphy_liteethphyrmiirx_count <= main_ethphy_liteethphyrmiirx_count_liteethphyrmii_next_value0;
    end
    if (main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value_ce1) begin
        main_ethphy_liteethphyrmiirx_speed1 <= main_ethphy_liteethphyrmiirx_speed1_liteethphyrmii_next_value1;
    end
    builder_rxdatapath_liteethmacpreamblechecker_state <= builder_rxdatapath_liteethmacpreamblechecker_next_state;
    if (main_basesoc_core_pulsesynchronizer0_i) begin
        main_basesoc_core_pulsesynchronizer0_toggle_i <= (~main_basesoc_core_pulsesynchronizer0_toggle_i);
    end
    if (main_basesoc_core_liteethmaccrc32checker_crc_ce) begin
        main_basesoc_core_liteethmaccrc32checker_crc_reg <= main_basesoc_core_liteethmaccrc32checker_crc_crc_next;
    end
    if (main_basesoc_core_liteethmaccrc32checker_crc_reset) begin
        main_basesoc_core_liteethmaccrc32checker_crc_reg <= 32'd4294967295;
    end
    if (((main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_we & main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_writable) & (~main_basesoc_core_liteethmaccrc32checker_syncfifo_replace))) begin
        if ((main_basesoc_core_liteethmaccrc32checker_syncfifo_produce == 3'd4)) begin
            main_basesoc_core_liteethmaccrc32checker_syncfifo_produce <= 1'd0;
        end else begin
            main_basesoc_core_liteethmaccrc32checker_syncfifo_produce <= (main_basesoc_core_liteethmaccrc32checker_syncfifo_produce + 1'd1);
        end
    end
    if (main_basesoc_core_liteethmaccrc32checker_syncfifo_do_read) begin
        if ((main_basesoc_core_liteethmaccrc32checker_syncfifo_consume == 3'd4)) begin
            main_basesoc_core_liteethmaccrc32checker_syncfifo_consume <= 1'd0;
        end else begin
            main_basesoc_core_liteethmaccrc32checker_syncfifo_consume <= (main_basesoc_core_liteethmaccrc32checker_syncfifo_consume + 1'd1);
        end
    end
    if (((main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_we & main_basesoc_core_liteethmaccrc32checker_syncfifo_syncfifo_writable) & (~main_basesoc_core_liteethmaccrc32checker_syncfifo_replace))) begin
        if ((~main_basesoc_core_liteethmaccrc32checker_syncfifo_do_read)) begin
            main_basesoc_core_liteethmaccrc32checker_syncfifo_level <= (main_basesoc_core_liteethmaccrc32checker_syncfifo_level + 1'd1);
        end
    end else begin
        if (main_basesoc_core_liteethmaccrc32checker_syncfifo_do_read) begin
            main_basesoc_core_liteethmaccrc32checker_syncfifo_level <= (main_basesoc_core_liteethmaccrc32checker_syncfifo_level - 1'd1);
        end
    end
    if (main_basesoc_core_liteethmaccrc32checker_fifo_reset) begin
        main_basesoc_core_liteethmaccrc32checker_syncfifo_level <= 3'd0;
        main_basesoc_core_liteethmaccrc32checker_syncfifo_produce <= 3'd0;
        main_basesoc_core_liteethmaccrc32checker_syncfifo_consume <= 3'd0;
    end
    builder_rxdatapath_bufferizeendpoints_state <= builder_rxdatapath_bufferizeendpoints_next_state;
    if (main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0) begin
        main_basesoc_core_liteethmaccrc32checker_last_be <= main_basesoc_core_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0;
    end
    if (main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1) begin
        main_basesoc_core_liteethmaccrc32checker_crc_error1 <= main_basesoc_core_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1;
    end
    if (((~main_basesoc_core_bufferizeendpoints_pipe_valid_source_valid) | main_basesoc_core_bufferizeendpoints_pipe_valid_source_ready)) begin
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_valid <= main_basesoc_core_bufferizeendpoints_pipe_valid_sink_valid;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_first <= main_basesoc_core_bufferizeendpoints_pipe_valid_sink_first;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_last <= main_basesoc_core_bufferizeendpoints_pipe_valid_sink_last;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_data <= main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_data;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_last_be <= main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_last_be;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_error <= main_basesoc_core_bufferizeendpoints_pipe_valid_sink_payload_error;
    end
    if (main_basesoc_core_pulsesynchronizer1_i) begin
        main_basesoc_core_pulsesynchronizer1_toggle_i <= (~main_basesoc_core_pulsesynchronizer1_toggle_i);
    end
    if (main_basesoc_core_rx_converter_converter_source_ready) begin
        main_basesoc_core_rx_converter_converter_strobe_all <= 1'd0;
    end
    if (main_basesoc_core_rx_converter_converter_load_part) begin
        if (((main_basesoc_core_rx_converter_converter_demux == 2'd3) | main_basesoc_core_rx_converter_converter_sink_last)) begin
            main_basesoc_core_rx_converter_converter_demux <= 1'd0;
            main_basesoc_core_rx_converter_converter_strobe_all <= 1'd1;
        end else begin
            main_basesoc_core_rx_converter_converter_demux <= (main_basesoc_core_rx_converter_converter_demux + 1'd1);
        end
    end
    if ((main_basesoc_core_rx_converter_converter_source_valid & main_basesoc_core_rx_converter_converter_source_ready)) begin
        if ((main_basesoc_core_rx_converter_converter_sink_valid & main_basesoc_core_rx_converter_converter_sink_ready)) begin
            main_basesoc_core_rx_converter_converter_source_first <= main_basesoc_core_rx_converter_converter_sink_first;
            main_basesoc_core_rx_converter_converter_source_last <= main_basesoc_core_rx_converter_converter_sink_last;
        end else begin
            main_basesoc_core_rx_converter_converter_source_first <= 1'd0;
            main_basesoc_core_rx_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_basesoc_core_rx_converter_converter_sink_valid & main_basesoc_core_rx_converter_converter_sink_ready)) begin
            main_basesoc_core_rx_converter_converter_source_first <= (main_basesoc_core_rx_converter_converter_sink_first | main_basesoc_core_rx_converter_converter_source_first);
            main_basesoc_core_rx_converter_converter_source_last <= (main_basesoc_core_rx_converter_converter_sink_last | main_basesoc_core_rx_converter_converter_source_last);
        end
    end
    if (main_basesoc_core_rx_converter_converter_load_part) begin
        case (main_basesoc_core_rx_converter_converter_demux)
            1'd0: begin
                main_basesoc_core_rx_converter_converter_source_payload_data[9:0] <= main_basesoc_core_rx_converter_converter_sink_payload_data;
            end
            1'd1: begin
                main_basesoc_core_rx_converter_converter_source_payload_data[19:10] <= main_basesoc_core_rx_converter_converter_sink_payload_data;
            end
            2'd2: begin
                main_basesoc_core_rx_converter_converter_source_payload_data[29:20] <= main_basesoc_core_rx_converter_converter_sink_payload_data;
            end
            2'd3: begin
                main_basesoc_core_rx_converter_converter_source_payload_data[39:30] <= main_basesoc_core_rx_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (main_basesoc_core_rx_converter_converter_load_part) begin
        main_basesoc_core_rx_converter_converter_source_payload_valid_token_count <= (main_basesoc_core_rx_converter_converter_demux + 1'd1);
    end
    main_basesoc_core_rx_cdc_cdc_graycounter0_q_binary <= main_basesoc_core_rx_cdc_cdc_graycounter0_q_next_binary;
    main_basesoc_core_rx_cdc_cdc_graycounter0_q <= main_basesoc_core_rx_cdc_cdc_graycounter0_q_next;
    if (eth_rx_rst) begin
        main_ethphy_liteethphyrmiirx_timer <= 4'd0;
        main_ethphy_liteethphyrmiirx_crs_dv <= 1'd0;
        main_ethphy_liteethphyrmiirx_rx_data <= 2'd0;
        main_ethphy_liteethphyrmiirx_converter_source_payload_data <= 8'd0;
        main_ethphy_liteethphyrmiirx_converter_source_payload_valid_token_count <= 3'd0;
        main_ethphy_liteethphyrmiirx_converter_demux <= 2'd0;
        main_ethphy_liteethphyrmiirx_converter_strobe_all <= 1'd0;
        main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_valid <= 1'd0;
        main_ethphy_liteethphyrmiirx_delay_buffer0_pipe_valid_source_payload_data <= 2'd0;
        main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_valid <= 1'd0;
        main_ethphy_liteethphyrmiirx_delay_buffer1_pipe_valid_source_payload_data <= 2'd0;
        main_ethphy_liteethphyrmiirx_crs_run <= 1'd0;
        main_ethphy_liteethphyrmiirx_crs_dv_d <= 1'd0;
        main_ethphy_liteethphyrmiirx_speed1 <= 1'd0;
        main_ethphy_liteethphyrmiirx_count <= 10'd0;
        main_basesoc_core_liteethmaccrc32checker_crc_reg <= 32'd4294967295;
        main_basesoc_core_liteethmaccrc32checker_syncfifo_level <= 3'd0;
        main_basesoc_core_liteethmaccrc32checker_syncfifo_produce <= 3'd0;
        main_basesoc_core_liteethmaccrc32checker_syncfifo_consume <= 3'd0;
        main_basesoc_core_liteethmaccrc32checker_last_be <= 1'd0;
        main_basesoc_core_liteethmaccrc32checker_crc_error1 <= 1'd0;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_valid <= 1'd0;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_data <= 8'd0;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_last_be <= 1'd0;
        main_basesoc_core_bufferizeendpoints_pipe_valid_source_payload_error <= 1'd0;
        main_basesoc_core_rx_converter_converter_source_payload_data <= 40'd0;
        main_basesoc_core_rx_converter_converter_source_payload_valid_token_count <= 3'd0;
        main_basesoc_core_rx_converter_converter_demux <= 2'd0;
        main_basesoc_core_rx_converter_converter_strobe_all <= 1'd0;
        main_basesoc_core_rx_cdc_cdc_graycounter0_q <= 6'd0;
        main_basesoc_core_rx_cdc_cdc_graycounter0_q_binary <= 6'd0;
        builder_liteethphyrmii_state <= 2'd0;
        builder_rxdatapath_liteethmacpreamblechecker_state <= 1'd0;
        builder_rxdatapath_bufferizeendpoints_state <= 2'd0;
    end
    builder_multiregimpl60 <= main_basesoc_core_rx_cdc_cdc_graycounter1_q;
    builder_multiregimpl61 <= builder_multiregimpl60;
end

always @(posedge eth_rmii_clocks_ref_clk) begin
    main_ethphy_liteethphyrmiitx_timer <= (main_ethphy_liteethphyrmiitx_timer - 1'd1);
    if ((main_ethphy_liteethphyrmiitx_ce | main_ethphy_liteethphyrmiitx_rst)) begin
        case (main_ethphy_liteethphyrmiitx_speed)
            1'd0: begin
                main_ethphy_liteethphyrmiitx_timer <= 4'd9;
            end
            1'd1: begin
                main_ethphy_liteethphyrmiitx_timer <= 1'd0;
            end
        endcase
    end
    if ((main_ethphy_liteethphyrmiitx_converter_source_valid & main_ethphy_liteethphyrmiitx_converter_source_ready)) begin
        if (main_ethphy_liteethphyrmiitx_converter_last) begin
            main_ethphy_liteethphyrmiitx_converter_mux <= 1'd0;
        end else begin
            main_ethphy_liteethphyrmiitx_converter_mux <= (main_ethphy_liteethphyrmiitx_converter_mux + 1'd1);
        end
    end
    main_basesoc_core_tx_cdc_cdc_graycounter1_q_binary <= main_basesoc_core_tx_cdc_cdc_graycounter1_q_next_binary;
    main_basesoc_core_tx_cdc_cdc_graycounter1_q <= main_basesoc_core_tx_cdc_cdc_graycounter1_q_next;
    if ((main_basesoc_core_tx_converter_converter_source_valid & main_basesoc_core_tx_converter_converter_source_ready)) begin
        if (main_basesoc_core_tx_converter_converter_last) begin
            main_basesoc_core_tx_converter_converter_mux <= 1'd0;
        end else begin
            main_basesoc_core_tx_converter_converter_mux <= (main_basesoc_core_tx_converter_converter_mux + 1'd1);
        end
    end
    builder_txdatapath_liteethmactxlastbe_state <= builder_txdatapath_liteethmactxlastbe_next_state;
    builder_txdatapath_liteethmacpaddinginserter_state <= builder_txdatapath_liteethmacpaddinginserter_next_state;
    if (main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce) begin
        main_basesoc_core_tx_padding_counter <= main_basesoc_core_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value;
    end
    if (main_basesoc_core_tx_crc_is_ongoing0) begin
        main_basesoc_core_tx_crc_cnt <= 2'd3;
    end else begin
        if ((main_basesoc_core_tx_crc_is_ongoing1 & (~main_basesoc_core_tx_crc_cnt_done))) begin
            main_basesoc_core_tx_crc_cnt <= (main_basesoc_core_tx_crc_cnt - main_basesoc_core_tx_crc_source_ready);
        end
    end
    if (main_basesoc_core_tx_crc_ce) begin
        main_basesoc_core_tx_crc_reg <= main_basesoc_core_tx_crc_crc_next;
    end
    if (main_basesoc_core_tx_crc_reset) begin
        main_basesoc_core_tx_crc_reg <= 32'd4294967295;
    end
    builder_txdatapath_bufferizeendpoints_state <= builder_txdatapath_bufferizeendpoints_next_state;
    if (main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0) begin
        main_basesoc_core_tx_crc_crc_packet <= main_basesoc_core_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0;
    end
    if (main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1) begin
        main_basesoc_core_tx_crc_last_be <= main_basesoc_core_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1;
    end
    if (((~main_basesoc_core_tx_crc_pipe_valid_source_valid) | main_basesoc_core_tx_crc_pipe_valid_source_ready)) begin
        main_basesoc_core_tx_crc_pipe_valid_source_valid <= main_basesoc_core_tx_crc_pipe_valid_sink_valid;
        main_basesoc_core_tx_crc_pipe_valid_source_first <= main_basesoc_core_tx_crc_pipe_valid_sink_first;
        main_basesoc_core_tx_crc_pipe_valid_source_last <= main_basesoc_core_tx_crc_pipe_valid_sink_last;
        main_basesoc_core_tx_crc_pipe_valid_source_payload_data <= main_basesoc_core_tx_crc_pipe_valid_sink_payload_data;
        main_basesoc_core_tx_crc_pipe_valid_source_payload_last_be <= main_basesoc_core_tx_crc_pipe_valid_sink_payload_last_be;
        main_basesoc_core_tx_crc_pipe_valid_source_payload_error <= main_basesoc_core_tx_crc_pipe_valid_sink_payload_error;
    end
    builder_txdatapath_liteethmacpreambleinserter_state <= builder_txdatapath_liteethmacpreambleinserter_next_state;
    if (main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce) begin
        main_basesoc_core_tx_preamble_count <= main_basesoc_core_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value;
    end
    builder_txdatapath_liteethmacgap_state <= builder_txdatapath_liteethmacgap_next_state;
    if (main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce) begin
        main_basesoc_core_tx_gap_counter <= main_basesoc_core_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value;
    end
    if (eth_tx_rst) begin
        main_ethphy_liteethphyrmiitx_timer <= 4'd0;
        main_ethphy_liteethphyrmiitx_converter_mux <= 2'd0;
        main_basesoc_core_tx_cdc_cdc_graycounter1_q <= 6'd0;
        main_basesoc_core_tx_cdc_cdc_graycounter1_q_binary <= 6'd0;
        main_basesoc_core_tx_converter_converter_mux <= 2'd0;
        main_basesoc_core_tx_padding_counter <= 16'd0;
        main_basesoc_core_tx_crc_reg <= 32'd4294967295;
        main_basesoc_core_tx_crc_cnt <= 2'd3;
        main_basesoc_core_tx_crc_pipe_valid_source_valid <= 1'd0;
        main_basesoc_core_tx_crc_pipe_valid_source_payload_data <= 8'd0;
        main_basesoc_core_tx_crc_pipe_valid_source_payload_last_be <= 1'd0;
        main_basesoc_core_tx_crc_pipe_valid_source_payload_error <= 1'd0;
        builder_txdatapath_liteethmactxlastbe_state <= 1'd0;
        builder_txdatapath_liteethmacpaddinginserter_state <= 1'd0;
        builder_txdatapath_bufferizeendpoints_state <= 2'd0;
        builder_txdatapath_liteethmacpreambleinserter_state <= 2'd0;
        builder_txdatapath_liteethmacgap_state <= 1'd0;
    end
    builder_multiregimpl10 <= main_basesoc_core_tx_cdc_cdc_graycounter0_q;
    builder_multiregimpl11 <= builder_multiregimpl10;
end

always @(posedge sys_clk) begin
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata1 <= main_basesoc_idbus_dat_r;
    end
    builder_femtorv_state <= builder_femtorv_next_state;
    if (main_basesoc_idbus_adr_femtorv_next_value_ce0) begin
        main_basesoc_idbus_adr <= main_basesoc_idbus_adr_femtorv_next_value0;
    end
    if (main_basesoc_idbus_dat_w_femtorv_next_value_ce1) begin
        main_basesoc_idbus_dat_w <= main_basesoc_idbus_dat_w_femtorv_next_value1;
    end
    if (main_basesoc_idbus_sel_femtorv_next_value_ce2) begin
        main_basesoc_idbus_sel <= main_basesoc_idbus_sel_femtorv_next_value2;
    end
    if (main_basesoc_idbus_we_femtorv_next_value_ce3) begin
        main_basesoc_idbus_we <= main_basesoc_idbus_we_femtorv_next_value3;
    end
    main_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & ((~main_basesoc_ram_bus_ack) | main_basesoc_adr_burst))) begin
        main_basesoc_ram_bus_ack <= 1'd1;
    end
    main_basesoc_interface0_ram_bus_ack <= 1'd0;
    if (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & ((~main_basesoc_interface0_ram_bus_ack) | main_basesoc_sram0_adr_burst))) begin
        main_basesoc_interface0_ram_bus_ack <= 1'd1;
    end
    main_basesoc_interface1_ram_bus_ack <= 1'd0;
    if (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & ((~main_basesoc_interface1_ram_bus_ack) | main_basesoc_sram1_adr_burst))) begin
        main_basesoc_interface1_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 25'd20615843;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 25'd20615843);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 25'd20615843);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser)};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 24'd12000000;
    end
    if (main_ethphy_counter_ce) begin
        main_ethphy_counter <= (main_ethphy_counter + 1'd1);
    end
    main_basesoc_core_tx_cdc_cdc_graycounter0_q_binary <= main_basesoc_core_tx_cdc_cdc_graycounter0_q_next_binary;
    main_basesoc_core_tx_cdc_cdc_graycounter0_q <= main_basesoc_core_tx_cdc_cdc_graycounter0_q_next;
    if (main_basesoc_core_pulsesynchronizer0_o) begin
        main_basesoc_core_preamble_errors_status <= (main_basesoc_core_preamble_errors_status + 1'd1);
    end
    if (main_basesoc_core_pulsesynchronizer1_o) begin
        main_basesoc_core_crc_errors_status <= (main_basesoc_core_crc_errors_status + 1'd1);
    end
    main_basesoc_core_pulsesynchronizer0_toggle_o_r <= main_basesoc_core_pulsesynchronizer0_toggle_o;
    main_basesoc_core_pulsesynchronizer1_toggle_o_r <= main_basesoc_core_pulsesynchronizer1_toggle_o;
    main_basesoc_core_rx_cdc_cdc_graycounter1_q_binary <= main_basesoc_core_rx_cdc_cdc_graycounter1_q_next_binary;
    main_basesoc_core_rx_cdc_cdc_graycounter1_q <= main_basesoc_core_rx_cdc_cdc_graycounter1_q_next;
    if (((main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_we & main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_writable) & (~main_basesoc_wishbone_interface_writer_stat_fifo_replace))) begin
        main_basesoc_wishbone_interface_writer_stat_fifo_produce <= (main_basesoc_wishbone_interface_writer_stat_fifo_produce + 1'd1);
    end
    if (main_basesoc_wishbone_interface_writer_stat_fifo_do_read) begin
        main_basesoc_wishbone_interface_writer_stat_fifo_consume <= (main_basesoc_wishbone_interface_writer_stat_fifo_consume + 1'd1);
    end
    if (((main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_we & main_basesoc_wishbone_interface_writer_stat_fifo_syncfifo_writable) & (~main_basesoc_wishbone_interface_writer_stat_fifo_replace))) begin
        if ((~main_basesoc_wishbone_interface_writer_stat_fifo_do_read)) begin
            main_basesoc_wishbone_interface_writer_stat_fifo_level <= (main_basesoc_wishbone_interface_writer_stat_fifo_level + 1'd1);
        end
    end else begin
        if (main_basesoc_wishbone_interface_writer_stat_fifo_do_read) begin
            main_basesoc_wishbone_interface_writer_stat_fifo_level <= (main_basesoc_wishbone_interface_writer_stat_fifo_level - 1'd1);
        end
    end
    builder_liteethmacsramwriter_state <= builder_liteethmacsramwriter_next_state;
    if (main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce) begin
        main_basesoc_wishbone_interface_writer_length <= main_basesoc_wishbone_interface_writer_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value;
    end
    if (main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce) begin
        main_basesoc_wishbone_interface_writer_errors_status <= main_basesoc_wishbone_interface_writer_errors_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value;
    end
    if (main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce) begin
        main_basesoc_wishbone_interface_writer_slot <= main_basesoc_wishbone_interface_writer_slot_clockdomainsrenamer_liteethmacsramwriter_next_value;
    end
    if (main_basesoc_wishbone_interface_reader_eventsourcepulse_clear) begin
        main_basesoc_wishbone_interface_reader_eventsourcepulse_pending <= 1'd0;
    end
    if (main_basesoc_wishbone_interface_reader_eventsourcepulse_trigger) begin
        main_basesoc_wishbone_interface_reader_eventsourcepulse_pending <= 1'd1;
    end
    if (((main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_we & main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_writable) & (~main_basesoc_wishbone_interface_reader_cmd_fifo_replace))) begin
        main_basesoc_wishbone_interface_reader_cmd_fifo_produce <= (main_basesoc_wishbone_interface_reader_cmd_fifo_produce + 1'd1);
    end
    if (main_basesoc_wishbone_interface_reader_cmd_fifo_do_read) begin
        main_basesoc_wishbone_interface_reader_cmd_fifo_consume <= (main_basesoc_wishbone_interface_reader_cmd_fifo_consume + 1'd1);
    end
    if (((main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_we & main_basesoc_wishbone_interface_reader_cmd_fifo_syncfifo_writable) & (~main_basesoc_wishbone_interface_reader_cmd_fifo_replace))) begin
        if ((~main_basesoc_wishbone_interface_reader_cmd_fifo_do_read)) begin
            main_basesoc_wishbone_interface_reader_cmd_fifo_level <= (main_basesoc_wishbone_interface_reader_cmd_fifo_level + 1'd1);
        end
    end else begin
        if (main_basesoc_wishbone_interface_reader_cmd_fifo_do_read) begin
            main_basesoc_wishbone_interface_reader_cmd_fifo_level <= (main_basesoc_wishbone_interface_reader_cmd_fifo_level - 1'd1);
        end
    end
    builder_liteethmacsramreader_state <= builder_liteethmacsramreader_next_state;
    if (main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce) begin
        main_basesoc_wishbone_interface_reader_length <= main_basesoc_wishbone_interface_reader_length_clockdomainsrenamer_liteethmacsramreader_next_value;
    end
    main_basesoc_wishbone_interface_interface0_ack <= 1'd0;
    if (((main_basesoc_wishbone_interface_interface0_cyc & main_basesoc_wishbone_interface_interface0_stb) & ((~main_basesoc_wishbone_interface_interface0_ack) | main_basesoc_wishbone_interface_sram0_adr_burst))) begin
        main_basesoc_wishbone_interface_interface0_ack <= 1'd1;
    end
    main_basesoc_wishbone_interface_interface1_ack <= 1'd0;
    if (((main_basesoc_wishbone_interface_interface1_cyc & main_basesoc_wishbone_interface_interface1_stb) & ((~main_basesoc_wishbone_interface_interface1_ack) | main_basesoc_wishbone_interface_sram1_adr_burst))) begin
        main_basesoc_wishbone_interface_interface1_ack <= 1'd1;
    end
    main_basesoc_wishbone_interface_decoder0_slave_sel_r <= main_basesoc_wishbone_interface_decoder0_slave_sel;
    main_basesoc_wishbone_interface_interface2_ack <= 1'd0;
    if (((main_basesoc_wishbone_interface_interface2_cyc & main_basesoc_wishbone_interface_interface2_stb) & ((~main_basesoc_wishbone_interface_interface2_ack) | main_basesoc_wishbone_interface_sram2_adr_burst))) begin
        main_basesoc_wishbone_interface_interface2_ack <= 1'd1;
    end
    main_basesoc_wishbone_interface_interface3_ack <= 1'd0;
    if (((main_basesoc_wishbone_interface_interface3_cyc & main_basesoc_wishbone_interface_interface3_stb) & ((~main_basesoc_wishbone_interface_interface3_ack) | main_basesoc_wishbone_interface_sram3_adr_burst))) begin
        main_basesoc_wishbone_interface_interface3_ack <= 1'd1;
    end
    main_basesoc_wishbone_interface_decoder1_slave_sel_r <= main_basesoc_wishbone_interface_decoder1_slave_sel;
    builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_writer_slot_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_writer_length_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_writer_errors_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_writer_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_writer_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_basesoc_wishbone_interface_reader_start_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_reader_ready_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_reader_level_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_reader_slot0_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_reader_length0_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_reader_ev_status_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_reader_ev_pending_w;
            end
            4'd13: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_w;
            end
            4'd14: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_preamble_crc_w;
            end
            4'd15: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_w;
            end
            5'd16: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_w;
            end
        endcase
    end
    main_basesoc_wishbone_interface_writer_slot_re <= builder_csr_bankarray_csrbank1_sram_writer_slot_re;
    main_basesoc_wishbone_interface_writer_length_re <= builder_csr_bankarray_csrbank1_sram_writer_length_re;
    main_basesoc_wishbone_interface_writer_errors_re <= builder_csr_bankarray_csrbank1_sram_writer_errors_re;
    main_basesoc_wishbone_interface_writer_status_re <= builder_csr_bankarray_csrbank1_sram_writer_ev_status_re;
    if (builder_csr_bankarray_csrbank1_sram_writer_ev_pending_re) begin
        main_basesoc_wishbone_interface_writer_pending_r <= builder_csr_bankarray_csrbank1_sram_writer_ev_pending_r;
    end
    main_basesoc_wishbone_interface_writer_pending_re <= builder_csr_bankarray_csrbank1_sram_writer_ev_pending_re;
    if (builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_re) begin
        main_basesoc_wishbone_interface_writer_enable_storage <= builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_r;
    end
    main_basesoc_wishbone_interface_writer_enable_re <= builder_csr_bankarray_csrbank1_sram_writer_ev_enable0_re;
    main_basesoc_wishbone_interface_reader_ready_re <= builder_csr_bankarray_csrbank1_sram_reader_ready_re;
    main_basesoc_wishbone_interface_reader_level_re <= builder_csr_bankarray_csrbank1_sram_reader_level_re;
    if (builder_csr_bankarray_csrbank1_sram_reader_slot0_re) begin
        main_basesoc_wishbone_interface_reader_slot_storage <= builder_csr_bankarray_csrbank1_sram_reader_slot0_r;
    end
    main_basesoc_wishbone_interface_reader_slot_re <= builder_csr_bankarray_csrbank1_sram_reader_slot0_re;
    if (builder_csr_bankarray_csrbank1_sram_reader_length0_re) begin
        main_basesoc_wishbone_interface_reader_length_storage <= builder_csr_bankarray_csrbank1_sram_reader_length0_r;
    end
    main_basesoc_wishbone_interface_reader_length_re <= builder_csr_bankarray_csrbank1_sram_reader_length0_re;
    main_basesoc_wishbone_interface_reader_status_re <= builder_csr_bankarray_csrbank1_sram_reader_ev_status_re;
    if (builder_csr_bankarray_csrbank1_sram_reader_ev_pending_re) begin
        main_basesoc_wishbone_interface_reader_pending_r <= builder_csr_bankarray_csrbank1_sram_reader_ev_pending_r;
    end
    main_basesoc_wishbone_interface_reader_pending_re <= builder_csr_bankarray_csrbank1_sram_reader_ev_pending_re;
    if (builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_re) begin
        main_basesoc_wishbone_interface_reader_enable_storage <= builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_r;
    end
    main_basesoc_wishbone_interface_reader_enable_re <= builder_csr_bankarray_csrbank1_sram_reader_ev_enable0_re;
    main_basesoc_core_re <= builder_csr_bankarray_csrbank1_preamble_crc_re;
    main_basesoc_core_preamble_errors_re <= builder_csr_bankarray_csrbank1_rx_datapath_preamble_errors_re;
    main_basesoc_core_crc_errors_re <= builder_csr_bankarray_csrbank1_rx_datapath_crc_errors_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_crg_reset0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_crg_reset0_re) begin
        main_ethphy_reset_storage <= builder_csr_bankarray_csrbank2_crg_reset0_r;
    end
    main_ethphy_reset_re <= builder_csr_bankarray_csrbank2_crg_reset0_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_out0_re) begin
        main_storage <= builder_csr_bankarray_csrbank3_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank3_out0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_load0_re) begin
        main_basesoc_timer_load_storage <= builder_csr_bankarray_csrbank4_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank4_load0_re;
    if (builder_csr_bankarray_csrbank4_reload0_re) begin
        main_basesoc_timer_reload_storage <= builder_csr_bankarray_csrbank4_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank4_reload0_re;
    if (builder_csr_bankarray_csrbank4_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank4_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank4_en0_re;
    if (builder_csr_bankarray_csrbank4_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank4_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank4_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank4_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank4_ev_status_re;
    if (builder_csr_bankarray_csrbank4_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank4_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank4_ev_pending_re;
    if (builder_csr_bankarray_csrbank4_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank4_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank4_ev_enable0_re;
    builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank5_sel) begin
        case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank5_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank5_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank5_ev_status_re;
    if (builder_csr_bankarray_csrbank5_ev_pending_re) begin
        main_basesoc_uart_pending_r <= builder_csr_bankarray_csrbank5_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank5_ev_pending_re;
    if (builder_csr_bankarray_csrbank5_ev_enable0_re) begin
        main_basesoc_uart_enable_storage <= builder_csr_bankarray_csrbank5_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank5_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank5_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank5_rxfull_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_idbus_we <= 1'd0;
        main_basesoc_mbus_rdata1 <= 32'd0;
        main_basesoc_ram_bus_ack <= 1'd0;
        main_basesoc_interface0_ram_bus_ack <= 1'd0;
        main_basesoc_interface1_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_storage <= 1'd0;
        main_re <= 1'd0;
        main_chaser <= 1'd0;
        main_mode <= 1'd0;
        main_count <= 24'd12000000;
        main_ethphy_reset_storage <= 1'd0;
        main_ethphy_reset_re <= 1'd0;
        main_ethphy_counter <= 9'd0;
        main_basesoc_core_re <= 1'd0;
        main_basesoc_core_tx_cdc_cdc_graycounter0_q <= 6'd0;
        main_basesoc_core_tx_cdc_cdc_graycounter0_q_binary <= 6'd0;
        main_basesoc_core_preamble_errors_status <= 32'd0;
        main_basesoc_core_preamble_errors_re <= 1'd0;
        main_basesoc_core_crc_errors_status <= 32'd0;
        main_basesoc_core_crc_errors_re <= 1'd0;
        main_basesoc_core_rx_cdc_cdc_graycounter1_q <= 6'd0;
        main_basesoc_core_rx_cdc_cdc_graycounter1_q_binary <= 6'd0;
        main_basesoc_wishbone_interface_writer_slot_re <= 1'd0;
        main_basesoc_wishbone_interface_writer_length_re <= 1'd0;
        main_basesoc_wishbone_interface_writer_errors_status <= 32'd0;
        main_basesoc_wishbone_interface_writer_errors_re <= 1'd0;
        main_basesoc_wishbone_interface_writer_status_re <= 1'd0;
        main_basesoc_wishbone_interface_writer_pending_re <= 1'd0;
        main_basesoc_wishbone_interface_writer_pending_r <= 1'd0;
        main_basesoc_wishbone_interface_writer_enable_storage <= 1'd0;
        main_basesoc_wishbone_interface_writer_enable_re <= 1'd0;
        main_basesoc_wishbone_interface_writer_slot <= 1'd0;
        main_basesoc_wishbone_interface_writer_length <= 11'd0;
        main_basesoc_wishbone_interface_writer_stat_fifo_level <= 2'd0;
        main_basesoc_wishbone_interface_writer_stat_fifo_produce <= 1'd0;
        main_basesoc_wishbone_interface_writer_stat_fifo_consume <= 1'd0;
        main_basesoc_wishbone_interface_reader_ready_re <= 1'd0;
        main_basesoc_wishbone_interface_reader_level_re <= 1'd0;
        main_basesoc_wishbone_interface_reader_slot_re <= 1'd0;
        main_basesoc_wishbone_interface_reader_length_re <= 1'd0;
        main_basesoc_wishbone_interface_reader_eventsourcepulse_pending <= 1'd0;
        main_basesoc_wishbone_interface_reader_status_re <= 1'd0;
        main_basesoc_wishbone_interface_reader_pending_re <= 1'd0;
        main_basesoc_wishbone_interface_reader_pending_r <= 1'd0;
        main_basesoc_wishbone_interface_reader_enable_storage <= 1'd0;
        main_basesoc_wishbone_interface_reader_enable_re <= 1'd0;
        main_basesoc_wishbone_interface_reader_length <= 11'd0;
        main_basesoc_wishbone_interface_reader_cmd_fifo_level <= 2'd0;
        main_basesoc_wishbone_interface_reader_cmd_fifo_produce <= 1'd0;
        main_basesoc_wishbone_interface_reader_cmd_fifo_consume <= 1'd0;
        main_basesoc_wishbone_interface_interface0_ack <= 1'd0;
        main_basesoc_wishbone_interface_interface1_ack <= 1'd0;
        main_basesoc_wishbone_interface_decoder0_slave_sel_r <= 2'd0;
        main_basesoc_wishbone_interface_interface2_ack <= 1'd0;
        main_basesoc_wishbone_interface_interface3_ack <= 1'd0;
        main_basesoc_wishbone_interface_decoder1_slave_sel_r <= 2'd0;
        builder_slave_sel_r <= 6'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_femtorv_state <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_liteethmacsramwriter_state <= 3'd0;
        builder_liteethmacsramreader_state <= 2'd0;
        builder_wishbone2csr_state <= 1'd0;
    end
    builder_multiregimpl00 <= serial_rx;
    builder_multiregimpl01 <= builder_multiregimpl00;
    builder_multiregimpl20 <= main_basesoc_core_tx_cdc_cdc_graycounter1_q;
    builder_multiregimpl21 <= builder_multiregimpl20;
    builder_multiregimpl30 <= main_basesoc_core_pulsesynchronizer0_toggle_i;
    builder_multiregimpl31 <= builder_multiregimpl30;
    builder_multiregimpl40 <= main_basesoc_core_pulsesynchronizer1_toggle_i;
    builder_multiregimpl41 <= builder_multiregimpl40;
    builder_multiregimpl50 <= main_basesoc_core_rx_cdc_cdc_graycounter0_q;
    builder_multiregimpl51 <= builder_multiregimpl50;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance CC_USR_RSTN of CC_USR_RSTN Module.
//------------------------------------------------------------------------------
CC_USR_RSTN CC_USR_RSTN(
	// Outputs.
	.USR_RSTN (main_crg_rst_n)
);

//------------------------------------------------------------------------------
// Memory rom: 7762-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:7761];
initial begin
	$readmemh("olimex_gatemate_a1_evb_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_adr];
end
assign main_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("olimex_gatemate_a1_evb_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_sram0_we[0])
		sram[main_basesoc_sram0_adr][7:0] <= main_basesoc_sram0_dat_w[7:0];
	if (main_basesoc_sram0_we[1])
		sram[main_basesoc_sram0_adr][15:8] <= main_basesoc_sram0_dat_w[15:8];
	if (main_basesoc_sram0_we[2])
		sram[main_basesoc_sram0_adr][23:16] <= main_basesoc_sram0_dat_w[23:16];
	if (main_basesoc_sram0_we[3])
		sram[main_basesoc_sram0_adr][31:24] <= main_basesoc_sram0_dat_w[31:24];
	sram_adr0 <= main_basesoc_sram0_adr;
end
assign main_basesoc_sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 16384-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:16383];
initial begin
	$readmemh("olimex_gatemate_a1_evb_main_ram.init", main_ram);
end
reg [13:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_sram1_we[0])
		main_ram[main_basesoc_sram1_adr][7:0] <= main_basesoc_sram1_dat_w[7:0];
	if (main_basesoc_sram1_we[1])
		main_ram[main_basesoc_sram1_adr][15:8] <= main_basesoc_sram1_dat_w[15:8];
	if (main_basesoc_sram1_we[2])
		main_ram[main_basesoc_sram1_adr][23:16] <= main_basesoc_sram1_dat_w[23:16];
	if (main_basesoc_sram1_we[3])
		main_ram[main_basesoc_sram1_adr][31:24] <= main_basesoc_sram1_dat_w[31:24];
	main_ram_adr0 <= main_basesoc_sram1_adr;
end
assign main_basesoc_sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("olimex_gatemate_a1_evb_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 32-words x 42-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 42 
// Port 1 | Read: Sync  | Write: ---- | 
reg [41:0] storage_2[0:31];
reg [41:0] storage_2_dat0;
reg [41:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_core_tx_cdc_cdc_wrport_we)
		storage_2[main_basesoc_core_tx_cdc_cdc_wrport_adr] <= main_basesoc_core_tx_cdc_cdc_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_basesoc_core_tx_cdc_cdc_wrport_adr];
end
always @(posedge eth_rmii_clocks_ref_clk) begin
	storage_2_dat1 <= storage_2[main_basesoc_core_tx_cdc_cdc_rdport_adr];
end
assign main_basesoc_core_tx_cdc_cdc_wrport_dat_r = storage_2_dat0;
assign main_basesoc_core_tx_cdc_cdc_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_3: 5-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Async | Write: ---- | 
reg [11:0] storage_3[0:4];
reg [11:0] storage_3_dat0;
always @(posedge eth_rmii_clocks_ref_clk) begin
	if (main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_we)
		storage_3[main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_adr] <= main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_adr];
end
always @(posedge eth_rmii_clocks_ref_clk) begin
end
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_wrport_dat_r = storage_3_dat0;
assign main_basesoc_core_liteethmaccrc32checker_syncfifo_rdport_dat_r = storage_3[main_basesoc_core_liteethmaccrc32checker_syncfifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 32-words x 42-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 42 
// Port 1 | Read: Sync  | Write: ---- | 
reg [41:0] storage_4[0:31];
reg [41:0] storage_4_dat0;
reg [41:0] storage_4_dat1;
always @(posedge eth_rmii_clocks_ref_clk) begin
	if (main_basesoc_core_rx_cdc_cdc_wrport_we)
		storage_4[main_basesoc_core_rx_cdc_cdc_wrport_adr] <= main_basesoc_core_rx_cdc_cdc_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_basesoc_core_rx_cdc_cdc_wrport_adr];
end
always @(posedge sys_clk) begin
	storage_4_dat1 <= storage_4[main_basesoc_core_rx_cdc_cdc_rdport_adr];
end
assign main_basesoc_core_rx_cdc_cdc_wrport_dat_r = storage_4_dat0;
assign main_basesoc_core_rx_cdc_cdc_rdport_dat_r = storage_4_dat1;


//------------------------------------------------------------------------------
// Memory storage_5: 2-words x 14-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 14 
// Port 1 | Read: Async | Write: ---- | 
reg [13:0] storage_5[0:1];
reg [13:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_writer_stat_fifo_wrport_we)
		storage_5[main_basesoc_wishbone_interface_writer_stat_fifo_wrport_adr] <= main_basesoc_wishbone_interface_writer_stat_fifo_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_basesoc_wishbone_interface_writer_stat_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_wishbone_interface_writer_stat_fifo_wrport_dat_r = storage_5_dat0;
assign main_basesoc_wishbone_interface_writer_stat_fifo_rdport_dat_r = storage_5[main_basesoc_wishbone_interface_writer_stat_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory mem_1: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
// Port 1 | Read: Sync  | Write: ---- | 
reg [31:0] mem_1[0:382];
reg [8:0] mem_1_adr0;
reg [31:0] mem_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_writer_memory0_we)
		mem_1[main_basesoc_wishbone_interface_writer_memory0_adr] <= main_basesoc_wishbone_interface_writer_memory0_dat_w;
	mem_1_adr0 <= main_basesoc_wishbone_interface_writer_memory0_adr;
end
always @(posedge sys_clk) begin
	mem_1_dat1 <= mem_1[main_basesoc_wishbone_interface_sram0_adr];
end
assign main_basesoc_wishbone_interface_writer_memory0_dat_r = mem_1[mem_1_adr0];
assign main_basesoc_wishbone_interface_sram0_dat_r = mem_1_dat1;


//------------------------------------------------------------------------------
// Memory mem_2: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
// Port 1 | Read: Sync  | Write: ---- | 
reg [31:0] mem_2[0:382];
reg [8:0] mem_2_adr0;
reg [31:0] mem_2_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_writer_memory1_we)
		mem_2[main_basesoc_wishbone_interface_writer_memory1_adr] <= main_basesoc_wishbone_interface_writer_memory1_dat_w;
	mem_2_adr0 <= main_basesoc_wishbone_interface_writer_memory1_adr;
end
always @(posedge sys_clk) begin
	mem_2_dat1 <= mem_2[main_basesoc_wishbone_interface_sram1_adr];
end
assign main_basesoc_wishbone_interface_writer_memory1_dat_r = mem_2[mem_2_adr0];
assign main_basesoc_wishbone_interface_sram1_dat_r = mem_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_6: 2-words x 14-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 14 
// Port 1 | Read: Async | Write: ---- | 
reg [13:0] storage_6[0:1];
reg [13:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_we)
		storage_6[main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_adr] <= main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_dat_w;
	storage_6_dat0 <= storage_6[main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_basesoc_wishbone_interface_reader_cmd_fifo_wrport_dat_r = storage_6_dat0;
assign main_basesoc_wishbone_interface_reader_cmd_fifo_rdport_dat_r = storage_6[main_basesoc_wishbone_interface_reader_cmd_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory mem_3: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_3[0:382];
reg [31:0] mem_3_dat0;
reg [8:0] mem_3_adr1;
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_reader_memory0_re)
		mem_3_dat0 <= mem_3[main_basesoc_wishbone_interface_reader_memory0_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_sram2_we[0])
		mem_3[main_basesoc_wishbone_interface_sram2_adr][7:0] <= main_basesoc_wishbone_interface_sram2_dat_w[7:0];
	if (main_basesoc_wishbone_interface_sram2_we[1])
		mem_3[main_basesoc_wishbone_interface_sram2_adr][15:8] <= main_basesoc_wishbone_interface_sram2_dat_w[15:8];
	if (main_basesoc_wishbone_interface_sram2_we[2])
		mem_3[main_basesoc_wishbone_interface_sram2_adr][23:16] <= main_basesoc_wishbone_interface_sram2_dat_w[23:16];
	if (main_basesoc_wishbone_interface_sram2_we[3])
		mem_3[main_basesoc_wishbone_interface_sram2_adr][31:24] <= main_basesoc_wishbone_interface_sram2_dat_w[31:24];
	mem_3_adr1 <= main_basesoc_wishbone_interface_sram2_adr;
end
assign main_basesoc_wishbone_interface_reader_memory0_dat_r = mem_3_dat0;
assign main_basesoc_wishbone_interface_sram2_dat_r = mem_3[mem_3_adr1];


//------------------------------------------------------------------------------
// Memory mem_4: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_4[0:382];
reg [31:0] mem_4_dat0;
reg [8:0] mem_4_adr1;
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_reader_memory1_re)
		mem_4_dat0 <= mem_4[main_basesoc_wishbone_interface_reader_memory1_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_wishbone_interface_sram3_we[0])
		mem_4[main_basesoc_wishbone_interface_sram3_adr][7:0] <= main_basesoc_wishbone_interface_sram3_dat_w[7:0];
	if (main_basesoc_wishbone_interface_sram3_we[1])
		mem_4[main_basesoc_wishbone_interface_sram3_adr][15:8] <= main_basesoc_wishbone_interface_sram3_dat_w[15:8];
	if (main_basesoc_wishbone_interface_sram3_we[2])
		mem_4[main_basesoc_wishbone_interface_sram3_adr][23:16] <= main_basesoc_wishbone_interface_sram3_dat_w[23:16];
	if (main_basesoc_wishbone_interface_sram3_we[3])
		mem_4[main_basesoc_wishbone_interface_sram3_adr][31:24] <= main_basesoc_wishbone_interface_sram3_dat_w[31:24];
	mem_4_adr1 <= main_basesoc_wishbone_interface_sram3_adr;
end
assign main_basesoc_wishbone_interface_reader_memory1_dat_r = mem_4_dat0;
assign main_basesoc_wishbone_interface_sram3_dat_r = mem_4[mem_4_adr1];


//------------------------------------------------------------------------------
// Instance CC_PLL of CC_PLL Module.
//------------------------------------------------------------------------------
CC_PLL #(
	// Parameters.
	.CI_FILTER_CONST (2'd2),
	.CLK180_DOUB     (1'd0),
	.CLK270_DOUB     (1'd0),
	.CP_FILTER_CONST (3'd4),
	.LOCK_REQ        (1'd1),
	.LOW_JITTER      (1'd1),
	.OUT_CLK         ("24.0"),
	.PERF_MD         ("ECONOMY"),
	.REF_CLK         (`BOARD_FREQ_STR)
) CC_PLL (
	// Inputs.
	.CLK_FEEDBACK        (1'd0),
	.CLK_REF             (main_crg_clkin),
	.USR_CLK_REF         (builder_gatematepll3),
	.USR_LOCKED_STDY_RST (1'd0),

	// Outputs.
	.CLK0                (main_crg_clkout),
	.CLK180              (builder_gatematepll1),
	.CLK270              (builder_gatematepll2),
	.CLK90               (builder_gatematepll0),
	.CLK_REF_OUT         (builder_gatematepll4),
	.USR_PLL_LOCKED      (builder_gatematepll_locked_s1),
	.USR_PLL_LOCKED_STDY (builder_gatematepll5)
);

//------------------------------------------------------------------------------
// Instance FemtoRV32 of FemtoRV32 Module.
//------------------------------------------------------------------------------
FemtoRV32 #(
	// Parameters.
	.ADDR_WIDTH (6'd32),
	.RESET_ADDR (32'd0)
) FemtoRV32 (
	// Inputs.
	.clk       (sys_clk),
	.mem_rbusy (main_basesoc_mbus_rbusy),
	.mem_rdata (main_basesoc_mbus_rdata0),
	.mem_wbusy (main_basesoc_mbus_wbusy),
	.reset     ((~(sys_rst | main_basesoc_reset))),

	// Outputs.
	.mem_addr  (main_basesoc_mbus_addr),
	.mem_rstrb (main_basesoc_mbus_rstrb),
	.mem_wdata (main_basesoc_mbus_wdata),
	.mem_wmask (main_basesoc_mbus_wmask)
);

//------------------------------------------------------------------------------
// Instance CC_DFF of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF (
	// Inputs.
	.CLK (sys_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (builder_rst10)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_1 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_1 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder_rst10),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (sys_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_2 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_2 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  (main_ethphy_reset0),

	// Outputs.
	.Q   (builder_rst11)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_3 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_3 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (builder_rst11),
	.EN  (1'd1),
	.SR  (main_ethphy_reset0),

	// Outputs.
	.Q   (eth_tx_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_4 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_4 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  (main_ethphy_reset0),

	// Outputs.
	.Q   (builder_rst12)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_5 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_5 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (builder_rst12),
	.EN  (1'd1),
	.SR  (main_ethphy_reset0),

	// Outputs.
	.Q   (eth_rx_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_6 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_6 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (main_ethphy_liteethphyrmiitx_source_source_valid),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (eth_rmii_tx_en)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_7 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_7 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (main_ethphy_liteethphyrmiitx_source_source_payload_data[0]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (eth_rmii_tx_data[0])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_8 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_8 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (main_ethphy_liteethphyrmiitx_source_source_payload_data[1]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (eth_rmii_tx_data[1])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_9 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_9 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (eth_rmii_crs_dv),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (main_ethphy_liteethphyrmiirx_crs_dv_i)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_10 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_10 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (eth_rmii_rx_data[0]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (main_ethphy_liteethphyrmiirx_rx_data_i[0])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_11 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_11 (
	// Inputs.
	.CLK (eth_rmii_clocks_ref_clk),
	.D   (eth_rmii_rx_data[1]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (main_ethphy_liteethphyrmiirx_rx_data_i[1])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-05-23 15:17:38.
//------------------------------------------------------------------------------
