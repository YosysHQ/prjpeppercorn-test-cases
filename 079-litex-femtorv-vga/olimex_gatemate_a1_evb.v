// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : olimex_gatemate_a1_evb.v
// Device     : CCGM1A1
// LiteX sha1 : e9e7cd9f3
// Date       : 2025-04-18 17:05:57
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module olimex_gatemate_a1_evb (
    input  wire          clk0,
    input  wire          serial_rx,
    output reg           serial_tx,
    input  wire          user_btn_n0,
    output wire          user_led_n0,
    output reg     [3:0] vga_b,
    output reg     [3:0] vga_g,
    output reg           vga_hsync_n,
    output reg     [3:0] vga_r,
    output reg           vga_vsync_n
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GateMatePLL)
│    │    └─── [CC_PLL]
│    └─── pll_video (GateMatePLL)
│    │    └─── [CC_PLL]
│    └─── [CC_USR_RSTN]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (FemtoRV)
│    └─── fsm (FSM)
│    └─── [FemtoRV32]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── videophy (VideoVGAPHY)
└─── video_terminal_vtg (VideoTimingGenerator)
│    └─── fsm (FSM)
└─── video_terminal (VideoTerminal)
│    └─── csi_interpreter (CSIInterpreter)
│    │    └─── fsm (FSM)
│    └─── uart_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
│    └─── uart_fsm (FSM)
│    └─── buffer_0* (Buffer)
│    │    └─── pipe_valid (PipeValid)
│    │    └─── pipeline (Pipeline)
│    └─── buffer_1* (Buffer)
│    │    └─── pipe_valid (PipeValid)
│    │    └─── pipeline (Pipeline)
└─── video_terminal_uart_cdc (ClockDomainCrossing)
│    └─── asyncfifo_0* (AsyncFIFO)
│    │    └─── fifo (AsyncFIFO)
│    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    └─── graycounter_1* (GrayCounter)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           builder_clockdomainsrenamer0_next_state = 1'd0;
reg           builder_clockdomainsrenamer0_state = 1'd0;
reg    [29:0] builder_comb_self0 = 30'd0;
reg    [31:0] builder_comb_self1 = 32'd0;
reg     [3:0] builder_comb_self2 = 4'd0;
reg           builder_comb_self3 = 1'd0;
reg           builder_comb_self4 = 1'd0;
reg           builder_comb_self5 = 1'd0;
reg     [2:0] builder_comb_self6 = 3'd0;
reg     [1:0] builder_comb_self7 = 2'd0;
reg    [19:0] builder_count = 20'd1000000;
reg     [2:0] builder_csiinterpreter_next_state = 3'd0;
reg     [7:0] builder_csiinterpreter_next_value = 8'd0;
reg           builder_csiinterpreter_next_value_ce = 1'd0;
reg     [2:0] builder_csiinterpreter_state = 3'd0;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire          builder_csr_bankarray_csrbank1_out0_r;
reg           builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_out0_w;
reg           builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire          builder_csr_bankarray_csrbank2_en0_r;
reg           builder_csr_bankarray_csrbank2_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_en0_w;
reg           builder_csr_bankarray_csrbank2_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_enable0_r;
reg           builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_enable0_w;
reg           builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_pending_r;
reg           builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_pending_w;
reg           builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_status_r;
reg           builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_status_w;
reg           builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_load0_r;
reg           builder_csr_bankarray_csrbank2_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_load0_w;
reg           builder_csr_bankarray_csrbank2_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_reload0_r;
reg           builder_csr_bankarray_csrbank2_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_reload0_w;
reg           builder_csr_bankarray_csrbank2_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank2_update_value0_r;
reg           builder_csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_update_value0_w;
reg           builder_csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_value_r;
reg           builder_csr_bankarray_csrbank2_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_value_w;
reg           builder_csr_bankarray_csrbank2_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_enable0_r;
reg           builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_enable0_w;
reg           builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_pending_r;
reg           builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_pending_w;
reg           builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_status_r;
reg           builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_status_w;
reg           builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxempty_r;
reg           builder_csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxempty_w;
reg           builder_csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxfull_r;
reg           builder_csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxfull_w;
reg           builder_csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire          builder_csr_bankarray_csrbank3_txempty_r;
reg           builder_csr_bankarray_csrbank3_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_txempty_w;
reg           builder_csr_bankarray_csrbank3_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_txfull_r;
reg           builder_csr_bankarray_csrbank3_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_txfull_w;
reg           builder_csr_bankarray_csrbank3_txfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_enable0_r;
reg           builder_csr_bankarray_csrbank4_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_enable0_w;
reg           builder_csr_bankarray_csrbank4_enable0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hres0_r;
reg           builder_csr_bankarray_csrbank4_hres0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hres0_w;
reg           builder_csr_bankarray_csrbank4_hres0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hscan0_r;
reg           builder_csr_bankarray_csrbank4_hscan0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hscan0_w;
reg           builder_csr_bankarray_csrbank4_hscan0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hsync_end0_r;
reg           builder_csr_bankarray_csrbank4_hsync_end0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hsync_end0_w;
reg           builder_csr_bankarray_csrbank4_hsync_end0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hsync_start0_r;
reg           builder_csr_bankarray_csrbank4_hsync_start0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_hsync_start0_w;
reg           builder_csr_bankarray_csrbank4_hsync_start0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire   [11:0] builder_csr_bankarray_csrbank4_vres0_r;
reg           builder_csr_bankarray_csrbank4_vres0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_vres0_w;
reg           builder_csr_bankarray_csrbank4_vres0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_vscan0_r;
reg           builder_csr_bankarray_csrbank4_vscan0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_vscan0_w;
reg           builder_csr_bankarray_csrbank4_vscan0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_vsync_end0_r;
reg           builder_csr_bankarray_csrbank4_vsync_end0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_vsync_end0_w;
reg           builder_csr_bankarray_csrbank4_vsync_end0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_vsync_start0_r;
reg           builder_csr_bankarray_csrbank4_vsync_start0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank4_vsync_start0_w;
reg           builder_csr_bankarray_csrbank4_vsync_start0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_femtorv_next_state = 1'd0;
reg           builder_femtorv_state = 1'd0;
reg     [3:0] builder_fsm_next_state = 4'd0;
reg     [6:0] builder_fsm_next_value0 = 7'd0;
reg     [5:0] builder_fsm_next_value1 = 6'd0;
reg           builder_fsm_next_value_ce0 = 1'd0;
reg           builder_fsm_next_value_ce1 = 1'd0;
reg     [3:0] builder_fsm_state = 4'd0;
wire          builder_gatematepll00;
wire          builder_gatematepll01;
wire          builder_gatematepll02;
reg           builder_gatematepll03 = 1'd0;
wire          builder_gatematepll04;
wire          builder_gatematepll05;
wire          builder_gatematepll0_locked_s1;
wire          builder_gatematepll10;
wire          builder_gatematepll11;
wire          builder_gatematepll12;
reg           builder_gatematepll13 = 1'd0;
wire          builder_gatematepll14;
wire          builder_gatematepll15;
wire          builder_gatematepll1_locked_s1;
wire          builder_grant;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
reg     [2:0] builder_master = 3'd0;
reg           builder_multiregimpl0_regs0 = 1'd0;
reg           builder_multiregimpl0_regs1 = 1'd0;
reg     [2:0] builder_multiregimpl10_regs0 = 3'd0;
reg     [2:0] builder_multiregimpl10_regs1 = 3'd0;
reg     [2:0] builder_multiregimpl11_regs0 = 3'd0;
reg     [2:0] builder_multiregimpl11_regs1 = 3'd0;
reg           builder_multiregimpl1_regs0 = 1'd0;
reg           builder_multiregimpl1_regs1 = 1'd0;
reg    [11:0] builder_multiregimpl2_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl2_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl3_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl3_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl4_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl4_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl5_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl5_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl6_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl6_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl7_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl7_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl8_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl8_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl9_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl9_regs1 = 12'd0;
wire          builder_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
wire          builder_rst10;
wire          builder_rst11;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [2:0] builder_slaves = 3'd0;
reg     [7:0] builder_sync_self = 8'd0;
wire          builder_wait;
reg           builder_wishbone2csr_next_state = 1'd0;
reg           builder_wishbone2csr_state = 1'd0;
wire          main_basesoc_adapted_interface_ack;
wire   [29:0] main_basesoc_adapted_interface_adr;
wire    [1:0] main_basesoc_adapted_interface_bte;
wire    [2:0] main_basesoc_adapted_interface_cti;
wire          main_basesoc_adapted_interface_cyc;
wire   [31:0] main_basesoc_adapted_interface_dat_r;
wire   [31:0] main_basesoc_adapted_interface_dat_w;
wire          main_basesoc_adapted_interface_err;
wire    [3:0] main_basesoc_adapted_interface_sel;
wire          main_basesoc_adapted_interface_stb;
wire          main_basesoc_adapted_interface_we;
wire   [14:0] main_basesoc_basesoc_adr;
reg           main_basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] main_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_basesoc_ram_bus_cti;
wire          main_basesoc_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_w;
reg           main_basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_basesoc_ram_bus_sel;
wire          main_basesoc_basesoc_ram_bus_stb;
wire          main_basesoc_basesoc_ram_bus_we;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
wire          main_basesoc_idbus_ack;
reg    [31:0] main_basesoc_idbus_adr = 32'd0;
reg    [31:0] main_basesoc_idbus_adr_femtorv_next_value0 = 32'd0;
reg           main_basesoc_idbus_adr_femtorv_next_value_ce0 = 1'd0;
reg     [1:0] main_basesoc_idbus_bte = 2'd0;
reg     [2:0] main_basesoc_idbus_cti = 3'd0;
reg           main_basesoc_idbus_cyc = 1'd0;
wire   [31:0] main_basesoc_idbus_dat_r;
reg    [31:0] main_basesoc_idbus_dat_w = 32'd0;
reg    [31:0] main_basesoc_idbus_dat_w_femtorv_next_value1 = 32'd0;
reg           main_basesoc_idbus_dat_w_femtorv_next_value_ce1 = 1'd0;
wire          main_basesoc_idbus_err;
reg     [3:0] main_basesoc_idbus_sel = 4'd0;
reg     [3:0] main_basesoc_idbus_sel_femtorv_next_value2 = 4'd0;
reg           main_basesoc_idbus_sel_femtorv_next_value_ce2 = 1'd0;
reg           main_basesoc_idbus_stb = 1'd0;
reg           main_basesoc_idbus_we = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value3 = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value_ce3 = 1'd0;
reg           main_basesoc_latch = 1'd0;
wire   [31:0] main_basesoc_mbus_addr;
reg           main_basesoc_mbus_rbusy = 1'd0;
reg    [31:0] main_basesoc_mbus_rdata0 = 32'd0;
reg    [31:0] main_basesoc_mbus_rdata1 = 32'd0;
wire          main_basesoc_mbus_rstrb;
reg           main_basesoc_mbus_wbusy = 1'd0;
wire   [31:0] main_basesoc_mbus_wdata;
wire    [3:0] main_basesoc_mbus_wmask;
wire   [10:0] main_basesoc_ram_adr;
reg           main_basesoc_ram_adr_burst = 1'd0;
reg           main_basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_ram_bus_cti;
wire          main_basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_w;
reg           main_basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_ram_bus_sel;
wire          main_basesoc_ram_bus_ram_bus_stb;
wire          main_basesoc_ram_bus_ram_bus_we;
wire   [31:0] main_basesoc_ram_dat_r;
wire   [31:0] main_basesoc_ram_dat_w;
reg     [3:0] main_basesoc_ram_we = 4'd0;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_basesoc_soc_rst = 1'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
reg           main_basesoc_timer_pending_status = 1'd0;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
reg           main_basesoc_timer_status_status = 1'd0;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
reg           main_chaser = 1'd0;
reg    [23:0] main_count = 24'd12000000;
wire          main_done;
wire          main_gatematepll0_clkin;
wire          main_gatematepll0_clkout;
wire          main_gatematepll1_clkin;
wire          main_gatematepll1_clkout;
reg           main_leds = 1'd0;
reg           main_mode = 1'd0;
wire          main_pll_locked;
wire          main_pll_reset;
wire          main_pll_video_locked;
wire          main_pll_video_reset;
reg           main_re = 1'd0;
wire          main_rst_n;
wire          main_sink_first;
wire          main_sink_last;
wire    [7:0] main_sink_payload_b;
wire          main_sink_payload_de;
wire    [7:0] main_sink_payload_g;
wire          main_sink_payload_hsync;
wire    [7:0] main_sink_payload_r;
wire          main_sink_payload_vsync;
wire          main_sink_ready;
wire          main_sink_valid;
reg           main_storage = 1'd0;
wire    [9:0] main_uart_cdc_cdc_asyncfifo_din;
wire    [9:0] main_uart_cdc_cdc_asyncfifo_dout;
wire          main_uart_cdc_cdc_asyncfifo_re;
wire          main_uart_cdc_cdc_asyncfifo_readable;
wire          main_uart_cdc_cdc_asyncfifo_we;
wire          main_uart_cdc_cdc_asyncfifo_writable;
wire    [2:0] main_uart_cdc_cdc_consume_wdomain;
wire          main_uart_cdc_cdc_fifo_in_first;
wire          main_uart_cdc_cdc_fifo_in_last;
wire    [7:0] main_uart_cdc_cdc_fifo_in_payload_data;
wire          main_uart_cdc_cdc_fifo_out_first;
wire          main_uart_cdc_cdc_fifo_out_last;
wire    [7:0] main_uart_cdc_cdc_fifo_out_payload_data;
wire          main_uart_cdc_cdc_graycounter0_ce;
reg     [2:0] main_uart_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] main_uart_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] main_uart_cdc_cdc_graycounter0_q_next;
reg     [2:0] main_uart_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          main_uart_cdc_cdc_graycounter1_ce;
reg     [2:0] main_uart_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] main_uart_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] main_uart_cdc_cdc_graycounter1_q_next;
reg     [2:0] main_uart_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] main_uart_cdc_cdc_produce_rdomain;
wire    [1:0] main_uart_cdc_cdc_rdport_adr;
wire    [9:0] main_uart_cdc_cdc_rdport_dat_r;
wire          main_uart_cdc_cdc_sink_first;
wire          main_uart_cdc_cdc_sink_last;
wire    [7:0] main_uart_cdc_cdc_sink_payload_data;
wire          main_uart_cdc_cdc_sink_ready;
wire          main_uart_cdc_cdc_sink_valid;
wire          main_uart_cdc_cdc_source_first;
wire          main_uart_cdc_cdc_source_last;
wire    [7:0] main_uart_cdc_cdc_source_payload_data;
wire          main_uart_cdc_cdc_source_ready;
wire          main_uart_cdc_cdc_source_valid;
wire    [1:0] main_uart_cdc_cdc_wrport_adr;
wire    [9:0] main_uart_cdc_cdc_wrport_dat_r;
wire    [9:0] main_uart_cdc_cdc_wrport_dat_w;
wire          main_uart_cdc_cdc_wrport_we;
reg           main_uart_cdc_sink_sink_first = 1'd0;
reg           main_uart_cdc_sink_sink_last = 1'd0;
wire    [7:0] main_uart_cdc_sink_sink_payload_data;
wire          main_uart_cdc_sink_sink_ready;
wire          main_uart_cdc_sink_sink_valid;
wire          main_uart_cdc_source_source_first;
wire          main_uart_cdc_source_source_last;
wire    [7:0] main_uart_cdc_source_source_payload_data;
wire          main_uart_cdc_source_source_ready;
wire          main_uart_cdc_source_source_valid;
reg           main_vt_bit = 1'd0;
wire          main_vt_buffer0_pipe_valid_sink_first;
wire          main_vt_buffer0_pipe_valid_sink_last;
wire          main_vt_buffer0_pipe_valid_sink_payload_de;
wire   [11:0] main_vt_buffer0_pipe_valid_sink_payload_hcount;
wire   [11:0] main_vt_buffer0_pipe_valid_sink_payload_hres;
wire          main_vt_buffer0_pipe_valid_sink_payload_hsync;
wire   [11:0] main_vt_buffer0_pipe_valid_sink_payload_vcount;
wire   [11:0] main_vt_buffer0_pipe_valid_sink_payload_vres;
wire          main_vt_buffer0_pipe_valid_sink_payload_vsync;
wire          main_vt_buffer0_pipe_valid_sink_ready;
wire          main_vt_buffer0_pipe_valid_sink_valid;
reg           main_vt_buffer0_pipe_valid_source_first = 1'd0;
reg           main_vt_buffer0_pipe_valid_source_last = 1'd0;
reg           main_vt_buffer0_pipe_valid_source_payload_de = 1'd0;
reg    [11:0] main_vt_buffer0_pipe_valid_source_payload_hcount = 12'd0;
reg    [11:0] main_vt_buffer0_pipe_valid_source_payload_hres = 12'd0;
reg           main_vt_buffer0_pipe_valid_source_payload_hsync = 1'd0;
reg    [11:0] main_vt_buffer0_pipe_valid_source_payload_vcount = 12'd0;
reg    [11:0] main_vt_buffer0_pipe_valid_source_payload_vres = 12'd0;
reg           main_vt_buffer0_pipe_valid_source_payload_vsync = 1'd0;
wire          main_vt_buffer0_pipe_valid_source_ready;
reg           main_vt_buffer0_pipe_valid_source_valid = 1'd0;
wire          main_vt_buffer0_sink_sink_first;
wire          main_vt_buffer0_sink_sink_last;
wire          main_vt_buffer0_sink_sink_payload_de;
wire   [11:0] main_vt_buffer0_sink_sink_payload_hcount;
wire   [11:0] main_vt_buffer0_sink_sink_payload_hres;
wire          main_vt_buffer0_sink_sink_payload_hsync;
wire   [11:0] main_vt_buffer0_sink_sink_payload_vcount;
wire   [11:0] main_vt_buffer0_sink_sink_payload_vres;
wire          main_vt_buffer0_sink_sink_payload_vsync;
wire          main_vt_buffer0_sink_sink_ready;
wire          main_vt_buffer0_sink_sink_valid;
wire          main_vt_buffer0_source_source_first;
wire          main_vt_buffer0_source_source_last;
wire          main_vt_buffer0_source_source_payload_de;
wire   [11:0] main_vt_buffer0_source_source_payload_hcount;
wire   [11:0] main_vt_buffer0_source_source_payload_hres;
wire          main_vt_buffer0_source_source_payload_hsync;
wire   [11:0] main_vt_buffer0_source_source_payload_vcount;
wire   [11:0] main_vt_buffer0_source_source_payload_vres;
wire          main_vt_buffer0_source_source_payload_vsync;
wire          main_vt_buffer0_source_source_ready;
wire          main_vt_buffer0_source_source_valid;
wire          main_vt_buffer1_pipe_valid_sink_first;
wire          main_vt_buffer1_pipe_valid_sink_last;
wire          main_vt_buffer1_pipe_valid_sink_payload_de;
wire   [11:0] main_vt_buffer1_pipe_valid_sink_payload_hcount;
wire   [11:0] main_vt_buffer1_pipe_valid_sink_payload_hres;
wire          main_vt_buffer1_pipe_valid_sink_payload_hsync;
wire   [11:0] main_vt_buffer1_pipe_valid_sink_payload_vcount;
wire   [11:0] main_vt_buffer1_pipe_valid_sink_payload_vres;
wire          main_vt_buffer1_pipe_valid_sink_payload_vsync;
wire          main_vt_buffer1_pipe_valid_sink_ready;
wire          main_vt_buffer1_pipe_valid_sink_valid;
reg           main_vt_buffer1_pipe_valid_source_first = 1'd0;
reg           main_vt_buffer1_pipe_valid_source_last = 1'd0;
reg           main_vt_buffer1_pipe_valid_source_payload_de = 1'd0;
reg    [11:0] main_vt_buffer1_pipe_valid_source_payload_hcount = 12'd0;
reg    [11:0] main_vt_buffer1_pipe_valid_source_payload_hres = 12'd0;
reg           main_vt_buffer1_pipe_valid_source_payload_hsync = 1'd0;
reg    [11:0] main_vt_buffer1_pipe_valid_source_payload_vcount = 12'd0;
reg    [11:0] main_vt_buffer1_pipe_valid_source_payload_vres = 12'd0;
reg           main_vt_buffer1_pipe_valid_source_payload_vsync = 1'd0;
wire          main_vt_buffer1_pipe_valid_source_ready;
reg           main_vt_buffer1_pipe_valid_source_valid = 1'd0;
wire          main_vt_buffer1_sink_sink_first;
wire          main_vt_buffer1_sink_sink_last;
wire          main_vt_buffer1_sink_sink_payload_de;
wire   [11:0] main_vt_buffer1_sink_sink_payload_hcount;
wire   [11:0] main_vt_buffer1_sink_sink_payload_hres;
wire          main_vt_buffer1_sink_sink_payload_hsync;
wire   [11:0] main_vt_buffer1_sink_sink_payload_vcount;
wire   [11:0] main_vt_buffer1_sink_sink_payload_vres;
wire          main_vt_buffer1_sink_sink_payload_vsync;
wire          main_vt_buffer1_sink_sink_ready;
wire          main_vt_buffer1_sink_sink_valid;
wire          main_vt_buffer1_source_source_first;
wire          main_vt_buffer1_source_source_last;
wire          main_vt_buffer1_source_source_payload_de;
wire   [11:0] main_vt_buffer1_source_source_payload_hcount;
wire   [11:0] main_vt_buffer1_source_source_payload_hres;
wire          main_vt_buffer1_source_source_payload_hsync;
wire   [11:0] main_vt_buffer1_source_source_payload_vcount;
wire   [11:0] main_vt_buffer1_source_source_payload_vres;
wire          main_vt_buffer1_source_source_payload_vsync;
wire          main_vt_buffer1_source_source_ready;
wire          main_vt_buffer1_source_source_valid;
reg     [7:0] main_vt_csiinterpreter0 = 8'd0;
reg     [7:0] main_vt_csiinterpreter1 = 8'd0;
reg     [7:0] main_vt_csiinterpreter2 = 8'd0;
reg     [7:0] main_vt_csiinterpreter3 = 8'd0;
reg     [7:0] main_vt_csiinterpreter4 = 8'd0;
reg     [7:0] main_vt_csiinterpreter5 = 8'd0;
reg     [7:0] main_vt_csiinterpreter6 = 8'd0;
reg     [7:0] main_vt_csiinterpreter7 = 8'd0;
reg           main_vt_csiinterpreter_clear_xy = 1'd0;
reg     [3:0] main_vt_csiinterpreter_color = 4'd0;
reg     [3:0] main_vt_csiinterpreter_color_csiinterpreter_next_value2 = 4'd0;
reg           main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 = 1'd0;
reg     [2:0] main_vt_csiinterpreter_csi_count = 3'd0;
reg     [2:0] main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 = 3'd0;
reg           main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 = 1'd0;
reg     [7:0] main_vt_csiinterpreter_csi_final = 8'd0;
reg     [7:0] main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1 = 8'd0;
reg           main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1 = 1'd0;
wire          main_vt_csiinterpreter_sink_first;
wire          main_vt_csiinterpreter_sink_last;
wire    [7:0] main_vt_csiinterpreter_sink_payload_data;
reg           main_vt_csiinterpreter_sink_ready = 1'd0;
wire          main_vt_csiinterpreter_sink_valid;
reg           main_vt_csiinterpreter_source_first = 1'd0;
reg           main_vt_csiinterpreter_source_last = 1'd0;
reg     [7:0] main_vt_csiinterpreter_source_payload_data = 8'd0;
wire          main_vt_csiinterpreter_source_ready;
reg           main_vt_csiinterpreter_source_valid = 1'd0;
wire   [11:0] main_vt_font_rdport_adr;
wire    [7:0] main_vt_font_rdport_dat_r;
wire          main_vt_font_rdport_re;
reg           main_vt_source_source_first = 1'd0;
wire          main_vt_source_source_last;
reg     [7:0] main_vt_source_source_payload_b = 8'd0;
wire          main_vt_source_source_payload_de;
reg     [7:0] main_vt_source_source_payload_g = 8'd0;
wire          main_vt_source_source_payload_hsync;
reg     [7:0] main_vt_source_source_payload_r = 8'd0;
wire          main_vt_source_source_payload_vsync;
wire          main_vt_source_source_ready;
wire          main_vt_source_source_valid;
reg     [7:0] main_vt_term_dat_r = 8'd0;
wire   [12:0] main_vt_term_rdport_adr;
wire   [15:0] main_vt_term_rdport_dat_r;
wire          main_vt_term_rdport_re;
reg    [12:0] main_vt_term_wrport_adr = 13'd0;
wire   [15:0] main_vt_term_wrport_dat_r;
reg    [15:0] main_vt_term_wrport_dat_w = 16'd0;
reg           main_vt_term_wrport_we = 1'd0;
reg     [2:0] main_vt_uart_fifo_consume = 3'd0;
wire          main_vt_uart_fifo_do_read;
wire          main_vt_uart_fifo_fifo_in_first;
wire          main_vt_uart_fifo_fifo_in_last;
wire    [7:0] main_vt_uart_fifo_fifo_in_payload_data;
wire          main_vt_uart_fifo_fifo_out_first;
wire          main_vt_uart_fifo_fifo_out_last;
wire    [7:0] main_vt_uart_fifo_fifo_out_payload_data;
reg     [3:0] main_vt_uart_fifo_level = 4'd0;
reg     [2:0] main_vt_uart_fifo_produce = 3'd0;
wire    [2:0] main_vt_uart_fifo_rdport_adr;
wire    [9:0] main_vt_uart_fifo_rdport_dat_r;
reg           main_vt_uart_fifo_replace = 1'd0;
wire          main_vt_uart_fifo_sink_first;
wire          main_vt_uart_fifo_sink_last;
wire    [7:0] main_vt_uart_fifo_sink_payload_data;
wire          main_vt_uart_fifo_sink_ready;
wire          main_vt_uart_fifo_sink_valid;
wire          main_vt_uart_fifo_source_first;
wire          main_vt_uart_fifo_source_last;
wire    [7:0] main_vt_uart_fifo_source_payload_data;
reg           main_vt_uart_fifo_source_ready = 1'd0;
wire          main_vt_uart_fifo_source_valid;
wire    [9:0] main_vt_uart_fifo_syncfifo_din;
wire    [9:0] main_vt_uart_fifo_syncfifo_dout;
wire          main_vt_uart_fifo_syncfifo_re;
wire          main_vt_uart_fifo_syncfifo_readable;
wire          main_vt_uart_fifo_syncfifo_we;
wire          main_vt_uart_fifo_syncfifo_writable;
reg     [2:0] main_vt_uart_fifo_wrport_adr = 3'd0;
wire    [9:0] main_vt_uart_fifo_wrport_dat_r;
wire    [9:0] main_vt_uart_fifo_wrport_dat_w;
wire          main_vt_uart_fifo_wrport_we;
wire          main_vt_uart_sink_first;
wire          main_vt_uart_sink_last;
wire    [7:0] main_vt_uart_sink_payload_data;
wire          main_vt_uart_sink_ready;
wire          main_vt_uart_sink_valid;
wire          main_vt_vtg_sink_first;
wire          main_vt_vtg_sink_last;
wire          main_vt_vtg_sink_payload_de;
wire   [11:0] main_vt_vtg_sink_payload_hcount;
wire   [11:0] main_vt_vtg_sink_payload_hres;
wire          main_vt_vtg_sink_payload_hsync;
wire   [11:0] main_vt_vtg_sink_payload_vcount;
wire   [11:0] main_vt_vtg_sink_payload_vres;
wire          main_vt_vtg_sink_payload_vsync;
wire          main_vt_vtg_sink_ready;
wire          main_vt_vtg_sink_valid;
reg     [7:0] main_vt_y_rollover = 8'd0;
reg           main_vt_y_term_rollover = 1'd0;
reg           main_vt_y_term_rollover_fsm_next_value = 1'd0;
reg           main_vt_y_term_rollover_fsm_next_value_ce = 1'd0;
wire          main_vtg_enable;
reg           main_vtg_enable_re = 1'd0;
reg           main_vtg_enable_storage = 1'd1;
reg           main_vtg_hactive = 1'd0;
reg           main_vtg_hactive_clockdomainsrenamer0_next_value0 = 1'd0;
reg           main_vtg_hactive_clockdomainsrenamer0_next_value_ce0 = 1'd0;
wire   [11:0] main_vtg_hres;
reg           main_vtg_hres_re = 1'd0;
reg    [11:0] main_vtg_hres_storage = 12'd1024;
wire   [11:0] main_vtg_hscan;
reg           main_vtg_hscan_re = 1'd0;
reg    [11:0] main_vtg_hscan_storage = 12'd1343;
wire   [11:0] main_vtg_hsync_end;
reg           main_vtg_hsync_end_re = 1'd0;
reg    [11:0] main_vtg_hsync_end_storage = 12'd1184;
wire   [11:0] main_vtg_hsync_start;
reg           main_vtg_hsync_start_re = 1'd0;
reg    [11:0] main_vtg_hsync_start_storage = 12'd1048;
wire          main_vtg_reset;
reg           main_vtg_source_first = 1'd0;
reg           main_vtg_source_last = 1'd0;
wire          main_vtg_source_payload_de;
reg    [11:0] main_vtg_source_payload_hcount = 12'd0;
reg    [11:0] main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 = 12'd0;
reg           main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 = 1'd0;
reg    [11:0] main_vtg_source_payload_hres = 12'd0;
reg    [11:0] main_vtg_source_payload_hres_clockdomainsrenamer0_next_value2 = 12'd0;
reg           main_vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2 = 1'd0;
reg           main_vtg_source_payload_hsync = 1'd0;
reg           main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 = 1'd0;
reg           main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 = 1'd0;
reg    [11:0] main_vtg_source_payload_vcount = 12'd0;
reg    [11:0] main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 = 12'd0;
reg           main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 = 1'd0;
reg    [11:0] main_vtg_source_payload_vres = 12'd0;
reg    [11:0] main_vtg_source_payload_vres_clockdomainsrenamer0_next_value3 = 12'd0;
reg           main_vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3 = 1'd0;
reg           main_vtg_source_payload_vsync = 1'd0;
reg           main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 = 1'd0;
reg           main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 = 1'd0;
wire          main_vtg_source_ready;
reg           main_vtg_source_valid = 1'd0;
reg           main_vtg_vactive = 1'd0;
reg           main_vtg_vactive_clockdomainsrenamer0_next_value1 = 1'd0;
reg           main_vtg_vactive_clockdomainsrenamer0_next_value_ce1 = 1'd0;
wire   [11:0] main_vtg_vres;
reg           main_vtg_vres_re = 1'd0;
reg    [11:0] main_vtg_vres_storage = 12'd768;
wire   [11:0] main_vtg_vscan;
reg           main_vtg_vscan_re = 1'd0;
reg    [11:0] main_vtg_vscan_storage = 12'd805;
wire   [11:0] main_vtg_vsync_end;
reg           main_vtg_vsync_end_re = 1'd0;
reg    [11:0] main_vtg_vsync_end_storage = 12'd777;
wire   [11:0] main_vtg_vsync_start;
reg           main_vtg_vsync_start_re = 1'd0;
reg    [11:0] main_vtg_vsync_start_storage = 12'd771;
wire          main_wait;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_10;
wire          sdrio_clk_11;
wire          sdrio_clk_12;
wire          sdrio_clk_13;
wire          sdrio_clk_2;
wire          sdrio_clk_3;
wire          sdrio_clk_4;
wire          sdrio_clk_5;
wire          sdrio_clk_6;
wire          sdrio_clk_7;
wire          sdrio_clk_8;
wire          sdrio_clk_9;
wire          sys_clk;
wire          sys_rst;
wire          vga_clk;
wire          vga_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_vt_vtg_sink_valid = main_vtg_source_valid;
assign main_vtg_source_ready = main_vt_vtg_sink_ready;
assign main_vt_vtg_sink_first = main_vtg_source_first;
assign main_vt_vtg_sink_last = main_vtg_source_last;
assign main_vt_vtg_sink_payload_hsync = main_vtg_source_payload_hsync;
assign main_vt_vtg_sink_payload_vsync = main_vtg_source_payload_vsync;
assign main_vt_vtg_sink_payload_de = main_vtg_source_payload_de;
assign main_vt_vtg_sink_payload_hres = main_vtg_source_payload_hres;
assign main_vt_vtg_sink_payload_vres = main_vtg_source_payload_vres;
assign main_vt_vtg_sink_payload_hcount = main_vtg_source_payload_hcount;
assign main_vt_vtg_sink_payload_vcount = main_vtg_source_payload_vcount;
assign main_uart_cdc_sink_sink_valid = (main_basesoc_uart_tx_fifo_source_valid & main_basesoc_uart_tx_fifo_source_ready);
assign main_uart_cdc_sink_sink_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_vt_uart_sink_valid = main_uart_cdc_source_source_valid;
assign main_uart_cdc_source_source_ready = main_vt_uart_sink_ready;
assign main_vt_uart_sink_first = main_uart_cdc_source_source_first;
assign main_vt_uart_sink_last = main_uart_cdc_source_source_last;
assign main_vt_uart_sink_payload_data = main_uart_cdc_source_source_payload_data;
assign main_sink_valid = main_vt_source_source_valid;
assign main_vt_source_source_ready = main_sink_ready;
assign main_sink_first = main_vt_source_source_first;
assign main_sink_last = main_vt_source_source_last;
assign main_sink_payload_hsync = main_vt_source_source_payload_hsync;
assign main_sink_payload_vsync = main_vt_source_source_payload_vsync;
assign main_sink_payload_de = main_vt_source_source_payload_de;
assign main_sink_payload_r = main_vt_source_source_payload_r;
assign main_sink_payload_g = main_vt_source_source_payload_g;
assign main_sink_payload_b = main_vt_source_source_payload_b;
assign main_basesoc_bus_error = builder_error;
assign main_pll_reset = ((~main_rst_n) | (~user_btn_n0));
assign main_pll_video_reset = ((~main_rst_n) | (~user_btn_n0));
assign main_gatematepll0_clkin = clk0;
assign sys_clk = main_gatematepll0_clkout;
assign main_pll_locked = (builder_gatematepll0_locked_s1 & (~main_pll_reset));
assign main_gatematepll1_clkin = clk0;
assign vga_clk = main_gatematepll1_clkout;
assign main_pll_video_locked = (builder_gatematepll1_locked_s1 & (~main_pll_video_reset));
assign main_basesoc_adapted_interface_dat_w = main_basesoc_idbus_dat_w;
assign main_basesoc_idbus_dat_r = main_basesoc_adapted_interface_dat_r;
assign main_basesoc_adapted_interface_sel = main_basesoc_idbus_sel;
assign main_basesoc_adapted_interface_cyc = main_basesoc_idbus_cyc;
assign main_basesoc_adapted_interface_stb = main_basesoc_idbus_stb;
assign main_basesoc_idbus_ack = main_basesoc_adapted_interface_ack;
assign main_basesoc_adapted_interface_we = main_basesoc_idbus_we;
assign main_basesoc_adapted_interface_cti = main_basesoc_idbus_cti;
assign main_basesoc_adapted_interface_bte = main_basesoc_idbus_bte;
assign main_basesoc_idbus_err = main_basesoc_adapted_interface_err;
assign main_basesoc_adapted_interface_adr = main_basesoc_idbus_adr[31:2];
assign builder_shared_adr = builder_comb_self0;
assign builder_shared_dat_w = builder_comb_self1;
assign builder_shared_sel = builder_comb_self2;
assign builder_shared_cyc = builder_comb_self3;
assign builder_shared_stb = builder_comb_self4;
assign builder_shared_we = builder_comb_self5;
assign builder_shared_cti = builder_comb_self6;
assign builder_shared_bte = builder_comb_self7;
assign main_basesoc_adapted_interface_dat_r = builder_shared_dat_r;
assign main_basesoc_adapted_interface_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_adapted_interface_err = (builder_shared_err & (builder_grant == 1'd0));
assign builder_request = {main_basesoc_adapted_interface_cyc};
assign builder_grant = 1'd0;
always @(*) begin
    builder_master <= 3'd0;
    builder_master[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_master[1] <= (builder_shared_adr[29:11] == 12'd2048);
    builder_master[2] <= (builder_shared_adr[29:14] == 16'd33280);
end
assign main_basesoc_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_ram_bus_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_master[0]);
assign main_basesoc_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_master[1]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_master[2]);
assign builder_shared_err = ((main_basesoc_basesoc_ram_bus_err | main_basesoc_ram_bus_ram_bus_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= ((main_basesoc_basesoc_ram_bus_ack | main_basesoc_ram_bus_ram_bus_ack) | builder_interface0_ack);
    builder_shared_dat_r <= ((({32{builder_slaves[0]}} & main_basesoc_basesoc_ram_bus_dat_r) | ({32{builder_slaves[1]}} & main_basesoc_ram_bus_ram_bus_dat_r)) | ({32{builder_slaves[2]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
always @(*) begin
    main_basesoc_mbus_rdata0 <= 32'd0;
    main_basesoc_mbus_rdata0 <= main_basesoc_mbus_rdata1;
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata0 <= main_basesoc_idbus_dat_r;
    end
end
always @(*) begin
    builder_femtorv_next_state <= 1'd0;
    main_basesoc_idbus_adr_femtorv_next_value0 <= 32'd0;
    main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd0;
    main_basesoc_idbus_cyc <= 1'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value1 <= 32'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd0;
    main_basesoc_idbus_sel_femtorv_next_value2 <= 4'd0;
    main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd0;
    main_basesoc_idbus_stb <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value3 <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd0;
    main_basesoc_latch <= 1'd0;
    main_basesoc_mbus_rbusy <= 1'd0;
    main_basesoc_mbus_wbusy <= 1'd0;
    builder_femtorv_next_state <= builder_femtorv_state;
    case (builder_femtorv_state)
        1'd1: begin
            main_basesoc_idbus_stb <= 1'd1;
            main_basesoc_idbus_cyc <= 1'd1;
            main_basesoc_mbus_wbusy <= 1'd1;
            main_basesoc_mbus_rbusy <= 1'd1;
            if (main_basesoc_idbus_ack) begin
                main_basesoc_mbus_wbusy <= 1'd0;
                main_basesoc_mbus_rbusy <= 1'd0;
                main_basesoc_latch <= 1'd1;
                builder_femtorv_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_idbus_adr_femtorv_next_value0 <= main_basesoc_mbus_addr;
            main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd1;
            main_basesoc_idbus_dat_w_femtorv_next_value1 <= main_basesoc_mbus_wdata;
            main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd1;
            main_basesoc_idbus_sel_femtorv_next_value2 <= main_basesoc_mbus_wmask;
            main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd1;
            if ((main_basesoc_mbus_rstrb | (main_basesoc_mbus_wmask != 1'd0))) begin
                main_basesoc_idbus_we_femtorv_next_value3 <= (main_basesoc_mbus_wmask != 1'd0);
                main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd1;
                builder_femtorv_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_basesoc_adr = main_basesoc_basesoc_ram_bus_adr[14:0];
assign main_basesoc_basesoc_ram_bus_dat_r = main_basesoc_basesoc_dat_r;
always @(*) begin
    main_basesoc_ram_we <= 4'd0;
    main_basesoc_ram_we[0] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[0]);
    main_basesoc_ram_we[1] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[1]);
    main_basesoc_ram_we[2] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[2]);
    main_basesoc_ram_we[3] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[3]);
end
assign main_basesoc_ram_adr = main_basesoc_ram_bus_ram_bus_adr[10:0];
assign main_basesoc_ram_bus_ram_bus_dat_r = main_basesoc_ram_dat_r;
assign main_basesoc_ram_dat_w = main_basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_sink_ready = 1'd1;
assign main_vtg_reset = (~main_vtg_enable);
assign main_vtg_source_payload_de = (main_vtg_hactive & main_vtg_vactive);
always @(*) begin
    builder_clockdomainsrenamer0_next_state <= 1'd0;
    main_vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd0;
    main_vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd0;
    main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= 12'd0;
    main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd0;
    main_vtg_source_payload_hres_clockdomainsrenamer0_next_value2 <= 12'd0;
    main_vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2 <= 1'd0;
    main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 <= 1'd0;
    main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 <= 1'd0;
    main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= 12'd0;
    main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd0;
    main_vtg_source_payload_vres_clockdomainsrenamer0_next_value3 <= 12'd0;
    main_vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3 <= 1'd0;
    main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 <= 1'd0;
    main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 <= 1'd0;
    main_vtg_source_valid <= 1'd0;
    main_vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd0;
    main_vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd0;
    builder_clockdomainsrenamer0_next_state <= builder_clockdomainsrenamer0_state;
    case (builder_clockdomainsrenamer0_state)
        1'd1: begin
            main_vtg_source_valid <= 1'd1;
            if (main_vtg_source_ready) begin
                main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= (main_vtg_source_payload_hcount + 1'd1);
                main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
                if ((main_vtg_source_payload_hcount == 1'd0)) begin
                    main_vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd1;
                    main_vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hres)) begin
                    main_vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd0;
                    main_vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
                    main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 <= 1'd1;
                    main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hsync_end)) begin
                    main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value6 <= 1'd0;
                    main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hscan)) begin
                    main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= 1'd0;
                    main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
                    main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= (main_vtg_source_payload_vcount + 1'd1);
                    main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
                    if ((main_vtg_source_payload_vcount == 1'd0)) begin
                        main_vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd1;
                        main_vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vres)) begin
                        main_vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd0;
                        main_vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vsync_start)) begin
                        main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 <= 1'd1;
                        main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vsync_end)) begin
                        main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value7 <= 1'd0;
                        main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vscan)) begin
                        main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= 1'd0;
                        main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
                    end
                end
            end
        end
        default: begin
            main_vtg_hactive_clockdomainsrenamer0_next_value0 <= 1'd0;
            main_vtg_hactive_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
            main_vtg_vactive_clockdomainsrenamer0_next_value1 <= 1'd0;
            main_vtg_vactive_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
            main_vtg_source_payload_hres_clockdomainsrenamer0_next_value2 <= main_vtg_hres;
            main_vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2 <= 1'd1;
            main_vtg_source_payload_vres_clockdomainsrenamer0_next_value3 <= main_vtg_vres;
            main_vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3 <= 1'd1;
            main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value4 <= 1'd0;
            main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
            main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value5 <= 1'd0;
            main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
            builder_clockdomainsrenamer0_next_state <= 1'd1;
        end
    endcase
end
assign main_vt_csiinterpreter_sink_valid = main_vt_uart_sink_valid;
assign main_vt_uart_sink_ready = main_vt_csiinterpreter_sink_ready;
assign main_vt_csiinterpreter_sink_first = main_vt_uart_sink_first;
assign main_vt_csiinterpreter_sink_last = main_vt_uart_sink_last;
assign main_vt_csiinterpreter_sink_payload_data = main_vt_uart_sink_payload_data;
assign main_vt_uart_fifo_sink_valid = main_vt_csiinterpreter_source_valid;
assign main_vt_csiinterpreter_source_ready = main_vt_uart_fifo_sink_ready;
assign main_vt_uart_fifo_sink_first = main_vt_csiinterpreter_source_first;
assign main_vt_uart_fifo_sink_last = main_vt_csiinterpreter_source_last;
assign main_vt_uart_fifo_sink_payload_data = main_vt_csiinterpreter_source_payload_data;
assign main_vt_buffer0_sink_sink_valid = main_vt_vtg_sink_valid;
assign main_vt_vtg_sink_ready = main_vt_buffer0_sink_sink_ready;
assign main_vt_buffer0_sink_sink_first = main_vt_vtg_sink_first;
assign main_vt_buffer0_sink_sink_last = main_vt_vtg_sink_last;
assign main_vt_buffer0_sink_sink_payload_hsync = main_vt_vtg_sink_payload_hsync;
assign main_vt_buffer0_sink_sink_payload_vsync = main_vt_vtg_sink_payload_vsync;
assign main_vt_buffer0_sink_sink_payload_de = main_vt_vtg_sink_payload_de;
assign main_vt_buffer0_sink_sink_payload_hres = main_vt_vtg_sink_payload_hres;
assign main_vt_buffer0_sink_sink_payload_vres = main_vt_vtg_sink_payload_vres;
assign main_vt_buffer0_sink_sink_payload_hcount = main_vt_vtg_sink_payload_hcount;
assign main_vt_buffer0_sink_sink_payload_vcount = main_vt_vtg_sink_payload_vcount;
assign main_vt_buffer1_sink_sink_valid = main_vt_buffer0_source_source_valid;
assign main_vt_buffer0_source_source_ready = main_vt_buffer1_sink_sink_ready;
assign main_vt_buffer1_sink_sink_first = main_vt_buffer0_source_source_first;
assign main_vt_buffer1_sink_sink_last = main_vt_buffer0_source_source_last;
assign main_vt_buffer1_sink_sink_payload_hsync = main_vt_buffer0_source_source_payload_hsync;
assign main_vt_buffer1_sink_sink_payload_vsync = main_vt_buffer0_source_source_payload_vsync;
assign main_vt_buffer1_sink_sink_payload_de = main_vt_buffer0_source_source_payload_de;
assign main_vt_buffer1_sink_sink_payload_hres = main_vt_buffer0_source_source_payload_hres;
assign main_vt_buffer1_sink_sink_payload_vres = main_vt_buffer0_source_source_payload_vres;
assign main_vt_buffer1_sink_sink_payload_hcount = main_vt_buffer0_source_source_payload_hcount;
assign main_vt_buffer1_sink_sink_payload_vcount = main_vt_buffer0_source_source_payload_vcount;
assign main_vt_source_source_valid = main_vt_buffer1_source_source_valid;
assign main_vt_buffer1_source_source_ready = main_vt_source_source_ready;
assign main_vt_source_source_last = main_vt_buffer1_source_source_last;
assign main_vt_source_source_payload_hsync = main_vt_buffer1_source_source_payload_hsync;
assign main_vt_source_source_payload_vsync = main_vt_buffer1_source_source_payload_vsync;
assign main_vt_source_source_payload_de = main_vt_buffer1_source_source_payload_de;
always @(*) begin
    main_vt_y_rollover <= 8'd0;
    if ((~main_vt_y_term_rollover)) begin
        main_vt_y_rollover <= main_vt_vtg_sink_payload_vcount[11:4];
    end else begin
        if ((((main_vt_vtg_sink_payload_vcount[11:4] + main_vt_term_wrport_adr[12:7]) + 1'd1) >= 6'd48)) begin
            main_vt_y_rollover <= (((main_vt_vtg_sink_payload_vcount[11:4] + main_vt_term_wrport_adr[12:7]) + 1'd1) - 6'd48);
        end else begin
            main_vt_y_rollover <= ((main_vt_vtg_sink_payload_vcount[11:4] + main_vt_term_wrport_adr[12:7]) + 1'd1);
        end
    end
end
assign main_vt_term_rdport_re = (main_vt_vtg_sink_valid & main_vt_vtg_sink_ready);
assign main_vt_term_rdport_adr = (main_vt_vtg_sink_payload_hcount[11:3] + (main_vt_y_rollover * 8'd128));
always @(*) begin
    main_vt_term_dat_r <= 8'd0;
    main_vt_term_dat_r <= main_vt_term_rdport_dat_r[7:0];
    if (((main_vt_vtg_sink_payload_hcount[11:3] >= 7'd80) | (main_vt_vtg_sink_payload_vcount[11:4] >= 6'd48))) begin
        main_vt_term_dat_r <= 6'd32;
    end
end
assign main_vt_font_rdport_re = (main_vt_vtg_sink_valid & main_vt_vtg_sink_ready);
assign main_vt_font_rdport_adr = ((main_vt_term_dat_r * 5'd16) + main_vt_buffer0_source_source_payload_vcount[3:0]);
always @(*) begin
    main_vt_bit <= 1'd0;
    case (main_vt_buffer1_source_source_payload_hcount[2:0])
        1'd0: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[7];
        end
        1'd1: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[6];
        end
        2'd2: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[5];
        end
        2'd3: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[4];
        end
        3'd4: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[3];
        end
        3'd5: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[2];
        end
        3'd6: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[1];
        end
        3'd7: begin
            main_vt_bit <= main_vt_font_rdport_dat_r[0];
        end
    endcase
end
always @(*) begin
    main_vt_source_source_payload_b <= 8'd0;
    main_vt_source_source_payload_g <= 8'd0;
    main_vt_source_source_payload_r <= 8'd0;
    if (main_vt_bit) begin
        case (main_vt_term_rdport_dat_r[15:8])
            1'd0: begin
                {main_vt_source_source_payload_b, main_vt_source_source_payload_g, main_vt_source_source_payload_r} <= 24'd16777215;
            end
            1'd1: begin
                {main_vt_source_source_payload_b, main_vt_source_source_payload_g, main_vt_source_source_payload_r} <= 24'd9036340;
            end
        endcase
    end else begin
        {main_vt_source_source_payload_b, main_vt_source_source_payload_g, main_vt_source_source_payload_r} <= 1'd0;
    end
end
always @(*) begin
    builder_csiinterpreter_next_state <= 3'd0;
    builder_csiinterpreter_next_value <= 8'd0;
    builder_csiinterpreter_next_value_ce <= 1'd0;
    main_vt_csiinterpreter_clear_xy <= 1'd0;
    main_vt_csiinterpreter_color_csiinterpreter_next_value2 <= 4'd0;
    main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 <= 1'd0;
    main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 <= 3'd0;
    main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 <= 1'd0;
    main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1 <= 8'd0;
    main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1 <= 1'd0;
    main_vt_csiinterpreter_sink_ready <= 1'd0;
    main_vt_csiinterpreter_source_first <= 1'd0;
    main_vt_csiinterpreter_source_last <= 1'd0;
    main_vt_csiinterpreter_source_payload_data <= 8'd0;
    main_vt_csiinterpreter_source_valid <= 1'd0;
    builder_csiinterpreter_next_state <= builder_csiinterpreter_state;
    case (builder_csiinterpreter_state)
        1'd1: begin
            main_vt_csiinterpreter_sink_ready <= 1'd1;
            if (main_vt_csiinterpreter_sink_valid) begin
                if ((main_vt_csiinterpreter_sink_payload_data == 7'd91)) begin
                    main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 <= 1'd0;
                    main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 <= 1'd1;
                    builder_csiinterpreter_next_state <= 2'd2;
                end else begin
                    builder_csiinterpreter_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            if (main_vt_csiinterpreter_sink_valid) begin
                if (((main_vt_csiinterpreter_sink_payload_data >= 6'd48) & (main_vt_csiinterpreter_sink_payload_data <= 6'd63))) begin
                    main_vt_csiinterpreter_sink_ready <= 1'd1;
                    main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 <= (main_vt_csiinterpreter_csi_count + 1'd1);
                    main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 <= 1'd1;
                    builder_csiinterpreter_next_value <= main_vt_csiinterpreter_sink_payload_data;
                    builder_csiinterpreter_next_value_ce <= 1'd1;
                end else begin
                    builder_csiinterpreter_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_vt_csiinterpreter_sink_ready <= 1'd1;
            main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1 <= main_vt_csiinterpreter_sink_payload_data;
            main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1 <= 1'd1;
            builder_csiinterpreter_next_state <= 3'd4;
        end
        3'd4: begin
            if ((main_vt_csiinterpreter_csi_final == 7'd109)) begin
                if ((main_vt_csiinterpreter0 == 6'd57)) begin
                    main_vt_csiinterpreter_color_csiinterpreter_next_value2 <= 1'd1;
                    main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 <= 1'd1;
                end else begin
                    main_vt_csiinterpreter_color_csiinterpreter_next_value2 <= 1'd0;
                    main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 <= 1'd1;
                end
            end
            if ((main_vt_csiinterpreter_csi_final == 7'd65)) begin
                main_vt_csiinterpreter_clear_xy <= 1'd1;
            end
            builder_csiinterpreter_next_state <= 1'd0;
        end
        default: begin
            main_vt_csiinterpreter_source_valid <= main_vt_csiinterpreter_sink_valid;
            main_vt_csiinterpreter_sink_ready <= main_vt_csiinterpreter_source_ready;
            main_vt_csiinterpreter_source_first <= main_vt_csiinterpreter_sink_first;
            main_vt_csiinterpreter_source_last <= main_vt_csiinterpreter_sink_last;
            main_vt_csiinterpreter_source_payload_data <= main_vt_csiinterpreter_sink_payload_data;
            if ((main_vt_csiinterpreter_sink_valid & (main_vt_csiinterpreter_sink_payload_data == 5'd27))) begin
                main_vt_csiinterpreter_source_valid <= 1'd0;
                main_vt_csiinterpreter_sink_ready <= 1'd1;
                builder_csiinterpreter_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_vt_uart_fifo_syncfifo_din = {main_vt_uart_fifo_fifo_in_last, main_vt_uart_fifo_fifo_in_first, main_vt_uart_fifo_fifo_in_payload_data};
assign {main_vt_uart_fifo_fifo_out_last, main_vt_uart_fifo_fifo_out_first, main_vt_uart_fifo_fifo_out_payload_data} = main_vt_uart_fifo_syncfifo_dout;
assign main_vt_uart_fifo_sink_ready = main_vt_uart_fifo_syncfifo_writable;
assign main_vt_uart_fifo_syncfifo_we = main_vt_uart_fifo_sink_valid;
assign main_vt_uart_fifo_fifo_in_first = main_vt_uart_fifo_sink_first;
assign main_vt_uart_fifo_fifo_in_last = main_vt_uart_fifo_sink_last;
assign main_vt_uart_fifo_fifo_in_payload_data = main_vt_uart_fifo_sink_payload_data;
assign main_vt_uart_fifo_source_valid = main_vt_uart_fifo_syncfifo_readable;
assign main_vt_uart_fifo_source_first = main_vt_uart_fifo_fifo_out_first;
assign main_vt_uart_fifo_source_last = main_vt_uart_fifo_fifo_out_last;
assign main_vt_uart_fifo_source_payload_data = main_vt_uart_fifo_fifo_out_payload_data;
assign main_vt_uart_fifo_syncfifo_re = main_vt_uart_fifo_source_ready;
always @(*) begin
    main_vt_uart_fifo_wrport_adr <= 3'd0;
    if (main_vt_uart_fifo_replace) begin
        main_vt_uart_fifo_wrport_adr <= (main_vt_uart_fifo_produce - 1'd1);
    end else begin
        main_vt_uart_fifo_wrport_adr <= main_vt_uart_fifo_produce;
    end
end
assign main_vt_uart_fifo_wrport_dat_w = main_vt_uart_fifo_syncfifo_din;
assign main_vt_uart_fifo_wrport_we = (main_vt_uart_fifo_syncfifo_we & (main_vt_uart_fifo_syncfifo_writable | main_vt_uart_fifo_replace));
assign main_vt_uart_fifo_do_read = (main_vt_uart_fifo_syncfifo_readable & main_vt_uart_fifo_syncfifo_re);
assign main_vt_uart_fifo_rdport_adr = main_vt_uart_fifo_consume;
assign main_vt_uart_fifo_syncfifo_dout = main_vt_uart_fifo_rdport_dat_r;
assign main_vt_uart_fifo_syncfifo_writable = (main_vt_uart_fifo_level != 4'd8);
assign main_vt_uart_fifo_syncfifo_readable = (main_vt_uart_fifo_level != 1'd0);
always @(*) begin
    builder_fsm_next_state <= 4'd0;
    builder_fsm_next_value0 <= 7'd0;
    builder_fsm_next_value1 <= 6'd0;
    builder_fsm_next_value_ce0 <= 1'd0;
    builder_fsm_next_value_ce1 <= 1'd0;
    main_vt_term_wrport_dat_w <= 16'd0;
    main_vt_term_wrport_we <= 1'd0;
    main_vt_uart_fifo_source_ready <= 1'd0;
    main_vt_y_term_rollover_fsm_next_value <= 1'd0;
    main_vt_y_term_rollover_fsm_next_value_ce <= 1'd0;
    main_vt_term_wrport_dat_w[15:8] <= main_vt_csiinterpreter_color;
    builder_fsm_next_state <= builder_fsm_state;
    case (builder_fsm_state)
        1'd1: begin
            main_vt_term_wrport_we <= 1'd1;
            main_vt_term_wrport_dat_w[7:0] <= 6'd32;
            main_vt_y_term_rollover_fsm_next_value <= 1'd0;
            main_vt_y_term_rollover_fsm_next_value_ce <= 1'd1;
            builder_fsm_next_value0 <= (main_vt_term_wrport_adr[6:0] + 1'd1);
            builder_fsm_next_value_ce0 <= 1'd1;
            if ((main_vt_term_wrport_adr[6:0] == 7'd127)) begin
                builder_fsm_next_value0 <= 1'd0;
                builder_fsm_next_value_ce0 <= 1'd1;
                builder_fsm_next_value1 <= (main_vt_term_wrport_adr[12:7] + 1'd1);
                builder_fsm_next_value_ce1 <= 1'd1;
                if ((main_vt_term_wrport_adr[12:7] == 6'd47)) begin
                    builder_fsm_next_value1 <= 1'd0;
                    builder_fsm_next_value_ce1 <= 1'd1;
                    builder_fsm_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (main_vt_uart_fifo_source_valid) begin
                if ((main_vt_uart_fifo_source_payload_data == 4'd10)) begin
                    main_vt_uart_fifo_source_ready <= 1'd1;
                    builder_fsm_next_state <= 3'd7;
                end else begin
                    if ((main_vt_uart_fifo_source_payload_data == 4'd13)) begin
                        main_vt_uart_fifo_source_ready <= 1'd1;
                        builder_fsm_next_state <= 3'd4;
                    end else begin
                        builder_fsm_next_state <= 2'd3;
                    end
                end
            end
            if (main_vt_csiinterpreter_clear_xy) begin
                builder_fsm_next_state <= 1'd1;
            end
        end
        2'd3: begin
            main_vt_uart_fifo_source_ready <= 1'd1;
            main_vt_term_wrport_we <= 1'd1;
            main_vt_term_wrport_dat_w[7:0] <= main_vt_uart_fifo_source_payload_data;
            builder_fsm_next_state <= 3'd5;
        end
        3'd4: begin
            builder_fsm_next_value0 <= 1'd0;
            builder_fsm_next_value_ce0 <= 1'd1;
            builder_fsm_next_state <= 4'd8;
        end
        3'd5: begin
            builder_fsm_next_value0 <= (main_vt_term_wrport_adr[6:0] + 1'd1);
            builder_fsm_next_value_ce0 <= 1'd1;
            builder_fsm_next_state <= 2'd2;
            if ((main_vt_term_wrport_adr[6:0] == 7'd79)) begin
                builder_fsm_next_value0 <= 1'd0;
                builder_fsm_next_value_ce0 <= 1'd1;
                builder_fsm_next_state <= 3'd7;
            end
        end
        3'd6: begin
            builder_fsm_next_value1 <= 1'd0;
            builder_fsm_next_value_ce1 <= 1'd1;
            builder_fsm_next_state <= 4'd8;
        end
        3'd7: begin
            builder_fsm_next_value1 <= (main_vt_term_wrport_adr[12:7] + 1'd1);
            builder_fsm_next_value_ce1 <= 1'd1;
            builder_fsm_next_state <= 4'd8;
            if ((main_vt_term_wrport_adr[12:7] == 6'd47)) begin
                main_vt_y_term_rollover_fsm_next_value <= 1'd1;
                main_vt_y_term_rollover_fsm_next_value_ce <= 1'd1;
                builder_fsm_next_state <= 3'd6;
            end
        end
        4'd8: begin
            builder_fsm_next_value0 <= (main_vt_term_wrport_adr[6:0] + 1'd1);
            builder_fsm_next_value_ce0 <= 1'd1;
            main_vt_term_wrport_we <= 1'd1;
            main_vt_term_wrport_dat_w[7:0] <= 6'd32;
            if ((main_vt_term_wrport_adr[6:0] == 7'd127)) begin
                builder_fsm_next_value0 <= 1'd0;
                builder_fsm_next_value_ce0 <= 1'd1;
                builder_fsm_next_state <= 2'd2;
            end
        end
        default: begin
            builder_fsm_next_value0 <= 1'd0;
            builder_fsm_next_value_ce0 <= 1'd1;
            builder_fsm_next_value1 <= 1'd0;
            builder_fsm_next_value_ce1 <= 1'd1;
            builder_fsm_next_state <= 1'd1;
        end
    endcase
end
assign main_vt_buffer0_pipe_valid_sink_ready = ((~main_vt_buffer0_pipe_valid_source_valid) | main_vt_buffer0_pipe_valid_source_ready);
assign main_vt_buffer0_pipe_valid_sink_valid = main_vt_buffer0_sink_sink_valid;
assign main_vt_buffer0_sink_sink_ready = main_vt_buffer0_pipe_valid_sink_ready;
assign main_vt_buffer0_pipe_valid_sink_first = main_vt_buffer0_sink_sink_first;
assign main_vt_buffer0_pipe_valid_sink_last = main_vt_buffer0_sink_sink_last;
assign main_vt_buffer0_pipe_valid_sink_payload_hsync = main_vt_buffer0_sink_sink_payload_hsync;
assign main_vt_buffer0_pipe_valid_sink_payload_vsync = main_vt_buffer0_sink_sink_payload_vsync;
assign main_vt_buffer0_pipe_valid_sink_payload_de = main_vt_buffer0_sink_sink_payload_de;
assign main_vt_buffer0_pipe_valid_sink_payload_hres = main_vt_buffer0_sink_sink_payload_hres;
assign main_vt_buffer0_pipe_valid_sink_payload_vres = main_vt_buffer0_sink_sink_payload_vres;
assign main_vt_buffer0_pipe_valid_sink_payload_hcount = main_vt_buffer0_sink_sink_payload_hcount;
assign main_vt_buffer0_pipe_valid_sink_payload_vcount = main_vt_buffer0_sink_sink_payload_vcount;
assign main_vt_buffer0_source_source_valid = main_vt_buffer0_pipe_valid_source_valid;
assign main_vt_buffer0_pipe_valid_source_ready = main_vt_buffer0_source_source_ready;
assign main_vt_buffer0_source_source_first = main_vt_buffer0_pipe_valid_source_first;
assign main_vt_buffer0_source_source_last = main_vt_buffer0_pipe_valid_source_last;
assign main_vt_buffer0_source_source_payload_hsync = main_vt_buffer0_pipe_valid_source_payload_hsync;
assign main_vt_buffer0_source_source_payload_vsync = main_vt_buffer0_pipe_valid_source_payload_vsync;
assign main_vt_buffer0_source_source_payload_de = main_vt_buffer0_pipe_valid_source_payload_de;
assign main_vt_buffer0_source_source_payload_hres = main_vt_buffer0_pipe_valid_source_payload_hres;
assign main_vt_buffer0_source_source_payload_vres = main_vt_buffer0_pipe_valid_source_payload_vres;
assign main_vt_buffer0_source_source_payload_hcount = main_vt_buffer0_pipe_valid_source_payload_hcount;
assign main_vt_buffer0_source_source_payload_vcount = main_vt_buffer0_pipe_valid_source_payload_vcount;
assign main_vt_buffer1_pipe_valid_sink_ready = ((~main_vt_buffer1_pipe_valid_source_valid) | main_vt_buffer1_pipe_valid_source_ready);
assign main_vt_buffer1_pipe_valid_sink_valid = main_vt_buffer1_sink_sink_valid;
assign main_vt_buffer1_sink_sink_ready = main_vt_buffer1_pipe_valid_sink_ready;
assign main_vt_buffer1_pipe_valid_sink_first = main_vt_buffer1_sink_sink_first;
assign main_vt_buffer1_pipe_valid_sink_last = main_vt_buffer1_sink_sink_last;
assign main_vt_buffer1_pipe_valid_sink_payload_hsync = main_vt_buffer1_sink_sink_payload_hsync;
assign main_vt_buffer1_pipe_valid_sink_payload_vsync = main_vt_buffer1_sink_sink_payload_vsync;
assign main_vt_buffer1_pipe_valid_sink_payload_de = main_vt_buffer1_sink_sink_payload_de;
assign main_vt_buffer1_pipe_valid_sink_payload_hres = main_vt_buffer1_sink_sink_payload_hres;
assign main_vt_buffer1_pipe_valid_sink_payload_vres = main_vt_buffer1_sink_sink_payload_vres;
assign main_vt_buffer1_pipe_valid_sink_payload_hcount = main_vt_buffer1_sink_sink_payload_hcount;
assign main_vt_buffer1_pipe_valid_sink_payload_vcount = main_vt_buffer1_sink_sink_payload_vcount;
assign main_vt_buffer1_source_source_valid = main_vt_buffer1_pipe_valid_source_valid;
assign main_vt_buffer1_pipe_valid_source_ready = main_vt_buffer1_source_source_ready;
assign main_vt_buffer1_source_source_first = main_vt_buffer1_pipe_valid_source_first;
assign main_vt_buffer1_source_source_last = main_vt_buffer1_pipe_valid_source_last;
assign main_vt_buffer1_source_source_payload_hsync = main_vt_buffer1_pipe_valid_source_payload_hsync;
assign main_vt_buffer1_source_source_payload_vsync = main_vt_buffer1_pipe_valid_source_payload_vsync;
assign main_vt_buffer1_source_source_payload_de = main_vt_buffer1_pipe_valid_source_payload_de;
assign main_vt_buffer1_source_source_payload_hres = main_vt_buffer1_pipe_valid_source_payload_hres;
assign main_vt_buffer1_source_source_payload_vres = main_vt_buffer1_pipe_valid_source_payload_vres;
assign main_vt_buffer1_source_source_payload_hcount = main_vt_buffer1_pipe_valid_source_payload_hcount;
assign main_vt_buffer1_source_source_payload_vcount = main_vt_buffer1_pipe_valid_source_payload_vcount;
assign main_uart_cdc_cdc_sink_valid = main_uart_cdc_sink_sink_valid;
assign main_uart_cdc_sink_sink_ready = main_uart_cdc_cdc_sink_ready;
assign main_uart_cdc_cdc_sink_first = main_uart_cdc_sink_sink_first;
assign main_uart_cdc_cdc_sink_last = main_uart_cdc_sink_sink_last;
assign main_uart_cdc_cdc_sink_payload_data = main_uart_cdc_sink_sink_payload_data;
assign main_uart_cdc_source_source_valid = main_uart_cdc_cdc_source_valid;
assign main_uart_cdc_cdc_source_ready = main_uart_cdc_source_source_ready;
assign main_uart_cdc_source_source_first = main_uart_cdc_cdc_source_first;
assign main_uart_cdc_source_source_last = main_uart_cdc_cdc_source_last;
assign main_uart_cdc_source_source_payload_data = main_uart_cdc_cdc_source_payload_data;
assign main_uart_cdc_cdc_asyncfifo_din = {main_uart_cdc_cdc_fifo_in_last, main_uart_cdc_cdc_fifo_in_first, main_uart_cdc_cdc_fifo_in_payload_data};
assign {main_uart_cdc_cdc_fifo_out_last, main_uart_cdc_cdc_fifo_out_first, main_uart_cdc_cdc_fifo_out_payload_data} = main_uart_cdc_cdc_asyncfifo_dout;
assign main_uart_cdc_cdc_sink_ready = main_uart_cdc_cdc_asyncfifo_writable;
assign main_uart_cdc_cdc_asyncfifo_we = main_uart_cdc_cdc_sink_valid;
assign main_uart_cdc_cdc_fifo_in_first = main_uart_cdc_cdc_sink_first;
assign main_uart_cdc_cdc_fifo_in_last = main_uart_cdc_cdc_sink_last;
assign main_uart_cdc_cdc_fifo_in_payload_data = main_uart_cdc_cdc_sink_payload_data;
assign main_uart_cdc_cdc_source_valid = main_uart_cdc_cdc_asyncfifo_readable;
assign main_uart_cdc_cdc_source_first = main_uart_cdc_cdc_fifo_out_first;
assign main_uart_cdc_cdc_source_last = main_uart_cdc_cdc_fifo_out_last;
assign main_uart_cdc_cdc_source_payload_data = main_uart_cdc_cdc_fifo_out_payload_data;
assign main_uart_cdc_cdc_asyncfifo_re = main_uart_cdc_cdc_source_ready;
assign main_uart_cdc_cdc_graycounter0_ce = (main_uart_cdc_cdc_asyncfifo_writable & main_uart_cdc_cdc_asyncfifo_we);
assign main_uart_cdc_cdc_graycounter1_ce = (main_uart_cdc_cdc_asyncfifo_readable & main_uart_cdc_cdc_asyncfifo_re);
assign main_uart_cdc_cdc_asyncfifo_writable = (((main_uart_cdc_cdc_graycounter0_q[2] == main_uart_cdc_cdc_consume_wdomain[2]) | (main_uart_cdc_cdc_graycounter0_q[1] == main_uart_cdc_cdc_consume_wdomain[1])) | (main_uart_cdc_cdc_graycounter0_q[0] != main_uart_cdc_cdc_consume_wdomain[0]));
assign main_uart_cdc_cdc_asyncfifo_readable = (main_uart_cdc_cdc_graycounter1_q != main_uart_cdc_cdc_produce_rdomain);
assign main_uart_cdc_cdc_wrport_adr = main_uart_cdc_cdc_graycounter0_q_binary[1:0];
assign main_uart_cdc_cdc_wrport_dat_w = main_uart_cdc_cdc_asyncfifo_din;
assign main_uart_cdc_cdc_wrport_we = main_uart_cdc_cdc_graycounter0_ce;
assign main_uart_cdc_cdc_rdport_adr = main_uart_cdc_cdc_graycounter1_q_next_binary[1:0];
assign main_uart_cdc_cdc_asyncfifo_dout = main_uart_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_uart_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (main_uart_cdc_cdc_graycounter0_ce) begin
        main_uart_cdc_cdc_graycounter0_q_next_binary <= (main_uart_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_uart_cdc_cdc_graycounter0_q_next_binary <= main_uart_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_uart_cdc_cdc_graycounter0_q_next = (main_uart_cdc_cdc_graycounter0_q_next_binary ^ main_uart_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    main_uart_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (main_uart_cdc_cdc_graycounter1_ce) begin
        main_uart_cdc_cdc_graycounter1_q_next_binary <= (main_uart_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_uart_cdc_cdc_graycounter1_q_next_binary <= main_uart_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_uart_cdc_cdc_graycounter1_q_next = (main_uart_cdc_cdc_graycounter1_q_next_binary ^ main_uart_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 1'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {user_led_n0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_wishbone2csr_next_state <= 1'd0;
    builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
    case (builder_wishbone2csr_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr[29:0];
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status[31:0];
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_out0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_out0_w = main_storage;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_load0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_load0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_load0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_reload0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_reload0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_reload0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_en0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank2_en0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_en0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_update_value0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank2_update_value0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_update_value0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_value_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_value_re <= 1'd0;
    builder_csr_bankarray_csrbank2_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank2_value_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_value_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_ev_status_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_ev_pending_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_ev_enable0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_load0_w = main_basesoc_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank2_reload0_w = main_basesoc_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank2_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank2_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank2_value_w = main_basesoc_timer_value_status[31:0];
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank2_value_we;
always @(*) begin
    main_basesoc_timer_status_status <= 1'd0;
    main_basesoc_timer_status_status <= main_basesoc_timer_zero0;
end
assign builder_csr_bankarray_csrbank2_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
    main_basesoc_timer_pending_status <= 1'd0;
    main_basesoc_timer_pending_status <= main_basesoc_timer_zero1;
end
assign builder_csr_bankarray_csrbank2_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank2_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface3_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_txfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank3_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_txfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_txfull_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_rxempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank3_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_rxempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_rxempty_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_status_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_pending_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_enable0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_txempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank3_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank3_txempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_txempty_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_rxfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank3_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank3_rxfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_rxfull_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank3_txfull_we;
assign builder_csr_bankarray_csrbank3_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank3_ev_status_w = main_basesoc_uart_status_status[1:0];
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank3_ev_pending_w = main_basesoc_uart_pending_status[1:0];
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank3_ev_enable0_w = main_basesoc_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank3_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank3_txempty_we;
assign builder_csr_bankarray_csrbank3_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank3_rxfull_we;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank4_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_enable0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_hres0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_hres0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_hres0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_hres0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_hres0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_hsync_start0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_hsync_start0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_hsync_start0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank4_hsync_start0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_hsync_start0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_hsync_end0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_hsync_end0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_hsync_end0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_hsync_end0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_hsync_end0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_hscan0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_hscan0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_hscan0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_hscan0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_hscan0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_vres0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_vres0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_vres0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_vres0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_vres0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_vsync_start0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_vsync_start0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_vsync_start0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_vsync_start0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_vsync_start0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_vsync_end0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_vsync_end0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_vsync_end0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_vsync_end0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_vsync_end0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_vscan0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_vscan0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_vscan0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank4_vscan0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_vscan0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_enable0_w = main_vtg_enable_storage;
assign builder_csr_bankarray_csrbank4_hres0_w = main_vtg_hres_storage[11:0];
assign builder_csr_bankarray_csrbank4_hsync_start0_w = main_vtg_hsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank4_hsync_end0_w = main_vtg_hsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank4_hscan0_w = main_vtg_hscan_storage[11:0];
assign builder_csr_bankarray_csrbank4_vres0_w = main_vtg_vres_storage[11:0];
assign builder_csr_bankarray_csrbank4_vsync_start0_w = main_vtg_vsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank4_vsync_end0_w = main_vtg_vsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank4_vscan0_w = main_vtg_vscan_storage[11:0];
assign builder_csr_interconnect_adr = builder_interface1_adr;
assign builder_csr_interconnect_re = builder_interface1_re;
assign builder_csr_interconnect_we = builder_interface1_we;
assign builder_csr_interconnect_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_comb_self0 <= 30'd0;
    case (builder_grant)
        default: begin
            builder_comb_self0 <= main_basesoc_adapted_interface_adr;
        end
    endcase
end
always @(*) begin
    builder_comb_self1 <= 32'd0;
    case (builder_grant)
        default: begin
            builder_comb_self1 <= main_basesoc_adapted_interface_dat_w;
        end
    endcase
end
always @(*) begin
    builder_comb_self2 <= 4'd0;
    case (builder_grant)
        default: begin
            builder_comb_self2 <= main_basesoc_adapted_interface_sel;
        end
    endcase
end
always @(*) begin
    builder_comb_self3 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_comb_self3 <= main_basesoc_adapted_interface_cyc;
        end
    endcase
end
always @(*) begin
    builder_comb_self4 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_comb_self4 <= main_basesoc_adapted_interface_stb;
        end
    endcase
end
always @(*) begin
    builder_comb_self5 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_comb_self5 <= main_basesoc_adapted_interface_we;
        end
    endcase
end
always @(*) begin
    builder_comb_self6 <= 3'd0;
    case (builder_grant)
        default: begin
            builder_comb_self6 <= main_basesoc_adapted_interface_cti;
        end
    endcase
end
always @(*) begin
    builder_comb_self7 <= 2'd0;
    case (builder_grant)
        default: begin
            builder_comb_self7 <= main_basesoc_adapted_interface_bte;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl0_regs1;
assign sdrio_clk = vga_clk;
assign sdrio_clk_1 = vga_clk;
assign sdrio_clk_2 = vga_clk;
assign sdrio_clk_3 = vga_clk;
assign sdrio_clk_4 = vga_clk;
assign sdrio_clk_5 = vga_clk;
assign sdrio_clk_6 = vga_clk;
assign sdrio_clk_7 = vga_clk;
assign sdrio_clk_8 = vga_clk;
assign sdrio_clk_9 = vga_clk;
assign sdrio_clk_10 = vga_clk;
assign sdrio_clk_11 = vga_clk;
assign sdrio_clk_12 = vga_clk;
assign sdrio_clk_13 = vga_clk;
assign main_vtg_enable = builder_multiregimpl1_regs1;
assign main_vtg_hres = builder_multiregimpl2_regs1;
assign main_vtg_hsync_start = builder_multiregimpl3_regs1;
assign main_vtg_hsync_end = builder_multiregimpl4_regs1;
assign main_vtg_hscan = builder_multiregimpl5_regs1;
assign main_vtg_vres = builder_multiregimpl6_regs1;
assign main_vtg_vsync_start = builder_multiregimpl7_regs1;
assign main_vtg_vsync_end = builder_multiregimpl8_regs1;
assign main_vtg_vscan = builder_multiregimpl9_regs1;
assign main_uart_cdc_cdc_produce_rdomain = builder_multiregimpl10_regs1;
assign main_uart_cdc_cdc_consume_wdomain = builder_multiregimpl11_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sdrio_clk) begin
    vga_hsync_n <= (~main_sink_payload_hsync);
    vga_vsync_n <= (~main_sink_payload_vsync);
    vga_r[0] <= (main_sink_payload_r[4] & main_sink_payload_de);
    vga_g[0] <= (main_sink_payload_g[4] & main_sink_payload_de);
    vga_b[0] <= (main_sink_payload_b[4] & main_sink_payload_de);
    vga_r[1] <= (main_sink_payload_r[5] & main_sink_payload_de);
    vga_g[1] <= (main_sink_payload_g[5] & main_sink_payload_de);
    vga_b[1] <= (main_sink_payload_b[5] & main_sink_payload_de);
    vga_r[2] <= (main_sink_payload_r[6] & main_sink_payload_de);
    vga_g[2] <= (main_sink_payload_g[6] & main_sink_payload_de);
    vga_b[2] <= (main_sink_payload_b[6] & main_sink_payload_de);
    vga_r[3] <= (main_sink_payload_r[7] & main_sink_payload_de);
    vga_g[3] <= (main_sink_payload_g[7] & main_sink_payload_de);
    vga_b[3] <= (main_sink_payload_b[7] & main_sink_payload_de);
end

always @(posedge sys_clk) begin
    builder_slaves <= builder_master;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata1 <= main_basesoc_idbus_dat_r;
    end
    builder_femtorv_state <= builder_femtorv_next_state;
    if (main_basesoc_idbus_adr_femtorv_next_value_ce0) begin
        main_basesoc_idbus_adr <= main_basesoc_idbus_adr_femtorv_next_value0;
    end
    if (main_basesoc_idbus_dat_w_femtorv_next_value_ce1) begin
        main_basesoc_idbus_dat_w <= main_basesoc_idbus_dat_w_femtorv_next_value1;
    end
    if (main_basesoc_idbus_sel_femtorv_next_value_ce2) begin
        main_basesoc_idbus_sel <= main_basesoc_idbus_sel_femtorv_next_value2;
    end
    if (main_basesoc_idbus_we_femtorv_next_value_ce3) begin
        main_basesoc_idbus_we <= main_basesoc_idbus_we_femtorv_next_value3;
    end
    main_basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_basesoc_ram_bus_cyc & main_basesoc_basesoc_ram_bus_stb) & ((~main_basesoc_basesoc_ram_bus_ack) | main_basesoc_basesoc_adr_burst))) begin
        main_basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & ((~main_basesoc_ram_bus_ram_bus_ack) | main_basesoc_ram_adr_burst))) begin
        main_basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 25'd20615843;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 25'd20615843);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 25'd20615843);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    main_uart_cdc_cdc_graycounter0_q_binary <= main_uart_cdc_cdc_graycounter0_q_next_binary;
    main_uart_cdc_cdc_graycounter0_q <= main_uart_cdc_cdc_graycounter0_q_next;
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser)};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 24'd12000000;
    end
    builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_out0_re) begin
        main_storage <= builder_csr_bankarray_csrbank1_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank1_out0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_load0_re) begin
        main_basesoc_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank2_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank2_load0_re;
    if (builder_csr_bankarray_csrbank2_reload0_re) begin
        main_basesoc_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank2_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank2_reload0_re;
    if (builder_csr_bankarray_csrbank2_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank2_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank2_en0_re;
    if (builder_csr_bankarray_csrbank2_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank2_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank2_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank2_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
    if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank2_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
    if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank2_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank3_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank3_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
    if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
        main_basesoc_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank3_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
    if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
        main_basesoc_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank3_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank3_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank3_rxfull_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_enable0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hres0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hsync_start0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hsync_end0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hscan0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vres0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vsync_start0_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vsync_end0_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vscan0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_enable0_re) begin
        main_vtg_enable_storage <= builder_csr_bankarray_csrbank4_enable0_r;
    end
    main_vtg_enable_re <= builder_csr_bankarray_csrbank4_enable0_re;
    if (builder_csr_bankarray_csrbank4_hres0_re) begin
        main_vtg_hres_storage[11:0] <= builder_csr_bankarray_csrbank4_hres0_r;
    end
    main_vtg_hres_re <= builder_csr_bankarray_csrbank4_hres0_re;
    if (builder_csr_bankarray_csrbank4_hsync_start0_re) begin
        main_vtg_hsync_start_storage[11:0] <= builder_csr_bankarray_csrbank4_hsync_start0_r;
    end
    main_vtg_hsync_start_re <= builder_csr_bankarray_csrbank4_hsync_start0_re;
    if (builder_csr_bankarray_csrbank4_hsync_end0_re) begin
        main_vtg_hsync_end_storage[11:0] <= builder_csr_bankarray_csrbank4_hsync_end0_r;
    end
    main_vtg_hsync_end_re <= builder_csr_bankarray_csrbank4_hsync_end0_re;
    if (builder_csr_bankarray_csrbank4_hscan0_re) begin
        main_vtg_hscan_storage[11:0] <= builder_csr_bankarray_csrbank4_hscan0_r;
    end
    main_vtg_hscan_re <= builder_csr_bankarray_csrbank4_hscan0_re;
    if (builder_csr_bankarray_csrbank4_vres0_re) begin
        main_vtg_vres_storage[11:0] <= builder_csr_bankarray_csrbank4_vres0_r;
    end
    main_vtg_vres_re <= builder_csr_bankarray_csrbank4_vres0_re;
    if (builder_csr_bankarray_csrbank4_vsync_start0_re) begin
        main_vtg_vsync_start_storage[11:0] <= builder_csr_bankarray_csrbank4_vsync_start0_r;
    end
    main_vtg_vsync_start_re <= builder_csr_bankarray_csrbank4_vsync_start0_re;
    if (builder_csr_bankarray_csrbank4_vsync_end0_re) begin
        main_vtg_vsync_end_storage[11:0] <= builder_csr_bankarray_csrbank4_vsync_end0_r;
    end
    main_vtg_vsync_end_re <= builder_csr_bankarray_csrbank4_vsync_end0_re;
    if (builder_csr_bankarray_csrbank4_vscan0_re) begin
        main_vtg_vscan_storage[11:0] <= builder_csr_bankarray_csrbank4_vscan0_r;
    end
    main_vtg_vscan_re <= builder_csr_bankarray_csrbank4_vscan0_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_idbus_we <= 1'd0;
        main_basesoc_mbus_rdata1 <= 32'd0;
        main_basesoc_basesoc_ram_bus_ack <= 1'd0;
        main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_vtg_enable_storage <= 1'd1;
        main_vtg_enable_re <= 1'd0;
        main_vtg_hres_storage <= 12'd1024;
        main_vtg_hres_re <= 1'd0;
        main_vtg_hsync_start_storage <= 12'd1048;
        main_vtg_hsync_start_re <= 1'd0;
        main_vtg_hsync_end_storage <= 12'd1184;
        main_vtg_hsync_end_re <= 1'd0;
        main_vtg_hscan_storage <= 12'd1343;
        main_vtg_hscan_re <= 1'd0;
        main_vtg_vres_storage <= 12'd768;
        main_vtg_vres_re <= 1'd0;
        main_vtg_vsync_start_storage <= 12'd771;
        main_vtg_vsync_start_re <= 1'd0;
        main_vtg_vsync_end_storage <= 12'd777;
        main_vtg_vsync_end_re <= 1'd0;
        main_vtg_vscan_storage <= 12'd805;
        main_vtg_vscan_re <= 1'd0;
        main_uart_cdc_cdc_graycounter0_q <= 3'd0;
        main_uart_cdc_cdc_graycounter0_q_binary <= 3'd0;
        main_storage <= 1'd0;
        main_re <= 1'd0;
        main_chaser <= 1'd0;
        main_mode <= 1'd0;
        main_count <= 24'd12000000;
        builder_slaves <= 3'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_femtorv_state <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_wishbone2csr_state <= 1'd0;
    end
    builder_multiregimpl0_regs0 <= serial_rx;
    builder_multiregimpl0_regs1 <= builder_multiregimpl0_regs0;
    builder_multiregimpl11_regs0 <= main_uart_cdc_cdc_graycounter1_q;
    builder_multiregimpl11_regs1 <= builder_multiregimpl11_regs0;
end

always @(posedge vga_clk) begin
    main_vtg_source_first <= ((main_vtg_source_payload_hcount == 1'd0) & (main_vtg_source_payload_vcount == 1'd0));
    main_vtg_source_last <= ((main_vtg_source_payload_hcount == main_vtg_hscan) & (main_vtg_source_payload_vcount == main_vtg_vscan));
    builder_clockdomainsrenamer0_state <= builder_clockdomainsrenamer0_next_state;
    if (main_vtg_hactive_clockdomainsrenamer0_next_value_ce0) begin
        main_vtg_hactive <= main_vtg_hactive_clockdomainsrenamer0_next_value0;
    end
    if (main_vtg_vactive_clockdomainsrenamer0_next_value_ce1) begin
        main_vtg_vactive <= main_vtg_vactive_clockdomainsrenamer0_next_value1;
    end
    if (main_vtg_source_payload_hres_clockdomainsrenamer0_next_value_ce2) begin
        main_vtg_source_payload_hres <= main_vtg_source_payload_hres_clockdomainsrenamer0_next_value2;
    end
    if (main_vtg_source_payload_vres_clockdomainsrenamer0_next_value_ce3) begin
        main_vtg_source_payload_vres <= main_vtg_source_payload_vres_clockdomainsrenamer0_next_value3;
    end
    if (main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value_ce4) begin
        main_vtg_source_payload_hcount <= main_vtg_source_payload_hcount_clockdomainsrenamer0_next_value4;
    end
    if (main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value_ce5) begin
        main_vtg_source_payload_vcount <= main_vtg_source_payload_vcount_clockdomainsrenamer0_next_value5;
    end
    if (main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value_ce6) begin
        main_vtg_source_payload_hsync <= main_vtg_source_payload_hsync_clockdomainsrenamer0_next_value6;
    end
    if (main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value_ce7) begin
        main_vtg_source_payload_vsync <= main_vtg_source_payload_vsync_clockdomainsrenamer0_next_value7;
    end
    if (main_vtg_reset) begin
        main_vtg_source_payload_hsync <= 1'd0;
        main_vtg_source_payload_vsync <= 1'd0;
        main_vtg_source_payload_hres <= 12'd0;
        main_vtg_source_payload_vres <= 12'd0;
        main_vtg_source_payload_hcount <= 12'd0;
        main_vtg_source_payload_vcount <= 12'd0;
        main_vtg_hactive <= 1'd0;
        main_vtg_vactive <= 1'd0;
        builder_clockdomainsrenamer0_state <= 1'd0;
    end
    builder_csiinterpreter_state <= builder_csiinterpreter_next_state;
    if (main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0) begin
        main_vt_csiinterpreter_csi_count <= main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0;
    end
    if (builder_csiinterpreter_next_value_ce) begin
        builder_sync_self = builder_csiinterpreter_next_value;
        case (main_vt_csiinterpreter_csi_count)
            1'd0: begin
                main_vt_csiinterpreter0 <= builder_sync_self;
            end
            1'd1: begin
                main_vt_csiinterpreter1 <= builder_sync_self;
            end
            2'd2: begin
                main_vt_csiinterpreter2 <= builder_sync_self;
            end
            2'd3: begin
                main_vt_csiinterpreter3 <= builder_sync_self;
            end
            3'd4: begin
                main_vt_csiinterpreter4 <= builder_sync_self;
            end
            3'd5: begin
                main_vt_csiinterpreter5 <= builder_sync_self;
            end
            3'd6: begin
                main_vt_csiinterpreter6 <= builder_sync_self;
            end
            default: begin
                main_vt_csiinterpreter7 <= builder_sync_self;
            end
        endcase
    end
    if (main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1) begin
        main_vt_csiinterpreter_csi_final <= main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1;
    end
    if (main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2) begin
        main_vt_csiinterpreter_color <= main_vt_csiinterpreter_color_csiinterpreter_next_value2;
    end
    if (((main_vt_uart_fifo_syncfifo_we & main_vt_uart_fifo_syncfifo_writable) & (~main_vt_uart_fifo_replace))) begin
        main_vt_uart_fifo_produce <= (main_vt_uart_fifo_produce + 1'd1);
    end
    if (main_vt_uart_fifo_do_read) begin
        main_vt_uart_fifo_consume <= (main_vt_uart_fifo_consume + 1'd1);
    end
    if (((main_vt_uart_fifo_syncfifo_we & main_vt_uart_fifo_syncfifo_writable) & (~main_vt_uart_fifo_replace))) begin
        if ((~main_vt_uart_fifo_do_read)) begin
            main_vt_uart_fifo_level <= (main_vt_uart_fifo_level + 1'd1);
        end
    end else begin
        if (main_vt_uart_fifo_do_read) begin
            main_vt_uart_fifo_level <= (main_vt_uart_fifo_level - 1'd1);
        end
    end
    builder_fsm_state <= builder_fsm_next_state;
    if (builder_fsm_next_value_ce0) begin
        main_vt_term_wrport_adr[6:0] <= builder_fsm_next_value0;
    end
    if (builder_fsm_next_value_ce1) begin
        main_vt_term_wrport_adr[12:7] <= builder_fsm_next_value1;
    end
    if (main_vt_y_term_rollover_fsm_next_value_ce) begin
        main_vt_y_term_rollover <= main_vt_y_term_rollover_fsm_next_value;
    end
    if (((~main_vt_buffer0_pipe_valid_source_valid) | main_vt_buffer0_pipe_valid_source_ready)) begin
        main_vt_buffer0_pipe_valid_source_valid <= main_vt_buffer0_pipe_valid_sink_valid;
        main_vt_buffer0_pipe_valid_source_first <= main_vt_buffer0_pipe_valid_sink_first;
        main_vt_buffer0_pipe_valid_source_last <= main_vt_buffer0_pipe_valid_sink_last;
        main_vt_buffer0_pipe_valid_source_payload_hsync <= main_vt_buffer0_pipe_valid_sink_payload_hsync;
        main_vt_buffer0_pipe_valid_source_payload_vsync <= main_vt_buffer0_pipe_valid_sink_payload_vsync;
        main_vt_buffer0_pipe_valid_source_payload_de <= main_vt_buffer0_pipe_valid_sink_payload_de;
        main_vt_buffer0_pipe_valid_source_payload_hres <= main_vt_buffer0_pipe_valid_sink_payload_hres;
        main_vt_buffer0_pipe_valid_source_payload_vres <= main_vt_buffer0_pipe_valid_sink_payload_vres;
        main_vt_buffer0_pipe_valid_source_payload_hcount <= main_vt_buffer0_pipe_valid_sink_payload_hcount;
        main_vt_buffer0_pipe_valid_source_payload_vcount <= main_vt_buffer0_pipe_valid_sink_payload_vcount;
    end
    if (((~main_vt_buffer1_pipe_valid_source_valid) | main_vt_buffer1_pipe_valid_source_ready)) begin
        main_vt_buffer1_pipe_valid_source_valid <= main_vt_buffer1_pipe_valid_sink_valid;
        main_vt_buffer1_pipe_valid_source_first <= main_vt_buffer1_pipe_valid_sink_first;
        main_vt_buffer1_pipe_valid_source_last <= main_vt_buffer1_pipe_valid_sink_last;
        main_vt_buffer1_pipe_valid_source_payload_hsync <= main_vt_buffer1_pipe_valid_sink_payload_hsync;
        main_vt_buffer1_pipe_valid_source_payload_vsync <= main_vt_buffer1_pipe_valid_sink_payload_vsync;
        main_vt_buffer1_pipe_valid_source_payload_de <= main_vt_buffer1_pipe_valid_sink_payload_de;
        main_vt_buffer1_pipe_valid_source_payload_hres <= main_vt_buffer1_pipe_valid_sink_payload_hres;
        main_vt_buffer1_pipe_valid_source_payload_vres <= main_vt_buffer1_pipe_valid_sink_payload_vres;
        main_vt_buffer1_pipe_valid_source_payload_hcount <= main_vt_buffer1_pipe_valid_sink_payload_hcount;
        main_vt_buffer1_pipe_valid_source_payload_vcount <= main_vt_buffer1_pipe_valid_sink_payload_vcount;
    end
    main_uart_cdc_cdc_graycounter1_q_binary <= main_uart_cdc_cdc_graycounter1_q_next_binary;
    main_uart_cdc_cdc_graycounter1_q <= main_uart_cdc_cdc_graycounter1_q_next;
    if (vga_rst) begin
        main_vtg_source_payload_hsync <= 1'd0;
        main_vtg_source_payload_vsync <= 1'd0;
        main_vtg_source_payload_hres <= 12'd0;
        main_vtg_source_payload_vres <= 12'd0;
        main_vtg_source_payload_hcount <= 12'd0;
        main_vtg_source_payload_vcount <= 12'd0;
        main_vtg_hactive <= 1'd0;
        main_vtg_vactive <= 1'd0;
        main_vt_term_wrport_adr <= 13'd0;
        main_vt_csiinterpreter_color <= 4'd0;
        main_vt_csiinterpreter_csi_count <= 3'd0;
        main_vt_csiinterpreter0 <= 8'd0;
        main_vt_csiinterpreter1 <= 8'd0;
        main_vt_csiinterpreter2 <= 8'd0;
        main_vt_csiinterpreter3 <= 8'd0;
        main_vt_csiinterpreter4 <= 8'd0;
        main_vt_csiinterpreter5 <= 8'd0;
        main_vt_csiinterpreter6 <= 8'd0;
        main_vt_csiinterpreter7 <= 8'd0;
        main_vt_csiinterpreter_csi_final <= 8'd0;
        main_vt_uart_fifo_level <= 4'd0;
        main_vt_uart_fifo_produce <= 3'd0;
        main_vt_uart_fifo_consume <= 3'd0;
        main_vt_y_term_rollover <= 1'd0;
        main_vt_buffer0_pipe_valid_source_valid <= 1'd0;
        main_vt_buffer0_pipe_valid_source_payload_hsync <= 1'd0;
        main_vt_buffer0_pipe_valid_source_payload_vsync <= 1'd0;
        main_vt_buffer0_pipe_valid_source_payload_de <= 1'd0;
        main_vt_buffer0_pipe_valid_source_payload_hres <= 12'd0;
        main_vt_buffer0_pipe_valid_source_payload_vres <= 12'd0;
        main_vt_buffer0_pipe_valid_source_payload_hcount <= 12'd0;
        main_vt_buffer0_pipe_valid_source_payload_vcount <= 12'd0;
        main_vt_buffer1_pipe_valid_source_valid <= 1'd0;
        main_vt_buffer1_pipe_valid_source_payload_hsync <= 1'd0;
        main_vt_buffer1_pipe_valid_source_payload_vsync <= 1'd0;
        main_vt_buffer1_pipe_valid_source_payload_de <= 1'd0;
        main_vt_buffer1_pipe_valid_source_payload_hres <= 12'd0;
        main_vt_buffer1_pipe_valid_source_payload_vres <= 12'd0;
        main_vt_buffer1_pipe_valid_source_payload_hcount <= 12'd0;
        main_vt_buffer1_pipe_valid_source_payload_vcount <= 12'd0;
        main_uart_cdc_cdc_graycounter1_q <= 3'd0;
        main_uart_cdc_cdc_graycounter1_q_binary <= 3'd0;
        builder_clockdomainsrenamer0_state <= 1'd0;
        builder_csiinterpreter_state <= 3'd0;
        builder_fsm_state <= 4'd0;
    end
    builder_multiregimpl1_regs0 <= main_vtg_enable_storage;
    builder_multiregimpl1_regs1 <= builder_multiregimpl1_regs0;
    builder_multiregimpl2_regs0 <= main_vtg_hres_storage;
    builder_multiregimpl2_regs1 <= builder_multiregimpl2_regs0;
    builder_multiregimpl3_regs0 <= main_vtg_hsync_start_storage;
    builder_multiregimpl3_regs1 <= builder_multiregimpl3_regs0;
    builder_multiregimpl4_regs0 <= main_vtg_hsync_end_storage;
    builder_multiregimpl4_regs1 <= builder_multiregimpl4_regs0;
    builder_multiregimpl5_regs0 <= main_vtg_hscan_storage;
    builder_multiregimpl5_regs1 <= builder_multiregimpl5_regs0;
    builder_multiregimpl6_regs0 <= main_vtg_vres_storage;
    builder_multiregimpl6_regs1 <= builder_multiregimpl6_regs0;
    builder_multiregimpl7_regs0 <= main_vtg_vsync_start_storage;
    builder_multiregimpl7_regs1 <= builder_multiregimpl7_regs0;
    builder_multiregimpl8_regs0 <= main_vtg_vsync_end_storage;
    builder_multiregimpl8_regs1 <= builder_multiregimpl8_regs0;
    builder_multiregimpl9_regs0 <= main_vtg_vscan_storage;
    builder_multiregimpl9_regs1 <= builder_multiregimpl9_regs0;
    builder_multiregimpl10_regs0 <= main_uart_cdc_cdc_graycounter0_q;
    builder_multiregimpl10_regs1 <= builder_multiregimpl10_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance CC_USR_RSTN of CC_USR_RSTN Module.
//------------------------------------------------------------------------------
CC_USR_RSTN CC_USR_RSTN(
	// Outputs.
	.USR_RSTN (main_rst_n)
);

//------------------------------------------------------------------------------
// Memory rom: 6075-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6074];
initial begin
	$readmemh("olimex_gatemate_a1_evb_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("olimex_gatemate_a1_evb_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_ram_we[0])
		sram[main_basesoc_ram_adr][7:0] <= main_basesoc_ram_dat_w[7:0];
	if (main_basesoc_ram_we[1])
		sram[main_basesoc_ram_adr][15:8] <= main_basesoc_ram_dat_w[15:8];
	if (main_basesoc_ram_we[2])
		sram[main_basesoc_ram_adr][23:16] <= main_basesoc_ram_dat_w[23:16];
	if (main_basesoc_ram_we[3])
		sram[main_basesoc_ram_adr][31:24] <= main_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_ram_adr;
end
assign main_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("olimex_gatemate_a1_evb_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory font_mem: 4096-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] font_mem[0:4095];
initial begin
	$readmemh("olimex_gatemate_a1_evb_font_mem.init", font_mem);
end
reg [11:0] font_mem_adr0;
always @(posedge vga_clk) begin
	if (main_vt_font_rdport_re)
		font_mem_adr0 <= main_vt_font_rdport_adr;
end
assign main_vt_font_rdport_dat_r = font_mem[font_mem_adr0];


//------------------------------------------------------------------------------
// Memory term_mem: 6144-words x 16-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 16 
// Port 1 | Read: Sync  | Write: ---- | 
reg [15:0] term_mem[0:6143];
initial begin
	$readmemh("olimex_gatemate_a1_evb_term_mem.init", term_mem);
end
reg [12:0] term_mem_adr0;
reg [12:0] term_mem_adr1;
always @(posedge vga_clk) begin
	if (main_vt_term_wrport_we)
		term_mem[main_vt_term_wrport_adr] <= main_vt_term_wrport_dat_w;
	term_mem_adr0 <= main_vt_term_wrport_adr;
end
always @(posedge vga_clk) begin
	if (main_vt_term_rdport_re)
		term_mem_adr1 <= main_vt_term_rdport_adr;
end
assign main_vt_term_wrport_dat_r = term_mem[term_mem_adr0];
assign main_vt_term_rdport_dat_r = term_mem[term_mem_adr1];


//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Async | Write: ---- | 
reg [9:0] storage_2[0:7];
reg [9:0] storage_2_dat0;
always @(posedge vga_clk) begin
	if (main_vt_uart_fifo_wrport_we)
		storage_2[main_vt_uart_fifo_wrport_adr] <= main_vt_uart_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_vt_uart_fifo_wrport_adr];
end
always @(posedge vga_clk) begin
end
assign main_vt_uart_fifo_wrport_dat_r = storage_2_dat0;
assign main_vt_uart_fifo_rdport_dat_r = storage_2[main_vt_uart_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_3[0:3];
reg [9:0] storage_3_dat0;
reg [9:0] storage_3_dat1;
always @(posedge sys_clk) begin
	if (main_uart_cdc_cdc_wrport_we)
		storage_3[main_uart_cdc_cdc_wrport_adr] <= main_uart_cdc_cdc_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_uart_cdc_cdc_wrport_adr];
end
always @(posedge vga_clk) begin
	storage_3_dat1 <= storage_3[main_uart_cdc_cdc_rdport_adr];
end
assign main_uart_cdc_cdc_wrport_dat_r = storage_3_dat0;
assign main_uart_cdc_cdc_rdport_dat_r = storage_3_dat1;


//------------------------------------------------------------------------------
// Instance CC_PLL of CC_PLL Module.
//------------------------------------------------------------------------------
CC_PLL #(
	// Parameters.
	.CI_FILTER_CONST (2'd2),
	.CLK180_DOUB     (1'd0),
	.CLK270_DOUB     (1'd0),
	.CP_FILTER_CONST (3'd4),
	.LOCK_REQ        (1'd1),
	.LOW_JITTER      (1'd1),
	.OUT_CLK         ("24.0"),
	.PERF_MD         ("ECONOMY"),
	.REF_CLK         ("10.0")
) CC_PLL (
	// Inputs.
	.CLK_FEEDBACK        (1'd0),
	.CLK_REF             (main_gatematepll0_clkin),
	.USR_CLK_REF         (builder_gatematepll03),
	.USR_LOCKED_STDY_RST (1'd0),

	// Outputs.
	.CLK0                (main_gatematepll0_clkout),
	.CLK180              (builder_gatematepll01),
	.CLK270              (builder_gatematepll02),
	.CLK90               (builder_gatematepll00),
	.CLK_REF_OUT         (builder_gatematepll04),
	.USR_PLL_LOCKED      (builder_gatematepll0_locked_s1),
	.USR_PLL_LOCKED_STDY (builder_gatematepll05)
);

//------------------------------------------------------------------------------
// Instance CC_PLL_1 of CC_PLL Module.
//------------------------------------------------------------------------------
CC_PLL #(
	// Parameters.
	.CI_FILTER_CONST (2'd2),
	.CLK180_DOUB     (1'd0),
	.CLK270_DOUB     (1'd0),
	.CP_FILTER_CONST (3'd4),
	.LOCK_REQ        (1'd1),
	.LOW_JITTER      (1'd1),
	.OUT_CLK         ("65.0"),
	.PERF_MD         ("ECONOMY"),
	.REF_CLK         ("10.0")
) CC_PLL_1 (
	// Inputs.
	.CLK_FEEDBACK        (1'd0),
	.CLK_REF             (main_gatematepll1_clkin),
	.USR_CLK_REF         (builder_gatematepll13),
	.USR_LOCKED_STDY_RST (1'd0),

	// Outputs.
	.CLK0                (main_gatematepll1_clkout),
	.CLK180              (builder_gatematepll11),
	.CLK270              (builder_gatematepll12),
	.CLK90               (builder_gatematepll10),
	.CLK_REF_OUT         (builder_gatematepll14),
	.USR_PLL_LOCKED      (builder_gatematepll1_locked_s1),
	.USR_PLL_LOCKED_STDY (builder_gatematepll15)
);

//------------------------------------------------------------------------------
// Instance FemtoRV32 of FemtoRV32 Module.
//------------------------------------------------------------------------------
FemtoRV32 #(
	// Parameters.
	.ADDR_WIDTH (6'd32),
	.RESET_ADDR (32'd0)
) FemtoRV32 (
	// Inputs.
	.clk       (sys_clk),
	.mem_rbusy (main_basesoc_mbus_rbusy),
	.mem_rdata (main_basesoc_mbus_rdata0),
	.mem_wbusy (main_basesoc_mbus_wbusy),
	.reset     ((~(sys_rst | main_basesoc_reset))),

	// Outputs.
	.mem_addr  (main_basesoc_mbus_addr),
	.mem_rstrb (main_basesoc_mbus_rstrb),
	.mem_wdata (main_basesoc_mbus_wdata),
	.mem_wmask (main_basesoc_mbus_wmask)
);

//------------------------------------------------------------------------------
// Instance CC_DFF of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF (
	// Inputs.
	.CLK (sys_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_pll_locked)),

	// Outputs.
	.Q   (builder_rst10)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_1 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_1 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder_rst10),
	.EN  (1'd1),
	.SR  ((~main_pll_locked)),

	// Outputs.
	.Q   (sys_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_2 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_2 (
	// Inputs.
	.CLK (vga_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_pll_video_locked)),

	// Outputs.
	.Q   (builder_rst11)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_3 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_3 (
	// Inputs.
	.CLK (vga_clk),
	.D   (builder_rst11),
	.EN  (1'd1),
	.SR  ((~main_pll_video_locked)),

	// Outputs.
	.Q   (vga_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-04-18 17:05:57.
//------------------------------------------------------------------------------
