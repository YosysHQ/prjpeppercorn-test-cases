// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : olimex_gatemate_a1_evb.v
// Device     : CCGM1A1
// LiteX sha1 : 51e4f2e65
// Date       : 2025-09-03 17:36:02
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module olimex_gatemate_a1_evb (
    (* keep = "true" *)
    input  wire          clk0,
    input  wire          serial_rx,
    output reg           serial_tx,
    input  wire          user_btn_n0,
    output wire          user_led_n0
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GateMatePLL)
│    │    └─── [CC_PLL]
│    └─── [CC_USR_RSTN]
└─── bus (SoCBusHandler)
│    └─── axilite2wishbone_0* (AXILite2Wishbone)
│    │    └─── fsm (FSM)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexiiRiscv)
│    └─── soc_bus (SoCBusHandler)
│    │    └─── axilite2wishbone_0* (AXILite2Wishbone)
│    │    │    └─── fsm (FSM)
│    │    └─── _interconnect (InterconnectShared)
│    │    │    └─── arbiter (Arbiter)
│    │    │    │    └─── rr (RoundRobin)
│    │    │    └─── decoder (Decoder)
│    │    │    └─── timeout (Timeout)
│    │    │    │    └─── waittimer_0* (WaitTimer)
│    └─── [VexiiRiscvLitex_1ea420c1907d38b6bb5aeb9a6ed7fa07]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [CC_DFF]
└─── [CC_DFF]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          adapted_interface_ack;
reg    [29:0] adapted_interface_adr = 30'd0;
reg     [1:0] adapted_interface_bte = 2'd0;
reg     [2:0] adapted_interface_cti = 3'd0;
reg           adapted_interface_cyc = 1'd0;
wire   [31:0] adapted_interface_dat_r;
reg    [31:0] adapted_interface_dat_w = 32'd0;
wire          adapted_interface_err;
reg     [3:0] adapted_interface_sel = 4'd0;
reg           adapted_interface_stb = 1'd0;
reg           adapted_interface_we = 1'd0;
wire   [14:0] basesoc_adr;
reg           basesoc_adr_burst = 1'd0;
wire   [31:0] basesoc_dat_r;
wire          basesoc_gatematepll0;
wire          basesoc_gatematepll1;
wire          basesoc_gatematepll2;
reg           basesoc_gatematepll3 = 1'd0;
wire          basesoc_gatematepll4;
wire          basesoc_gatematepll5;
wire          basesoc_gatematepll_locked_s1;
reg           basesoc_interface0_ack = 1'd0;
wire   [29:0] basesoc_interface0_adr;
wire    [1:0] basesoc_interface0_bte;
wire    [2:0] basesoc_interface0_cti;
wire          basesoc_interface0_cyc;
reg    [31:0] basesoc_interface0_dat_r = 32'd0;
wire   [31:0] basesoc_interface0_dat_w;
reg           basesoc_interface0_err = 1'd0;
wire    [3:0] basesoc_interface0_sel;
wire          basesoc_interface0_stb;
wire          basesoc_interface0_we;
reg    [13:0] basesoc_interface1_adr = 14'd0;
wire   [31:0] basesoc_interface1_dat_r;
reg    [31:0] basesoc_interface1_dat_w = 32'd0;
reg           basesoc_interface1_re = 1'd0;
reg           basesoc_interface1_we = 1'd0;
reg           basesoc_next_state = 1'd0;
reg           basesoc_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_ram_bus_adr;
wire    [1:0] basesoc_ram_bus_bte;
wire    [2:0] basesoc_ram_bus_cti;
wire          basesoc_ram_bus_cyc;
wire   [31:0] basesoc_ram_bus_dat_r;
wire   [31:0] basesoc_ram_bus_dat_w;
reg           basesoc_ram_bus_err = 1'd0;
wire    [3:0] basesoc_ram_bus_sel;
wire          basesoc_ram_bus_stb;
wire          basesoc_ram_bus_we;
reg           basesoc_rs232phyrx_next_state = 1'd0;
reg           basesoc_rs232phyrx_state = 1'd0;
reg           basesoc_rs232phytx_next_state = 1'd0;
reg           basesoc_rs232phytx_state = 1'd0;
reg           basesoc_state = 1'd0;
wire          bus_error;
reg    [31:0] bus_errors = 32'd0;
reg           bus_errors_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
reg           chaser = 1'd0;
wire          clkin;
wire          clkout;
reg    [23:0] count = 24'd12000000;
wire          cpu_rst;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire          csr_bankarray_csrbank1_out0_r;
reg           csr_bankarray_csrbank1_out0_re = 1'd0;
wire          csr_bankarray_csrbank1_out0_w;
reg           csr_bankarray_csrbank1_out0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire          csr_bankarray_csrbank2_en0_r;
reg           csr_bankarray_csrbank2_en0_re = 1'd0;
wire          csr_bankarray_csrbank2_en0_w;
reg           csr_bankarray_csrbank2_en0_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_enable0_r;
reg           csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_enable0_w;
reg           csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_pending_r;
reg           csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_pending_w;
reg           csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_status_r;
reg           csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_status_w;
reg           csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_load0_r;
reg           csr_bankarray_csrbank2_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_load0_w;
reg           csr_bankarray_csrbank2_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_reload0_r;
reg           csr_bankarray_csrbank2_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_reload0_w;
reg           csr_bankarray_csrbank2_reload0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire          csr_bankarray_csrbank2_update_value0_r;
reg           csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank2_update_value0_w;
reg           csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_value_r;
reg           csr_bankarray_csrbank2_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_value_w;
reg           csr_bankarray_csrbank2_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_r;
reg           csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_w;
reg           csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_r;
reg           csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_w;
reg           csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_r;
reg           csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_w;
reg           csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_r;
reg           csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_w;
reg           csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_r;
reg           csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_w;
reg           csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank3_txempty_r;
reg           csr_bankarray_csrbank3_txempty_re = 1'd0;
wire          csr_bankarray_csrbank3_txempty_w;
reg           csr_bankarray_csrbank3_txempty_we = 1'd0;
wire          csr_bankarray_csrbank3_txfull_r;
reg           csr_bankarray_csrbank3_txfull_re = 1'd0;
wire          csr_bankarray_csrbank3_txfull_w;
reg           csr_bankarray_csrbank3_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_re;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_re;
wire          csr_bankarray_interface3_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
reg    [31:0] data = 32'd0;
reg    [31:0] data_next_value1 = 32'd0;
reg           data_next_value_ce1 = 1'd0;
wire          done;
reg           last_ar_aw_n = 1'd0;
reg           last_ar_aw_n_next_value0 = 1'd0;
reg           last_ar_aw_n_next_value_ce0 = 1'd0;
reg           leds = 1'd0;
wire          locked;
reg           mode = 1'd0;
reg           multiregimpl0 = 1'd0;
reg           multiregimpl1 = 1'd0;
wire   [31:0] r_addr;
wire   [10:0] ram_adr;
reg           ram_adr_burst = 1'd0;
reg           ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] ram_bus_ram_bus_adr;
wire    [1:0] ram_bus_ram_bus_bte;
wire    [2:0] ram_bus_ram_bus_cti;
wire          ram_bus_ram_bus_cyc;
wire   [31:0] ram_bus_ram_bus_dat_r;
wire   [31:0] ram_bus_ram_bus_dat_w;
reg           ram_bus_ram_bus_err = 1'd0;
wire    [3:0] ram_bus_ram_bus_sel;
wire          ram_bus_ram_bus_stb;
wire          ram_bus_ram_bus_we;
wire   [31:0] ram_dat_r;
wire   [31:0] ram_dat_w;
reg     [3:0] ram_we = 4'd0;
reg           re = 1'd0;
wire          reset;
reg           reset_re = 1'd0;
reg     [1:0] reset_storage = 2'd0;
wire          rst1;
wire          rst_n;
reg     [3:0] rx_count = 4'd0;
reg     [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg           rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] rx_data = 8'd0;
reg     [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg           rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           rx_enable = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
wire          rx_source_ready;
reg           rx_source_valid = 1'd0;
reg           rx_tick = 1'd0;
reg           scratch_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg    [29:0] self0 = 30'd0;
reg    [31:0] self1 = 32'd0;
reg     [3:0] self2 = 4'd0;
reg           self3 = 1'd0;
reg           self4 = 1'd0;
reg           self5 = 1'd0;
reg     [2:0] self6 = 3'd0;
reg     [1:0] self7 = 2'd0;
reg           serial_tx_rs232phytx_next_value1 = 1'd0;
reg           serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           soc_rst = 1'd0;
reg    [19:0] socbushandler_count = 20'd1000000;
wire          socbushandler_done;
reg           socbushandler_error = 1'd0;
wire          socbushandler_grant;
reg     [2:0] socbushandler_next_state = 3'd0;
wire          socbushandler_request;
reg           socbushandler_shared_ack = 1'd0;
wire   [29:0] socbushandler_shared_adr;
wire    [1:0] socbushandler_shared_bte;
wire    [2:0] socbushandler_shared_cti;
wire          socbushandler_shared_cyc;
reg    [31:0] socbushandler_shared_dat_r = 32'd0;
wire   [31:0] socbushandler_shared_dat_w;
wire          socbushandler_shared_err;
wire    [3:0] socbushandler_shared_sel;
wire          socbushandler_shared_stb;
wire          socbushandler_shared_we;
reg     [2:0] socbushandler_slave_sel = 3'd0;
reg     [2:0] socbushandler_slave_sel_r = 3'd0;
reg     [2:0] socbushandler_state = 3'd0;
wire          socbushandler_wait;
reg           storage = 1'd0;
(* keep = "true" *)
wire          sys_clk;
wire          sys_rst;
reg           timer_en_re = 1'd0;
reg           timer_en_storage = 1'd0;
reg           timer_enable_re = 1'd0;
reg           timer_enable_storage = 1'd0;
wire          timer_irq;
reg           timer_load_re = 1'd0;
reg    [31:0] timer_load_storage = 32'd0;
reg           timer_pending_r = 1'd0;
reg           timer_pending_re = 1'd0;
wire          timer_pending_status;
wire          timer_pending_we;
reg           timer_reload_re = 1'd0;
reg    [31:0] timer_reload_storage = 32'd0;
reg           timer_status_re = 1'd0;
wire          timer_status_status;
wire          timer_status_we;
reg           timer_update_value_re = 1'd0;
reg           timer_update_value_storage = 1'd0;
reg    [31:0] timer_value = 32'd0;
reg           timer_value_re = 1'd0;
reg    [31:0] timer_value_status = 32'd0;
wire          timer_value_we;
wire          timer_zero0;
wire          timer_zero1;
wire          timer_zero2;
reg           timer_zero_clear = 1'd0;
reg           timer_zero_pending = 1'd0;
wire          timer_zero_status;
wire          timer_zero_trigger;
reg           timer_zero_trigger_d = 1'd0;
reg     [3:0] tx_count = 4'd0;
reg     [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg           tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] tx_data = 8'd0;
reg     [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg           tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           tx_enable = 1'd0;
reg    [31:0] tx_phase = 32'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_valid;
reg           tx_tick = 1'd0;
reg           uart_enable_re = 1'd0;
reg     [1:0] uart_enable_storage = 2'd0;
wire          uart_irq;
reg     [1:0] uart_pending_r = 2'd0;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
wire          uart_rx0;
wire          uart_rx1;
wire          uart_rx2;
reg           uart_rx_clear = 1'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
wire          uart_rx_fifo_do_read;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
wire    [4:0] uart_rx_fifo_level1;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
reg           uart_rx_fifo_replace = 1'd0;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_valid;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_wrport_we;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_status;
wire          uart_rx_trigger;
reg           uart_rx_trigger_d = 1'd0;
reg           uart_rxempty_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_w;
reg           uart_rxtx_we = 1'd0;
reg           uart_status_re = 1'd0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
wire          uart_tx0;
wire          uart_tx1;
wire          uart_tx2;
reg           uart_tx_clear = 1'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
wire          uart_tx_fifo_do_read;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
wire    [4:0] uart_tx_fifo_level1;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_sink_ready;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_valid;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_wrport_we;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_status;
wire          uart_tx_trigger;
reg           uart_tx_trigger_d = 1'd0;
reg           uart_txempty_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txfull_re = 1'd0;
wire          uart_txfull_status;
wire          uart_txfull_we;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_valid;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_uart_source_ready;
wire          uart_uart_source_valid;
wire          vexiiriscv0;
wire          vexiiriscv1;
wire   [31:0] vexiiriscv_ar_payload_addr;
reg           vexiiriscv_ar_ready = 1'd0;
wire          vexiiriscv_ar_valid;
wire   [31:0] vexiiriscv_aw_payload_addr;
reg           vexiiriscv_aw_ready = 1'd0;
wire          vexiiriscv_aw_valid;
reg     [1:0] vexiiriscv_b_payload_resp = 2'd0;
wire          vexiiriscv_b_ready;
reg           vexiiriscv_b_valid = 1'd0;
reg    [31:0] vexiiriscv_interrupt = 32'd0;
reg    [31:0] vexiiriscv_r_payload_data = 32'd0;
reg     [1:0] vexiiriscv_r_payload_resp = 2'd0;
wire          vexiiriscv_r_ready;
reg           vexiiriscv_r_valid = 1'd0;
wire          vexiiriscv_reset;
wire    [7:0] vexiiriscv_tracer_payload;
wire   [31:0] vexiiriscv_w_payload_data;
wire    [3:0] vexiiriscv_w_payload_strb;
reg           vexiiriscv_w_ready = 1'd0;
wire          vexiiriscv_w_valid;
wire   [31:0] w_addr;
wire          wait_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign vexiiriscv_reset = (soc_rst | cpu_rst);
assign bus_error = socbushandler_error;
always @(*) begin
    vexiiriscv_interrupt <= 32'd0;
    vexiiriscv_interrupt[2] <= timer_irq;
    vexiiriscv_interrupt[1] <= uart_irq;
end
assign reset = ((~rst_n) | (~user_btn_n0));
assign clkin = clk0;
assign sys_clk = clkout;
assign locked = (basesoc_gatematepll_locked_s1 & (~reset));
assign r_addr = (vexiiriscv_ar_payload_addr - 1'd0);
assign w_addr = (vexiiriscv_aw_payload_addr - 1'd0);
always @(*) begin
    adapted_interface_adr <= 30'd0;
    adapted_interface_cyc <= 1'd0;
    adapted_interface_dat_w <= 32'd0;
    adapted_interface_sel <= 4'd0;
    adapted_interface_stb <= 1'd0;
    adapted_interface_we <= 1'd0;
    data_next_value1 <= 32'd0;
    data_next_value_ce1 <= 1'd0;
    last_ar_aw_n_next_value0 <= 1'd0;
    last_ar_aw_n_next_value_ce0 <= 1'd0;
    socbushandler_next_state <= 3'd0;
    vexiiriscv_ar_ready <= 1'd0;
    vexiiriscv_aw_ready <= 1'd0;
    vexiiriscv_b_payload_resp <= 2'd0;
    vexiiriscv_b_valid <= 1'd0;
    vexiiriscv_r_payload_data <= 32'd0;
    vexiiriscv_r_payload_resp <= 2'd0;
    vexiiriscv_r_valid <= 1'd0;
    vexiiriscv_w_ready <= 1'd0;
    socbushandler_next_state <= socbushandler_state;
    case (socbushandler_state)
        1'd1: begin
            adapted_interface_stb <= 1'd1;
            adapted_interface_cyc <= 1'd1;
            adapted_interface_adr <= r_addr[31:2];
            adapted_interface_sel <= 4'd15;
            if (adapted_interface_ack) begin
                vexiiriscv_ar_ready <= 1'd1;
                data_next_value1 <= adapted_interface_dat_r;
                data_next_value_ce1 <= 1'd1;
                socbushandler_next_state <= 2'd2;
            end
        end
        2'd2: begin
            vexiiriscv_r_valid <= 1'd1;
            vexiiriscv_r_payload_resp <= 1'd0;
            vexiiriscv_r_payload_data <= data;
            if (vexiiriscv_r_ready) begin
                socbushandler_next_state <= 1'd0;
            end
        end
        2'd3: begin
            adapted_interface_stb <= vexiiriscv_w_valid;
            adapted_interface_cyc <= vexiiriscv_w_valid;
            adapted_interface_we <= 1'd1;
            adapted_interface_adr <= w_addr[31:2];
            adapted_interface_sel <= vexiiriscv_w_payload_strb;
            adapted_interface_dat_w <= vexiiriscv_w_payload_data;
            if (adapted_interface_ack) begin
                vexiiriscv_aw_ready <= 1'd1;
                vexiiriscv_w_ready <= 1'd1;
                socbushandler_next_state <= 3'd4;
            end
        end
        3'd4: begin
            vexiiriscv_b_valid <= 1'd1;
            vexiiriscv_b_payload_resp <= 1'd0;
            if (vexiiriscv_b_ready) begin
                socbushandler_next_state <= 1'd0;
            end
        end
        default: begin
            if ((vexiiriscv_ar_valid & vexiiriscv_aw_valid)) begin
                if (last_ar_aw_n) begin
                    last_ar_aw_n_next_value0 <= 1'd0;
                    last_ar_aw_n_next_value_ce0 <= 1'd1;
                    socbushandler_next_state <= 2'd3;
                end else begin
                    last_ar_aw_n_next_value0 <= 1'd1;
                    last_ar_aw_n_next_value_ce0 <= 1'd1;
                    socbushandler_next_state <= 1'd1;
                end
            end else begin
                if (vexiiriscv_ar_valid) begin
                    last_ar_aw_n_next_value0 <= 1'd1;
                    last_ar_aw_n_next_value_ce0 <= 1'd1;
                    socbushandler_next_state <= 1'd1;
                end else begin
                    if (vexiiriscv_aw_valid) begin
                        last_ar_aw_n_next_value0 <= 1'd0;
                        last_ar_aw_n_next_value_ce0 <= 1'd1;
                        socbushandler_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign socbushandler_shared_adr = self0;
assign socbushandler_shared_dat_w = self1;
assign socbushandler_shared_sel = self2;
assign socbushandler_shared_cyc = self3;
assign socbushandler_shared_stb = self4;
assign socbushandler_shared_we = self5;
assign socbushandler_shared_cti = self6;
assign socbushandler_shared_bte = self7;
assign adapted_interface_dat_r = socbushandler_shared_dat_r;
assign adapted_interface_ack = (socbushandler_shared_ack & (socbushandler_grant == 1'd0));
assign adapted_interface_err = (socbushandler_shared_err & (socbushandler_grant == 1'd0));
assign socbushandler_request = {adapted_interface_cyc};
assign socbushandler_grant = 1'd0;
always @(*) begin
    socbushandler_slave_sel <= 3'd0;
    socbushandler_slave_sel[0] <= (socbushandler_shared_adr[29:15] == 1'd0);
    socbushandler_slave_sel[1] <= (socbushandler_shared_adr[29:11] == 16'd32768);
    socbushandler_slave_sel[2] <= (socbushandler_shared_adr[29:14] == 16'd61440);
end
assign basesoc_ram_bus_adr = socbushandler_shared_adr;
assign basesoc_ram_bus_dat_w = socbushandler_shared_dat_w;
assign basesoc_ram_bus_sel = socbushandler_shared_sel;
assign basesoc_ram_bus_stb = socbushandler_shared_stb;
assign basesoc_ram_bus_we = socbushandler_shared_we;
assign basesoc_ram_bus_cti = socbushandler_shared_cti;
assign basesoc_ram_bus_bte = socbushandler_shared_bte;
assign ram_bus_ram_bus_adr = socbushandler_shared_adr;
assign ram_bus_ram_bus_dat_w = socbushandler_shared_dat_w;
assign ram_bus_ram_bus_sel = socbushandler_shared_sel;
assign ram_bus_ram_bus_stb = socbushandler_shared_stb;
assign ram_bus_ram_bus_we = socbushandler_shared_we;
assign ram_bus_ram_bus_cti = socbushandler_shared_cti;
assign ram_bus_ram_bus_bte = socbushandler_shared_bte;
assign basesoc_interface0_adr = socbushandler_shared_adr;
assign basesoc_interface0_dat_w = socbushandler_shared_dat_w;
assign basesoc_interface0_sel = socbushandler_shared_sel;
assign basesoc_interface0_stb = socbushandler_shared_stb;
assign basesoc_interface0_we = socbushandler_shared_we;
assign basesoc_interface0_cti = socbushandler_shared_cti;
assign basesoc_interface0_bte = socbushandler_shared_bte;
assign basesoc_ram_bus_cyc = (socbushandler_shared_cyc & socbushandler_slave_sel[0]);
assign ram_bus_ram_bus_cyc = (socbushandler_shared_cyc & socbushandler_slave_sel[1]);
assign basesoc_interface0_cyc = (socbushandler_shared_cyc & socbushandler_slave_sel[2]);
assign socbushandler_shared_err = ((basesoc_ram_bus_err | ram_bus_ram_bus_err) | basesoc_interface0_err);
assign socbushandler_wait = ((socbushandler_shared_stb & socbushandler_shared_cyc) & (~socbushandler_shared_ack));
always @(*) begin
    socbushandler_error <= 1'd0;
    socbushandler_shared_ack <= 1'd0;
    socbushandler_shared_dat_r <= 32'd0;
    socbushandler_shared_ack <= ((basesoc_ram_bus_ack | ram_bus_ram_bus_ack) | basesoc_interface0_ack);
    socbushandler_shared_dat_r <= ((({32{socbushandler_slave_sel_r[0]}} & basesoc_ram_bus_dat_r) | ({32{socbushandler_slave_sel_r[1]}} & ram_bus_ram_bus_dat_r)) | ({32{socbushandler_slave_sel_r[2]}} & basesoc_interface0_dat_r));
    if (socbushandler_done) begin
        socbushandler_shared_dat_r <= 32'd4294967295;
        socbushandler_shared_ack <= 1'd1;
        socbushandler_error <= 1'd1;
    end
end
assign socbushandler_done = (socbushandler_count == 1'd0);
assign bus_errors_status = bus_errors;
assign basesoc_adr = basesoc_ram_bus_adr[14:0];
assign basesoc_ram_bus_dat_r = basesoc_dat_r;
always @(*) begin
    ram_we <= 4'd0;
    ram_we[0] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[0]);
    ram_we[1] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[1]);
    ram_we[2] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[2]);
    ram_we[3] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[3]);
end
assign ram_adr = ram_bus_ram_bus_adr[10:0];
assign ram_bus_ram_bus_dat_r = ram_dat_r;
assign ram_dat_w = ram_bus_ram_bus_dat_w;
always @(*) begin
    basesoc_rs232phytx_next_state <= 1'd0;
    serial_tx_rs232phytx_next_value1 <= 1'd0;
    serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    tx_count_rs232phytx_next_value0 <= 4'd0;
    tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    tx_data_rs232phytx_next_value2 <= 8'd0;
    tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    tx_enable <= 1'd0;
    tx_sink_ready <= 1'd0;
    basesoc_rs232phytx_next_state <= basesoc_rs232phytx_state;
    case (basesoc_rs232phytx_state)
        1'd1: begin
            tx_enable <= 1'd1;
            if (tx_tick) begin
                serial_tx_rs232phytx_next_value1 <= tx_data[0];
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
                tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready <= 1'd1;
                    basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            tx_count_rs232phytx_next_value0 <= 1'd0;
            tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            serial_tx_rs232phytx_next_value1 <= 1'd1;
            serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (tx_sink_valid) begin
                serial_tx_rs232phytx_next_value1 <= 1'd0;
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_rs232phyrx_next_state <= 1'd0;
    rx_count_rs232phyrx_next_value0 <= 4'd0;
    rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    rx_data_rs232phyrx_next_value1 <= 8'd0;
    rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    rx_enable <= 1'd0;
    rx_source_payload_data <= 8'd0;
    rx_source_valid <= 1'd0;
    basesoc_rs232phyrx_next_state <= basesoc_rs232phyrx_state;
    case (basesoc_rs232phyrx_state)
        1'd1: begin
            rx_enable <= 1'd1;
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
                rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
                rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((rx_count == 4'd9)) begin
                    rx_source_valid <= (rx_rx == 1'd1);
                    rx_source_payload_data <= rx_data;
                    basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value0 <= 1'd0;
            rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
    timer_zero_clear <= 1'd0;
    if ((timer_pending_re & timer_pending_r)) begin
        timer_zero_clear <= 1'd1;
    end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign wait_1 = (~done);
always @(*) begin
    leds <= 1'd0;
    if ((mode == 1'd1)) begin
        leds <= storage;
    end else begin
        leds <= chaser;
    end
end
assign {user_led_n0} = (leds ^ 1'd0);
assign done = (count == 1'd0);
always @(*) begin
    basesoc_interface0_ack <= 1'd0;
    basesoc_interface0_dat_r <= 32'd0;
    basesoc_interface1_adr <= 14'd0;
    basesoc_interface1_dat_w <= 32'd0;
    basesoc_interface1_re <= 1'd0;
    basesoc_interface1_we <= 1'd0;
    basesoc_next_state <= 1'd0;
    basesoc_next_state <= basesoc_state;
    case (basesoc_state)
        1'd1: begin
            basesoc_interface0_ack <= 1'd1;
            basesoc_interface0_dat_r <= basesoc_interface1_dat_r;
            basesoc_next_state <= 1'd0;
        end
        default: begin
            basesoc_interface1_dat_w <= basesoc_interface0_dat_w;
            if ((basesoc_interface0_cyc & basesoc_interface0_stb)) begin
                basesoc_interface1_adr <= basesoc_interface0_adr;
                basesoc_interface1_re <= ((~basesoc_interface0_we) & (basesoc_interface0_sel != 1'd0));
                basesoc_interface1_we <= (basesoc_interface0_we & (basesoc_interface0_sel != 1'd0));
                basesoc_next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = reset_storage;
assign csr_bankarray_csrbank0_scratch0_w = scratch_storage;
assign csr_bankarray_csrbank0_bus_errors_w = bus_errors_status;
assign bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank1_out0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_out0_re <= 1'd0;
    csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_out0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_out0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_out0_w = storage;
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_load0_r = csr_bankarray_interface2_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank2_load0_re <= 1'd0;
    csr_bankarray_csrbank2_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_load0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_load0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_reload0_r = csr_bankarray_interface2_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank2_reload0_re <= 1'd0;
    csr_bankarray_csrbank2_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank2_reload0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_reload0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_en0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_en0_re <= 1'd0;
    csr_bankarray_csrbank2_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank2_en0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_en0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_update_value0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_update_value0_re <= 1'd0;
    csr_bankarray_csrbank2_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank2_update_value0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_update_value0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_value_r = csr_bankarray_interface2_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank2_value_re <= 1'd0;
    csr_bankarray_csrbank2_value_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank2_value_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_value_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_status_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank2_ev_status_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_status_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_pending_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank2_ev_pending_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_pending_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_enable0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank2_ev_enable0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_enable0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_load0_w = timer_load_storage;
assign csr_bankarray_csrbank2_reload0_w = timer_reload_storage;
assign csr_bankarray_csrbank2_en0_w = timer_en_storage;
assign csr_bankarray_csrbank2_update_value0_w = timer_update_value_storage;
assign csr_bankarray_csrbank2_value_w = timer_value_status;
assign timer_value_we = csr_bankarray_csrbank2_value_we;
assign timer_status_status = timer_zero0;
assign csr_bankarray_csrbank2_ev_status_w = timer_status_status;
assign timer_status_we = csr_bankarray_csrbank2_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csr_bankarray_csrbank2_ev_pending_w = timer_pending_status;
assign timer_pending_we = csr_bankarray_csrbank2_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csr_bankarray_csrbank2_ev_enable0_w = timer_enable_storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 2'd2);
assign uart_rxtx_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_re <= 1'd0;
    uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= csr_bankarray_interface3_bank_bus_we;
        uart_rxtx_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_txfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txfull_re <= 1'd0;
    csr_bankarray_csrbank3_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_txfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txfull_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_rxempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxempty_re <= 1'd0;
    csr_bankarray_csrbank3_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_rxempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxempty_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_status_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_ev_status_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_status_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_pending_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_ev_pending_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_pending_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_enable0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_enable0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_txempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txempty_re <= 1'd0;
    csr_bankarray_csrbank3_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_txempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txempty_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_rxfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxfull_re <= 1'd0;
    csr_bankarray_csrbank3_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_rxfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxfull_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_txfull_w = uart_txfull_status;
assign uart_txfull_we = csr_bankarray_csrbank3_txfull_we;
assign csr_bankarray_csrbank3_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csr_bankarray_csrbank3_ev_status_w = uart_status_status;
assign uart_status_we = csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csr_bankarray_csrbank3_ev_pending_w = uart_pending_status;
assign uart_pending_we = csr_bankarray_csrbank3_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csr_bankarray_csrbank3_ev_enable0_w = uart_enable_storage;
assign csr_bankarray_csrbank3_txempty_w = uart_txempty_status;
assign uart_txempty_we = csr_bankarray_csrbank3_txempty_we;
assign csr_bankarray_csrbank3_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csr_bankarray_csrbank3_rxfull_we;
assign csr_interconnect_adr = basesoc_interface1_adr;
assign csr_interconnect_re = basesoc_interface1_re;
assign csr_interconnect_we = basesoc_interface1_we;
assign csr_interconnect_dat_w = basesoc_interface1_dat_w;
assign basesoc_interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface2_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface3_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    self0 <= 30'd0;
    case (socbushandler_grant)
        default: begin
            self0 <= adapted_interface_adr;
        end
    endcase
end
always @(*) begin
    self1 <= 32'd0;
    case (socbushandler_grant)
        default: begin
            self1 <= adapted_interface_dat_w;
        end
    endcase
end
always @(*) begin
    self2 <= 4'd0;
    case (socbushandler_grant)
        default: begin
            self2 <= adapted_interface_sel;
        end
    endcase
end
always @(*) begin
    self3 <= 1'd0;
    case (socbushandler_grant)
        default: begin
            self3 <= adapted_interface_cyc;
        end
    endcase
end
always @(*) begin
    self4 <= 1'd0;
    case (socbushandler_grant)
        default: begin
            self4 <= adapted_interface_stb;
        end
    endcase
end
always @(*) begin
    self5 <= 1'd0;
    case (socbushandler_grant)
        default: begin
            self5 <= adapted_interface_we;
        end
    endcase
end
always @(*) begin
    self6 <= 3'd0;
    case (socbushandler_grant)
        default: begin
            self6 <= adapted_interface_cti;
        end
    endcase
end
always @(*) begin
    self7 <= 2'd0;
    case (socbushandler_grant)
        default: begin
            self7 <= adapted_interface_bte;
        end
    endcase
end
assign rx_rx = multiregimpl1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    socbushandler_state <= socbushandler_next_state;
    if (last_ar_aw_n_next_value_ce0) begin
        last_ar_aw_n <= last_ar_aw_n_next_value0;
    end
    if (data_next_value_ce1) begin
        data <= data_next_value1;
    end
    socbushandler_slave_sel_r <= socbushandler_slave_sel;
    if (socbushandler_wait) begin
        if ((~socbushandler_done)) begin
            socbushandler_count <= (socbushandler_count - 1'd1);
        end
    end else begin
        socbushandler_count <= 20'd1000000;
    end
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    basesoc_ram_bus_ack <= 1'd0;
    if (((basesoc_ram_bus_cyc & basesoc_ram_bus_stb) & ((~basesoc_ram_bus_ack) | basesoc_adr_burst))) begin
        basesoc_ram_bus_ack <= 1'd1;
    end
    ram_bus_ram_bus_ack <= 1'd0;
    if (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ((~ram_bus_ram_bus_ack) | ram_adr_burst))) begin
        ram_bus_ram_bus_ack <= 1'd1;
    end
    {tx_tick, tx_phase} <= 25'd20615843;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 25'd20615843);
    end
    basesoc_rs232phytx_state <= basesoc_rs232phytx_next_state;
    if (tx_count_rs232phytx_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx_next_value0;
    end
    if (serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= serial_tx_rs232phytx_next_value1;
    end
    if (tx_data_rs232phytx_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 25'd20615843);
    end
    basesoc_rs232phyrx_state <= basesoc_rs232phyrx_next_state;
    if (rx_count_rs232phyrx_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx_next_value0;
    end
    if (rx_data_rs232phyrx_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx_next_value1;
    end
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (timer_en_storage) begin
        if ((timer_value == 1'd0)) begin
            timer_value <= timer_reload_storage;
        end else begin
            timer_value <= (timer_value - 1'd1);
        end
    end else begin
        timer_value <= timer_load_storage;
    end
    if (timer_update_value_re) begin
        timer_value_status <= timer_value;
    end
    if (timer_zero_clear) begin
        timer_zero_pending <= 1'd0;
    end
    timer_zero_trigger_d <= timer_zero_trigger;
    if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
        timer_zero_pending <= 1'd1;
    end
    if (done) begin
        chaser <= {chaser, (~chaser)};
    end
    if (re) begin
        mode <= 1'd1;
    end
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 24'd12000000;
    end
    basesoc_state <= basesoc_next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        reset_storage <= csr_bankarray_csrbank0_reset0_r;
    end
    reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        scratch_storage <= csr_bankarray_csrbank0_scratch0_r;
    end
    scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_out0_re) begin
        storage <= csr_bankarray_csrbank1_out0_r;
    end
    re <= csr_bankarray_csrbank1_out0_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_value_w;
            end
            3'd5: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_load0_re) begin
        timer_load_storage <= csr_bankarray_csrbank2_load0_r;
    end
    timer_load_re <= csr_bankarray_csrbank2_load0_re;
    if (csr_bankarray_csrbank2_reload0_re) begin
        timer_reload_storage <= csr_bankarray_csrbank2_reload0_r;
    end
    timer_reload_re <= csr_bankarray_csrbank2_reload0_re;
    if (csr_bankarray_csrbank2_en0_re) begin
        timer_en_storage <= csr_bankarray_csrbank2_en0_r;
    end
    timer_en_re <= csr_bankarray_csrbank2_en0_re;
    if (csr_bankarray_csrbank2_update_value0_re) begin
        timer_update_value_storage <= csr_bankarray_csrbank2_update_value0_r;
    end
    timer_update_value_re <= csr_bankarray_csrbank2_update_value0_re;
    timer_value_re <= csr_bankarray_csrbank2_value_re;
    timer_status_re <= csr_bankarray_csrbank2_ev_status_re;
    if (csr_bankarray_csrbank2_ev_pending_re) begin
        timer_pending_r <= csr_bankarray_csrbank2_ev_pending_r;
    end
    timer_pending_re <= csr_bankarray_csrbank2_ev_pending_re;
    if (csr_bankarray_csrbank2_ev_enable0_re) begin
        timer_enable_storage <= csr_bankarray_csrbank2_ev_enable0_r;
    end
    timer_enable_re <= csr_bankarray_csrbank2_ev_enable0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csr_bankarray_csrbank3_txfull_re;
    uart_rxempty_re <= csr_bankarray_csrbank3_rxempty_re;
    uart_status_re <= csr_bankarray_csrbank3_ev_status_re;
    if (csr_bankarray_csrbank3_ev_pending_re) begin
        uart_pending_r <= csr_bankarray_csrbank3_ev_pending_r;
    end
    uart_pending_re <= csr_bankarray_csrbank3_ev_pending_re;
    if (csr_bankarray_csrbank3_ev_enable0_re) begin
        uart_enable_storage <= csr_bankarray_csrbank3_ev_enable0_r;
    end
    uart_enable_re <= csr_bankarray_csrbank3_ev_enable0_re;
    uart_txempty_re <= csr_bankarray_csrbank3_txempty_re;
    uart_rxfull_re <= csr_bankarray_csrbank3_rxfull_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        data <= 32'd0;
        last_ar_aw_n <= 1'd0;
        basesoc_ram_bus_ack <= 1'd0;
        ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        timer_load_storage <= 32'd0;
        timer_load_re <= 1'd0;
        timer_reload_storage <= 32'd0;
        timer_reload_re <= 1'd0;
        timer_en_storage <= 1'd0;
        timer_en_re <= 1'd0;
        timer_update_value_storage <= 1'd0;
        timer_update_value_re <= 1'd0;
        timer_value_status <= 32'd0;
        timer_value_re <= 1'd0;
        timer_zero_pending <= 1'd0;
        timer_zero_trigger_d <= 1'd0;
        timer_status_re <= 1'd0;
        timer_pending_re <= 1'd0;
        timer_pending_r <= 1'd0;
        timer_enable_storage <= 1'd0;
        timer_enable_re <= 1'd0;
        timer_value <= 32'd0;
        storage <= 1'd0;
        re <= 1'd0;
        chaser <= 1'd0;
        mode <= 1'd0;
        count <= 24'd12000000;
        socbushandler_state <= 3'd0;
        socbushandler_slave_sel_r <= 3'd0;
        socbushandler_count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        basesoc_rs232phytx_state <= 1'd0;
        basesoc_rs232phyrx_state <= 1'd0;
        basesoc_state <= 1'd0;
    end
    multiregimpl0 <= serial_rx;
    multiregimpl1 <= multiregimpl0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance CC_USR_RSTN of CC_USR_RSTN Module.
//------------------------------------------------------------------------------
CC_USR_RSTN CC_USR_RSTN(
	// Outputs.
	.USR_RSTN (rst_n)
);

//------------------------------------------------------------------------------
// Memory rom: 6207-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6206];
initial begin
	$readmemh("olimex_gatemate_a1_evb_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_adr];
end
assign basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("olimex_gatemate_a1_evb_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (ram_we[0])
		sram[ram_adr][7:0] <= ram_dat_w[7:0];
	if (ram_we[1])
		sram[ram_adr][15:8] <= ram_dat_w[15:8];
	if (ram_we[2])
		sram[ram_adr][23:16] <= ram_dat_w[23:16];
	if (ram_we[3])
		sram[ram_adr][31:24] <= ram_dat_w[31:24];
	sram_adr0 <= ram_adr;
end
assign ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("olimex_gatemate_a1_evb_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage_1[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:15];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_2[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_2_dat1 <= storage_2[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_2_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Instance CC_PLL of CC_PLL Module.
//------------------------------------------------------------------------------
CC_PLL #(
	// Parameters.
	.CI_FILTER_CONST (2'd2),
	.CLK180_DOUB     (1'd0),
	.CLK270_DOUB     (1'd0),
	.CP_FILTER_CONST (3'd4),
	.LOCK_REQ        (1'd1),
	.LOW_JITTER      (1'd1),
	.OUT_CLK         ("24.0"),
	.PERF_MD         ("ECONOMY"),
	.REF_CLK         ("10.0")
) CC_PLL (
	// Inputs.
	.CLK_FEEDBACK        (1'd0),
	.CLK_REF             (clkin),
	.USR_CLK_REF         (basesoc_gatematepll3),
	.USR_LOCKED_STDY_RST (1'd0),

	// Outputs.
	.CLK0                (clkout),
	.CLK180              (basesoc_gatematepll1),
	.CLK270              (basesoc_gatematepll2),
	.CLK90               (basesoc_gatematepll0),
	.CLK_REF_OUT         (basesoc_gatematepll4),
	.USR_PLL_LOCKED      (basesoc_gatematepll_locked_s1),
	.USR_PLL_LOCKED_STDY (basesoc_gatematepll5)
);

//------------------------------------------------------------------------------
// Instance VexiiRiscvLitex_1ea420c1907d38b6bb5aeb9a6ed7fa07 of VexiiRiscvLitex_1ea420c1907d38b6bb5aeb9a6ed7fa07 Module.
//------------------------------------------------------------------------------
VexiiRiscvLitex_1ea420c1907d38b6bb5aeb9a6ed7fa07 VexiiRiscvLitex_1ea420c1907d38b6bb5aeb9a6ed7fa07(
	// Inputs.
	.litex_clk                          (sys_clk),
	.litex_reset                        ((sys_rst | vexiiriscv_reset)),
	.pBus_arready                       (vexiiriscv_ar_ready),
	.pBus_awready                       (vexiiriscv_aw_ready),
	.pBus_bresp                         (vexiiriscv_b_payload_resp),
	.pBus_bvalid                        (vexiiriscv_b_valid),
	.pBus_rdata                         (vexiiriscv_r_payload_data),
	.pBus_rresp                         (vexiiriscv_r_payload_resp),
	.pBus_rvalid                        (vexiiriscv_r_valid),
	.pBus_wready                        (vexiiriscv_w_ready),
	.peripheral_externalInterrupts_port (vexiiriscv_interrupt),

	// Outputs.
	.debug                              (vexiiriscv_tracer_payload),
	.pBus_araddr                        (vexiiriscv_ar_payload_addr),
	.pBus_arprot                        (vexiiriscv1),
	.pBus_arvalid                       (vexiiriscv_ar_valid),
	.pBus_awaddr                        (vexiiriscv_aw_payload_addr),
	.pBus_awprot                        (vexiiriscv0),
	.pBus_awvalid                       (vexiiriscv_aw_valid),
	.pBus_bready                        (vexiiriscv_b_ready),
	.pBus_rready                        (vexiiriscv_r_ready),
	.pBus_wdata                         (vexiiriscv_w_payload_data),
	.pBus_wstrb                         (vexiiriscv_w_payload_strb),
	.pBus_wvalid                        (vexiiriscv_w_valid)
);

//------------------------------------------------------------------------------
// Instance CC_DFF of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF (
	// Inputs.
	.CLK (sys_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~locked)),

	// Outputs.
	.Q   (rst1)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_1 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_1 (
	// Inputs.
	.CLK (sys_clk),
	.D   (rst1),
	.EN  (1'd1),
	.SR  ((~locked)),

	// Outputs.
	.Q   (sys_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-09-03 17:36:02.
//------------------------------------------------------------------------------
