// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : colognechip_gatemate_evb.v
// Device     : CCGM1A1
// LiteX sha1 : b2f18757f
// Date       : 2025-05-24 10:00:15
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module colognechip_gatemate_evb (
    input  wire          clk10,
    output wire          spiflash4x_clk,
    output wire          spiflash4x_cs_n,
    inout  wire    [3:0] spiflash4x_dq,
    input  wire          usb_uart_rx,
    output reg           usb_uart_tx,
    input  wire          user_btn_n0,
    output wire          user_led_n0,
    output wire          user_led_n1,
    output wire          user_led_n2,
    output wire          user_led_n3,
    output wire          user_led_n4,
    output wire          user_led_n5,
    output wire          user_led_n6,
    output wire          user_led_n7
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GateMatePLL)
│    │    └─── [CC_PLL]
│    └─── [CC_USR_RSTN]
└─── bus (SoCBusHandler)
│    └─── offset_0* (Offset)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (FemtoRV)
│    └─── fsm (FSM)
│    └─── [FemtoRV32]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── spiflash_phy (LiteSPIPHY)
│    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    └─── resyncreg_0* (ResyncReg)
│    │    └─── clkgen (LiteSPIClkGen)
│    │    └─── cs_control (LiteSPICSControl)
│    │    │    └─── timer (WaitTimer)
│    │    └─── fsm (FSM)
└─── spiflash_core (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── burst_timeout (WaitTimer)
│    │    └─── fsm (FSM)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_IOBUF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_IOBUF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire    [3:0] builder__i;
wire    [3:0] builder__o;
reg    [19:0] builder_count = 20'd1000000;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_r;
reg           builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_w;
reg           builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire    [7:0] builder_csr_bankarray_csrbank2_mmap_dummy_bits0_r;
reg           builder_csr_bankarray_csrbank2_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank2_mmap_dummy_bits0_w;
reg           builder_csr_bankarray_csrbank2_mmap_dummy_bits0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire    [7:0] builder_csr_bankarray_csrbank3_clk_divisor0_r;
reg           builder_csr_bankarray_csrbank3_clk_divisor0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_clk_divisor0_w;
reg           builder_csr_bankarray_csrbank3_clk_divisor0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire          builder_csr_bankarray_csrbank4_en0_r;
reg           builder_csr_bankarray_csrbank4_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_en0_w;
reg           builder_csr_bankarray_csrbank4_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_enable0_r;
reg           builder_csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_enable0_w;
reg           builder_csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_pending_r;
reg           builder_csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_pending_w;
reg           builder_csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_status_r;
reg           builder_csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_status_w;
reg           builder_csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_load0_r;
reg           builder_csr_bankarray_csrbank4_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_load0_w;
reg           builder_csr_bankarray_csrbank4_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_reload0_r;
reg           builder_csr_bankarray_csrbank4_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_reload0_w;
reg           builder_csr_bankarray_csrbank4_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire          builder_csr_bankarray_csrbank4_update_value0_r;
reg           builder_csr_bankarray_csrbank4_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_update_value0_w;
reg           builder_csr_bankarray_csrbank4_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_value_r;
reg           builder_csr_bankarray_csrbank4_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_value_w;
reg           builder_csr_bankarray_csrbank4_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_enable0_r;
reg           builder_csr_bankarray_csrbank5_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_enable0_w;
reg           builder_csr_bankarray_csrbank5_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_pending_r;
reg           builder_csr_bankarray_csrbank5_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_pending_w;
reg           builder_csr_bankarray_csrbank5_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_status_r;
reg           builder_csr_bankarray_csrbank5_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_status_w;
reg           builder_csr_bankarray_csrbank5_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxempty_r;
reg           builder_csr_bankarray_csrbank5_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxempty_w;
reg           builder_csr_bankarray_csrbank5_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxfull_r;
reg           builder_csr_bankarray_csrbank5_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxfull_w;
reg           builder_csr_bankarray_csrbank5_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_sel;
wire          builder_csr_bankarray_csrbank5_txempty_r;
reg           builder_csr_bankarray_csrbank5_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_txempty_w;
reg           builder_csr_bankarray_csrbank5_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_txfull_r;
reg           builder_csr_bankarray_csrbank5_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_txfull_w;
reg           builder_csr_bankarray_csrbank5_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
wire          builder_csr_bankarray_interface5_bank_bus_re;
wire          builder_csr_bankarray_interface5_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_femtorv_next_state = 1'd0;
reg           builder_femtorv_state = 1'd0;
wire          builder_gatematepll0;
wire          builder_gatematepll1;
wire          builder_gatematepll2;
reg           builder_gatematepll3 = 1'd0;
wire          builder_gatematepll4;
wire          builder_gatematepll5;
wire          builder_gatematepll_locked_s1;
wire          builder_grant;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
wire          builder_litespi_grant;
reg     [3:0] builder_litespi_next_state = 4'd0;
wire          builder_litespi_request;
wire          builder_litespi_rx_demux_sel;
wire          builder_litespi_rx_demux_sink_first;
wire          builder_litespi_rx_demux_sink_last;
wire   [31:0] builder_litespi_rx_demux_sink_payload_data;
reg           builder_litespi_rx_demux_sink_ready = 1'd0;
wire          builder_litespi_rx_demux_sink_valid;
reg           builder_litespi_rx_demux_source_first = 1'd0;
reg           builder_litespi_rx_demux_source_last = 1'd0;
reg    [31:0] builder_litespi_rx_demux_source_payload_data = 32'd0;
wire          builder_litespi_rx_demux_source_ready;
reg           builder_litespi_rx_demux_source_valid = 1'd0;
reg     [3:0] builder_litespi_state = 4'd0;
wire          builder_litespi_tx_mux_sel;
wire          builder_litespi_tx_mux_sink_first;
wire          builder_litespi_tx_mux_sink_last;
wire   [31:0] builder_litespi_tx_mux_sink_payload_data;
wire    [5:0] builder_litespi_tx_mux_sink_payload_len;
wire    [7:0] builder_litespi_tx_mux_sink_payload_mask;
wire    [3:0] builder_litespi_tx_mux_sink_payload_width;
reg           builder_litespi_tx_mux_sink_ready = 1'd0;
wire          builder_litespi_tx_mux_sink_valid;
reg           builder_litespi_tx_mux_source_first = 1'd0;
reg           builder_litespi_tx_mux_source_last = 1'd0;
reg    [31:0] builder_litespi_tx_mux_source_payload_data = 32'd0;
reg     [5:0] builder_litespi_tx_mux_source_payload_len = 6'd0;
reg     [7:0] builder_litespi_tx_mux_source_payload_mask = 8'd0;
reg     [3:0] builder_litespi_tx_mux_source_payload_width = 4'd0;
wire          builder_litespi_tx_mux_source_ready;
reg           builder_litespi_tx_mux_source_valid = 1'd0;
reg     [1:0] builder_litespiphy_next_state = 2'd0;
reg     [1:0] builder_litespiphy_state = 2'd0;
reg           builder_multiregimpl0 = 1'd0;
reg           builder_multiregimpl1 = 1'd0;
wire    [3:0] builder_oe_n;
wire          builder_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
wire          builder_rst1;
reg    [29:0] builder_self0 = 30'd0;
reg    [31:0] builder_self1 = 32'd0;
reg     [3:0] builder_self2 = 4'd0;
reg           builder_self3 = 1'd0;
reg           builder_self4 = 1'd0;
reg           builder_self5 = 1'd0;
reg     [2:0] builder_self6 = 3'd0;
reg     [1:0] builder_self7 = 2'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [3:0] builder_slave_sel = 4'd0;
reg     [3:0] builder_slave_sel_r = 4'd0;
wire          builder_wait;
reg           builder_wishbone2csr_next_state = 1'd0;
reg           builder_wishbone2csr_state = 1'd0;
wire          main_basesoc_adapted_interface_ack;
wire   [29:0] main_basesoc_adapted_interface_adr;
wire    [1:0] main_basesoc_adapted_interface_bte;
wire    [2:0] main_basesoc_adapted_interface_cti;
wire          main_basesoc_adapted_interface_cyc;
wire   [31:0] main_basesoc_adapted_interface_dat_r;
wire   [31:0] main_basesoc_adapted_interface_dat_w;
wire          main_basesoc_adapted_interface_err;
wire    [3:0] main_basesoc_adapted_interface_sel;
wire          main_basesoc_adapted_interface_stb;
wire          main_basesoc_adapted_interface_we;
wire   [14:0] main_basesoc_basesoc_adr;
reg           main_basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] main_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_basesoc_ram_bus_cti;
wire          main_basesoc_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_w;
reg           main_basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_basesoc_ram_bus_sel;
wire          main_basesoc_basesoc_ram_bus_stb;
wire          main_basesoc_basesoc_ram_bus_we;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
wire          main_basesoc_idbus_ack;
reg    [31:0] main_basesoc_idbus_adr = 32'd0;
reg    [31:0] main_basesoc_idbus_adr_femtorv_next_value0 = 32'd0;
reg           main_basesoc_idbus_adr_femtorv_next_value_ce0 = 1'd0;
reg     [1:0] main_basesoc_idbus_bte = 2'd0;
reg     [2:0] main_basesoc_idbus_cti = 3'd0;
reg           main_basesoc_idbus_cyc = 1'd0;
wire   [31:0] main_basesoc_idbus_dat_r;
reg    [31:0] main_basesoc_idbus_dat_w = 32'd0;
reg    [31:0] main_basesoc_idbus_dat_w_femtorv_next_value1 = 32'd0;
reg           main_basesoc_idbus_dat_w_femtorv_next_value_ce1 = 1'd0;
wire          main_basesoc_idbus_err;
reg     [3:0] main_basesoc_idbus_sel = 4'd0;
reg     [3:0] main_basesoc_idbus_sel_femtorv_next_value2 = 4'd0;
reg           main_basesoc_idbus_sel_femtorv_next_value_ce2 = 1'd0;
reg           main_basesoc_idbus_stb = 1'd0;
reg           main_basesoc_idbus_we = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value3 = 1'd0;
reg           main_basesoc_idbus_we_femtorv_next_value_ce3 = 1'd0;
reg           main_basesoc_latch = 1'd0;
wire   [31:0] main_basesoc_mbus_addr;
reg           main_basesoc_mbus_rbusy = 1'd0;
reg    [31:0] main_basesoc_mbus_rdata0 = 32'd0;
reg    [31:0] main_basesoc_mbus_rdata1 = 32'd0;
wire          main_basesoc_mbus_rstrb;
reg           main_basesoc_mbus_wbusy = 1'd0;
wire   [31:0] main_basesoc_mbus_wdata;
wire    [3:0] main_basesoc_mbus_wmask;
wire   [10:0] main_basesoc_ram_adr;
reg           main_basesoc_ram_adr_burst = 1'd0;
reg           main_basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_ram_bus_cti;
wire          main_basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_w;
reg           main_basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_ram_bus_sel;
wire          main_basesoc_ram_bus_ram_bus_stb;
wire          main_basesoc_ram_bus_ram_bus_we;
wire   [31:0] main_basesoc_ram_dat_r;
wire   [31:0] main_basesoc_ram_dat_w;
reg     [3:0] main_basesoc_ram_we = 4'd0;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_soc_rst = 1'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
wire          main_basesoc_timer_pending_status;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
wire          main_basesoc_timer_status_status;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
reg           main_basesoc_usb_uart_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 = 1'd0;
reg     [7:0] main_chaser = 8'd0;
wire          main_clkin;
wire          main_clkout;
reg    [20:0] main_count = 21'd1500000;
wire          main_done;
reg     [7:0] main_leds = 8'd0;
wire          main_locked;
reg           main_mode = 1'd0;
reg           main_re = 1'd0;
wire          main_reset;
wire          main_rst_n;
wire          main_socbushandler_adapted_interface_ack;
wire   [29:0] main_socbushandler_adapted_interface_adr;
wire    [1:0] main_socbushandler_adapted_interface_bte;
wire    [2:0] main_socbushandler_adapted_interface_cti;
wire          main_socbushandler_adapted_interface_cyc;
wire   [31:0] main_socbushandler_adapted_interface_dat_r;
wire   [31:0] main_socbushandler_adapted_interface_dat_w;
wire          main_socbushandler_adapted_interface_err;
wire    [3:0] main_socbushandler_adapted_interface_sel;
wire          main_socbushandler_adapted_interface_stb;
wire          main_socbushandler_adapted_interface_we;
reg           main_spiflash_core_cs = 1'd0;
wire          main_spiflash_core_internal_port_sink_first;
wire          main_spiflash_core_internal_port_sink_last;
wire   [31:0] main_spiflash_core_internal_port_sink_payload_data;
wire    [5:0] main_spiflash_core_internal_port_sink_payload_len;
wire    [7:0] main_spiflash_core_internal_port_sink_payload_mask;
wire    [3:0] main_spiflash_core_internal_port_sink_payload_width;
wire          main_spiflash_core_internal_port_sink_ready;
wire          main_spiflash_core_internal_port_sink_valid;
wire          main_spiflash_core_internal_port_source_first;
wire          main_spiflash_core_internal_port_source_last;
wire   [31:0] main_spiflash_core_internal_port_source_payload_data;
wire          main_spiflash_core_internal_port_source_ready;
wire          main_spiflash_core_internal_port_source_valid;
reg           main_spiflash_core_litespimmap0 = 1'd0;
reg           main_spiflash_core_litespimmap1 = 1'd0;
reg    [29:0] main_spiflash_core_litespimmap_burst_adr = 30'd0;
reg    [29:0] main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value = 30'd0;
reg           main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce = 1'd0;
reg           main_spiflash_core_litespimmap_burst_cs = 1'd0;
reg           main_spiflash_core_litespimmap_burst_cs_litespi_next_value = 1'd0;
reg           main_spiflash_core_litespimmap_burst_cs_litespi_next_value_ce = 1'd0;
reg           main_spiflash_core_litespimmap_bus_ack = 1'd0;
reg    [29:0] main_spiflash_core_litespimmap_bus_adr = 30'd0;
wire    [1:0] main_spiflash_core_litespimmap_bus_bte;
wire    [2:0] main_spiflash_core_litespimmap_bus_cti;
wire          main_spiflash_core_litespimmap_bus_cyc;
reg    [31:0] main_spiflash_core_litespimmap_bus_dat_r = 32'd0;
wire   [31:0] main_spiflash_core_litespimmap_bus_dat_w;
reg           main_spiflash_core_litespimmap_bus_err = 1'd0;
wire    [3:0] main_spiflash_core_litespimmap_bus_sel;
wire          main_spiflash_core_litespimmap_bus_stb;
wire          main_spiflash_core_litespimmap_bus_we;
reg     [1:0] main_spiflash_core_litespimmap_byte_count = 2'd0;
reg     [1:0] main_spiflash_core_litespimmap_byte_count_litespi_t_next_value = 2'd0;
reg           main_spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce = 1'd0;
reg     [8:0] main_spiflash_core_litespimmap_count = 9'd256;
reg           main_spiflash_core_litespimmap_cs = 1'd0;
reg    [31:0] main_spiflash_core_litespimmap_data_write = 32'd0;
reg    [31:0] main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 = 32'd0;
reg           main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 = 1'd0;
wire          main_spiflash_core_litespimmap_done;
reg    [31:0] main_spiflash_core_litespimmap_dummy = 32'd57005;
reg           main_spiflash_core_litespimmap_re = 1'd0;
reg           main_spiflash_core_litespimmap_request = 1'd0;
wire          main_spiflash_core_litespimmap_sink_first;
wire          main_spiflash_core_litespimmap_sink_last;
wire   [31:0] main_spiflash_core_litespimmap_sink_payload_data;
reg           main_spiflash_core_litespimmap_sink_ready = 1'd0;
wire          main_spiflash_core_litespimmap_sink_valid;
reg           main_spiflash_core_litespimmap_source_first = 1'd0;
reg           main_spiflash_core_litespimmap_source_last = 1'd0;
reg    [31:0] main_spiflash_core_litespimmap_source_payload_data = 32'd0;
reg     [5:0] main_spiflash_core_litespimmap_source_payload_len = 6'd0;
reg     [7:0] main_spiflash_core_litespimmap_source_payload_mask = 8'd0;
reg     [3:0] main_spiflash_core_litespimmap_source_payload_width = 4'd0;
wire          main_spiflash_core_litespimmap_source_ready;
reg           main_spiflash_core_litespimmap_source_valid = 1'd0;
wire    [7:0] main_spiflash_core_litespimmap_spi_dummy_bits;
reg     [7:0] main_spiflash_core_litespimmap_storage = 8'd0;
reg           main_spiflash_core_litespimmap_wait = 1'd0;
reg           main_spiflash_core_litespimmap_write = 1'd0;
wire          main_spiflash_core_litespimmap_write_enabled;
reg           main_spiflash_core_litespimmap_write_litespi_t_t_next_value = 1'd0;
reg           main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce = 1'd0;
reg     [3:0] main_spiflash_core_litespimmap_write_mask = 4'd0;
reg     [3:0] main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 = 4'd0;
reg           main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 = 1'd0;
wire          main_spiflash_core_sink_first;
wire          main_spiflash_core_sink_last;
wire   [31:0] main_spiflash_core_sink_payload_data;
wire          main_spiflash_core_sink_ready;
wire          main_spiflash_core_sink_valid;
wire          main_spiflash_core_source_first;
wire          main_spiflash_core_source_last;
wire   [31:0] main_spiflash_core_source_payload_data;
wire    [5:0] main_spiflash_core_source_payload_len;
wire    [7:0] main_spiflash_core_source_payload_mask;
wire    [3:0] main_spiflash_core_source_payload_width;
wire          main_spiflash_core_source_ready;
wire          main_spiflash_core_source_valid;
wire          main_spiflash_core_user_port_sink_first;
wire          main_spiflash_core_user_port_sink_last;
wire   [31:0] main_spiflash_core_user_port_sink_payload_data;
wire    [5:0] main_spiflash_core_user_port_sink_payload_len;
wire    [7:0] main_spiflash_core_user_port_sink_payload_mask;
wire    [3:0] main_spiflash_core_user_port_sink_payload_width;
wire          main_spiflash_core_user_port_sink_ready;
wire          main_spiflash_core_user_port_sink_valid;
wire          main_spiflash_core_user_port_source_first;
wire          main_spiflash_core_user_port_source_last;
wire   [31:0] main_spiflash_core_user_port_source_payload_data;
wire          main_spiflash_core_user_port_source_ready;
wire          main_spiflash_core_user_port_source_valid;
reg           main_spiflash_phy_clk = 1'd0;
reg     [7:0] main_spiflash_phy_cnt = 8'd0;
reg     [3:0] main_spiflash_phy_count = 4'd11;
wire          main_spiflash_phy_cs;
wire          main_spiflash_phy_cs_n;
wire    [7:0] main_spiflash_phy_div;
wire          main_spiflash_phy_done;
wire    [3:0] main_spiflash_phy_dq_i;
reg     [3:0] main_spiflash_phy_dq_o = 4'd0;
reg     [3:0] main_spiflash_phy_dq_oe = 4'd0;
reg     [3:0] main_spiflash_phy_dq_oe_litespiphy_next_value1 = 4'd0;
reg           main_spiflash_phy_dq_oe_litespiphy_next_value_ce1 = 1'd0;
reg           main_spiflash_phy_en = 1'd0;
reg           main_spiflash_phy_en_int = 1'd0;
wire          main_spiflash_phy_enable;
wire          main_spiflash_phy_negedge;
wire          main_spiflash_phy_posedge;
reg           main_spiflash_phy_posedge_reg = 1'd0;
reg           main_spiflash_phy_posedge_reg2 = 1'd0;
reg           main_spiflash_phy_re = 1'd0;
wire          main_spiflash_phy_sink_first;
wire          main_spiflash_phy_sink_last;
wire   [31:0] main_spiflash_phy_sink_payload_data;
wire    [5:0] main_spiflash_phy_sink_payload_len;
wire    [7:0] main_spiflash_phy_sink_payload_mask;
wire    [3:0] main_spiflash_phy_sink_payload_width;
reg           main_spiflash_phy_sink_ready = 1'd0;
wire          main_spiflash_phy_sink_valid;
reg           main_spiflash_phy_source_first = 1'd0;
reg           main_spiflash_phy_source_last = 1'd0;
wire   [31:0] main_spiflash_phy_source_payload_data;
wire          main_spiflash_phy_source_ready;
reg           main_spiflash_phy_source_valid = 1'd0;
wire    [7:0] main_spiflash_phy_spi_clk_divisor;
reg     [7:0] main_spiflash_phy_sr_cnt = 8'd0;
reg     [7:0] main_spiflash_phy_sr_cnt_litespiphy_next_value0 = 8'd0;
reg           main_spiflash_phy_sr_cnt_litespiphy_next_value_ce0 = 1'd0;
reg    [31:0] main_spiflash_phy_sr_in = 32'd0;
reg           main_spiflash_phy_sr_in_shift = 1'd0;
reg    [31:0] main_spiflash_phy_sr_out = 32'd0;
reg           main_spiflash_phy_sr_out_load = 1'd0;
reg           main_spiflash_phy_sr_out_shift = 1'd0;
reg     [7:0] main_spiflash_phy_storage = 8'd0;
wire          main_spiflash_phy_wait;
reg     [7:0] main_storage = 8'd0;
wire          main_wait;
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_basesoc_bus_error = builder_error;
assign main_reset = ((~main_rst_n) | (~user_btn_n0));
assign main_clkin = clk10;
assign sys_clk = main_clkout;
assign main_locked = (builder_gatematepll_locked_s1 & (~main_reset));
assign main_basesoc_adapted_interface_dat_w = main_basesoc_idbus_dat_w;
assign main_basesoc_idbus_dat_r = main_basesoc_adapted_interface_dat_r;
assign main_basesoc_adapted_interface_sel = main_basesoc_idbus_sel;
assign main_basesoc_adapted_interface_cyc = main_basesoc_idbus_cyc;
assign main_basesoc_adapted_interface_stb = main_basesoc_idbus_stb;
assign main_basesoc_idbus_ack = main_basesoc_adapted_interface_ack;
assign main_basesoc_adapted_interface_we = main_basesoc_idbus_we;
assign main_basesoc_adapted_interface_cti = main_basesoc_idbus_cti;
assign main_basesoc_adapted_interface_bte = main_basesoc_idbus_bte;
assign main_basesoc_idbus_err = main_basesoc_adapted_interface_err;
assign main_basesoc_adapted_interface_adr = main_basesoc_idbus_adr[31:2];
assign main_spiflash_core_litespimmap_bus_dat_w = main_socbushandler_adapted_interface_dat_w;
assign main_socbushandler_adapted_interface_dat_r = main_spiflash_core_litespimmap_bus_dat_r;
assign main_spiflash_core_litespimmap_bus_sel = main_socbushandler_adapted_interface_sel;
assign main_spiflash_core_litespimmap_bus_cyc = main_socbushandler_adapted_interface_cyc;
assign main_spiflash_core_litespimmap_bus_stb = main_socbushandler_adapted_interface_stb;
assign main_socbushandler_adapted_interface_ack = main_spiflash_core_litespimmap_bus_ack;
assign main_spiflash_core_litespimmap_bus_we = main_socbushandler_adapted_interface_we;
assign main_spiflash_core_litespimmap_bus_cti = main_socbushandler_adapted_interface_cti;
assign main_spiflash_core_litespimmap_bus_bte = main_socbushandler_adapted_interface_bte;
assign main_socbushandler_adapted_interface_err = main_spiflash_core_litespimmap_bus_err;
always @(*) begin
    main_spiflash_core_litespimmap_bus_adr <= 30'd0;
    main_spiflash_core_litespimmap_bus_adr <= main_socbushandler_adapted_interface_adr;
    main_spiflash_core_litespimmap_bus_adr <= (main_socbushandler_adapted_interface_adr - 22'd2097152);
end
assign builder_shared_adr = builder_self0;
assign builder_shared_dat_w = builder_self1;
assign builder_shared_sel = builder_self2;
assign builder_shared_cyc = builder_self3;
assign builder_shared_stb = builder_self4;
assign builder_shared_we = builder_self5;
assign builder_shared_cti = builder_self6;
assign builder_shared_bte = builder_self7;
assign main_basesoc_adapted_interface_dat_r = builder_shared_dat_r;
assign main_basesoc_adapted_interface_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_adapted_interface_err = (builder_shared_err & (builder_grant == 1'd0));
assign builder_request = {main_basesoc_adapted_interface_cyc};
assign builder_grant = 1'd0;
always @(*) begin
    builder_slave_sel <= 4'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_slave_sel[1] <= (builder_shared_adr[29:11] == 12'd2048);
    builder_slave_sel[2] <= (builder_shared_adr[29:21] == 1'd1);
    builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd33280);
end
assign main_basesoc_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_ram_bus_bte = builder_shared_bte;
assign main_socbushandler_adapted_interface_adr = builder_shared_adr;
assign main_socbushandler_adapted_interface_dat_w = builder_shared_dat_w;
assign main_socbushandler_adapted_interface_sel = builder_shared_sel;
assign main_socbushandler_adapted_interface_stb = builder_shared_stb;
assign main_socbushandler_adapted_interface_we = builder_shared_we;
assign main_socbushandler_adapted_interface_cti = builder_shared_cti;
assign main_socbushandler_adapted_interface_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_basesoc_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_socbushandler_adapted_interface_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign builder_shared_err = (((main_basesoc_basesoc_ram_bus_err | main_basesoc_ram_bus_ram_bus_err) | main_socbushandler_adapted_interface_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= (((main_basesoc_basesoc_ram_bus_ack | main_basesoc_ram_bus_ram_bus_ack) | main_socbushandler_adapted_interface_ack) | builder_interface0_ack);
    builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & main_basesoc_basesoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_basesoc_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_socbushandler_adapted_interface_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
always @(*) begin
    main_basesoc_mbus_rdata0 <= 32'd0;
    main_basesoc_mbus_rdata0 <= main_basesoc_mbus_rdata1;
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata0 <= main_basesoc_idbus_dat_r;
    end
end
always @(*) begin
    builder_femtorv_next_state <= 1'd0;
    main_basesoc_idbus_adr_femtorv_next_value0 <= 32'd0;
    main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd0;
    main_basesoc_idbus_cyc <= 1'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value1 <= 32'd0;
    main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd0;
    main_basesoc_idbus_sel_femtorv_next_value2 <= 4'd0;
    main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd0;
    main_basesoc_idbus_stb <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value3 <= 1'd0;
    main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd0;
    main_basesoc_latch <= 1'd0;
    main_basesoc_mbus_rbusy <= 1'd0;
    main_basesoc_mbus_wbusy <= 1'd0;
    builder_femtorv_next_state <= builder_femtorv_state;
    case (builder_femtorv_state)
        1'd1: begin
            main_basesoc_idbus_stb <= 1'd1;
            main_basesoc_idbus_cyc <= 1'd1;
            main_basesoc_mbus_wbusy <= 1'd1;
            main_basesoc_mbus_rbusy <= 1'd1;
            if (main_basesoc_idbus_ack) begin
                main_basesoc_mbus_wbusy <= 1'd0;
                main_basesoc_mbus_rbusy <= 1'd0;
                main_basesoc_latch <= 1'd1;
                builder_femtorv_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_idbus_adr_femtorv_next_value0 <= main_basesoc_mbus_addr;
            main_basesoc_idbus_adr_femtorv_next_value_ce0 <= 1'd1;
            main_basesoc_idbus_dat_w_femtorv_next_value1 <= main_basesoc_mbus_wdata;
            main_basesoc_idbus_dat_w_femtorv_next_value_ce1 <= 1'd1;
            main_basesoc_idbus_sel_femtorv_next_value2 <= main_basesoc_mbus_wmask;
            main_basesoc_idbus_sel_femtorv_next_value_ce2 <= 1'd1;
            if ((main_basesoc_mbus_rstrb | (main_basesoc_mbus_wmask != 1'd0))) begin
                main_basesoc_idbus_we_femtorv_next_value3 <= (main_basesoc_mbus_wmask != 1'd0);
                main_basesoc_idbus_we_femtorv_next_value_ce3 <= 1'd1;
                builder_femtorv_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_basesoc_adr = main_basesoc_basesoc_ram_bus_adr[14:0];
assign main_basesoc_basesoc_ram_bus_dat_r = main_basesoc_basesoc_dat_r;
always @(*) begin
    main_basesoc_ram_we <= 4'd0;
    main_basesoc_ram_we[0] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[0]);
    main_basesoc_ram_we[1] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[1]);
    main_basesoc_ram_we[2] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[2]);
    main_basesoc_ram_we[3] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[3]);
end
assign main_basesoc_ram_adr = main_basesoc_ram_bus_ram_bus_adr[10:0];
assign main_basesoc_ram_bus_ram_bus_dat_r = main_basesoc_ram_dat_r;
assign main_basesoc_ram_dat_w = main_basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= main_basesoc_tx_data[0];
                main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_spiflash_phy_div = main_spiflash_phy_spi_clk_divisor;
always @(*) begin
    main_spiflash_phy_dq_o <= 4'd0;
    case (main_spiflash_phy_sink_payload_width)
        1'd1: begin
            main_spiflash_phy_dq_o <= main_spiflash_phy_sr_out[31];
        end
        2'd2: begin
            main_spiflash_phy_dq_o <= main_spiflash_phy_sr_out[31:30];
        end
        3'd4: begin
            main_spiflash_phy_dq_o <= main_spiflash_phy_sr_out[31:28];
        end
        4'd8: begin
            main_spiflash_phy_dq_o <= main_spiflash_phy_sr_out[31:24];
        end
    endcase
end
assign main_spiflash_phy_source_payload_data = main_spiflash_phy_sr_in;
assign main_spiflash_phy_spi_clk_divisor = main_spiflash_phy_storage;
assign main_spiflash_phy_posedge = ((main_spiflash_phy_en & (~main_spiflash_phy_clk)) & (main_spiflash_phy_cnt == main_spiflash_phy_div));
assign main_spiflash_phy_negedge = ((main_spiflash_phy_en & main_spiflash_phy_clk) & (main_spiflash_phy_cnt == main_spiflash_phy_div));
assign main_spiflash_phy_wait = (main_spiflash_phy_cs != 1'd0);
assign main_spiflash_phy_enable = main_spiflash_phy_done;
assign main_spiflash_phy_cs_n = (~({1{main_spiflash_phy_enable}} & main_spiflash_phy_cs));
assign main_spiflash_phy_done = (main_spiflash_phy_count == 1'd0);
always @(*) begin
    builder_litespiphy_next_state <= 2'd0;
    main_spiflash_phy_dq_oe_litespiphy_next_value1 <= 4'd0;
    main_spiflash_phy_dq_oe_litespiphy_next_value_ce1 <= 1'd0;
    main_spiflash_phy_en <= 1'd0;
    main_spiflash_phy_sink_ready <= 1'd0;
    main_spiflash_phy_source_last <= 1'd0;
    main_spiflash_phy_source_valid <= 1'd0;
    main_spiflash_phy_sr_cnt_litespiphy_next_value0 <= 8'd0;
    main_spiflash_phy_sr_cnt_litespiphy_next_value_ce0 <= 1'd0;
    main_spiflash_phy_sr_in_shift <= 1'd0;
    main_spiflash_phy_sr_out_load <= 1'd0;
    main_spiflash_phy_sr_out_shift <= 1'd0;
    builder_litespiphy_next_state <= builder_litespiphy_state;
    case (builder_litespiphy_state)
        1'd1: begin
            main_spiflash_phy_en <= 1'd1;
            if (main_spiflash_phy_posedge_reg2) begin
                main_spiflash_phy_sr_in_shift <= 1'd1;
            end
            if (main_spiflash_phy_negedge) begin
                main_spiflash_phy_sr_out_shift <= 1'd1;
            end
            if (main_spiflash_phy_negedge) begin
                main_spiflash_phy_sr_cnt_litespiphy_next_value0 <= (main_spiflash_phy_sr_cnt - main_spiflash_phy_sink_payload_width);
                main_spiflash_phy_sr_cnt_litespiphy_next_value_ce0 <= 1'd1;
                if ((main_spiflash_phy_sr_cnt == 1'd0)) begin
                    builder_litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (((main_spiflash_phy_spi_clk_divisor > 1'd0) | main_spiflash_phy_posedge_reg2)) begin
                main_spiflash_phy_sink_ready <= 1'd1;
                main_spiflash_phy_sr_in_shift <= (main_spiflash_phy_spi_clk_divisor == 1'd0);
                builder_litespiphy_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_spiflash_phy_source_valid <= 1'd1;
            main_spiflash_phy_source_last <= 1'd1;
            main_spiflash_phy_dq_oe_litespiphy_next_value1 <= 1'd0;
            main_spiflash_phy_dq_oe_litespiphy_next_value_ce1 <= 1'd1;
            if (main_spiflash_phy_source_ready) begin
                builder_litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_spiflash_phy_enable & main_spiflash_phy_sink_valid)) begin
                main_spiflash_phy_sr_cnt_litespiphy_next_value0 <= (main_spiflash_phy_sink_payload_len - main_spiflash_phy_sink_payload_width);
                main_spiflash_phy_sr_cnt_litespiphy_next_value_ce0 <= 1'd1;
                main_spiflash_phy_dq_oe_litespiphy_next_value1 <= main_spiflash_phy_sink_payload_mask;
                main_spiflash_phy_dq_oe_litespiphy_next_value_ce1 <= 1'd1;
                main_spiflash_phy_sr_out_load <= 1'd1;
                builder_litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_spiflash_phy_cs = main_spiflash_core_cs;
assign main_spiflash_core_litespimmap_sink_valid = main_spiflash_core_user_port_source_valid;
assign main_spiflash_core_user_port_source_ready = main_spiflash_core_litespimmap_sink_ready;
assign main_spiflash_core_litespimmap_sink_first = main_spiflash_core_user_port_source_first;
assign main_spiflash_core_litespimmap_sink_last = main_spiflash_core_user_port_source_last;
assign main_spiflash_core_litespimmap_sink_payload_data = main_spiflash_core_user_port_source_payload_data;
assign main_spiflash_core_user_port_sink_valid = main_spiflash_core_litespimmap_source_valid;
assign main_spiflash_core_litespimmap_source_ready = main_spiflash_core_user_port_sink_ready;
assign main_spiflash_core_user_port_sink_first = main_spiflash_core_litespimmap_source_first;
assign main_spiflash_core_user_port_sink_last = main_spiflash_core_litespimmap_source_last;
assign main_spiflash_core_user_port_sink_payload_data = main_spiflash_core_litespimmap_source_payload_data;
assign main_spiflash_core_user_port_sink_payload_len = main_spiflash_core_litespimmap_source_payload_len;
assign main_spiflash_core_user_port_sink_payload_width = main_spiflash_core_litespimmap_source_payload_width;
assign main_spiflash_core_user_port_sink_payload_mask = main_spiflash_core_litespimmap_source_payload_mask;
assign main_spiflash_phy_sink_valid = main_spiflash_core_source_valid;
assign main_spiflash_core_source_ready = main_spiflash_phy_sink_ready;
assign main_spiflash_phy_sink_first = main_spiflash_core_source_first;
assign main_spiflash_phy_sink_last = main_spiflash_core_source_last;
assign main_spiflash_phy_sink_payload_data = main_spiflash_core_source_payload_data;
assign main_spiflash_phy_sink_payload_len = main_spiflash_core_source_payload_len;
assign main_spiflash_phy_sink_payload_width = main_spiflash_core_source_payload_width;
assign main_spiflash_phy_sink_payload_mask = main_spiflash_core_source_payload_mask;
assign main_spiflash_core_sink_valid = main_spiflash_phy_source_valid;
assign main_spiflash_phy_source_ready = main_spiflash_core_sink_ready;
assign main_spiflash_core_sink_first = main_spiflash_phy_source_first;
assign main_spiflash_core_sink_last = main_spiflash_phy_source_last;
assign main_spiflash_core_sink_payload_data = main_spiflash_phy_source_payload_data;
assign main_spiflash_core_internal_port_sink_valid = main_spiflash_core_user_port_sink_valid;
assign main_spiflash_core_user_port_sink_ready = main_spiflash_core_internal_port_sink_ready;
assign main_spiflash_core_internal_port_sink_first = main_spiflash_core_user_port_sink_first;
assign main_spiflash_core_internal_port_sink_last = main_spiflash_core_user_port_sink_last;
assign main_spiflash_core_internal_port_sink_payload_data = main_spiflash_core_user_port_sink_payload_data;
assign main_spiflash_core_internal_port_sink_payload_len = main_spiflash_core_user_port_sink_payload_len;
assign main_spiflash_core_internal_port_sink_payload_width = main_spiflash_core_user_port_sink_payload_width;
assign main_spiflash_core_internal_port_sink_payload_mask = main_spiflash_core_user_port_sink_payload_mask;
assign main_spiflash_core_user_port_source_valid = main_spiflash_core_internal_port_source_valid;
assign main_spiflash_core_internal_port_source_ready = main_spiflash_core_user_port_source_ready;
assign main_spiflash_core_user_port_source_first = main_spiflash_core_internal_port_source_first;
assign main_spiflash_core_user_port_source_last = main_spiflash_core_internal_port_source_last;
assign main_spiflash_core_user_port_source_payload_data = main_spiflash_core_internal_port_source_payload_data;
assign builder_litespi_tx_mux_sink_valid = main_spiflash_core_internal_port_sink_valid;
assign main_spiflash_core_internal_port_sink_ready = builder_litespi_tx_mux_sink_ready;
assign builder_litespi_tx_mux_sink_first = main_spiflash_core_internal_port_sink_first;
assign builder_litespi_tx_mux_sink_last = main_spiflash_core_internal_port_sink_last;
assign builder_litespi_tx_mux_sink_payload_data = main_spiflash_core_internal_port_sink_payload_data;
assign builder_litespi_tx_mux_sink_payload_len = main_spiflash_core_internal_port_sink_payload_len;
assign builder_litespi_tx_mux_sink_payload_width = main_spiflash_core_internal_port_sink_payload_width;
assign builder_litespi_tx_mux_sink_payload_mask = main_spiflash_core_internal_port_sink_payload_mask;
assign main_spiflash_core_internal_port_source_valid = builder_litespi_rx_demux_source_valid;
assign builder_litespi_rx_demux_source_ready = main_spiflash_core_internal_port_source_ready;
assign main_spiflash_core_internal_port_source_first = builder_litespi_rx_demux_source_first;
assign main_spiflash_core_internal_port_source_last = builder_litespi_rx_demux_source_last;
assign main_spiflash_core_internal_port_source_payload_data = builder_litespi_rx_demux_source_payload_data;
assign builder_litespi_request = {main_spiflash_core_litespimmap_request};
assign main_spiflash_core_source_valid = builder_litespi_tx_mux_source_valid;
assign builder_litespi_tx_mux_source_ready = main_spiflash_core_source_ready;
assign main_spiflash_core_source_first = builder_litespi_tx_mux_source_first;
assign main_spiflash_core_source_last = builder_litespi_tx_mux_source_last;
assign main_spiflash_core_source_payload_data = builder_litespi_tx_mux_source_payload_data;
assign main_spiflash_core_source_payload_len = builder_litespi_tx_mux_source_payload_len;
assign main_spiflash_core_source_payload_width = builder_litespi_tx_mux_source_payload_width;
assign main_spiflash_core_source_payload_mask = builder_litespi_tx_mux_source_payload_mask;
assign builder_litespi_tx_mux_sel = builder_litespi_grant;
assign builder_litespi_rx_demux_sink_valid = main_spiflash_core_sink_valid;
assign main_spiflash_core_sink_ready = builder_litespi_rx_demux_sink_ready;
assign builder_litespi_rx_demux_sink_first = main_spiflash_core_sink_first;
assign builder_litespi_rx_demux_sink_last = main_spiflash_core_sink_last;
assign builder_litespi_rx_demux_sink_payload_data = main_spiflash_core_sink_payload_data;
assign builder_litespi_rx_demux_sel = builder_litespi_grant;
always @(*) begin
    main_spiflash_core_cs <= 1'd0;
    case (builder_litespi_grant)
        1'd0: begin
            main_spiflash_core_cs <= main_spiflash_core_litespimmap_cs;
        end
    endcase
end
assign builder_litespi_grant = 1'd0;
always @(*) begin
    builder_litespi_tx_mux_sink_ready <= 1'd0;
    builder_litespi_tx_mux_source_first <= 1'd0;
    builder_litespi_tx_mux_source_last <= 1'd0;
    builder_litespi_tx_mux_source_payload_data <= 32'd0;
    builder_litespi_tx_mux_source_payload_len <= 6'd0;
    builder_litespi_tx_mux_source_payload_mask <= 8'd0;
    builder_litespi_tx_mux_source_payload_width <= 4'd0;
    builder_litespi_tx_mux_source_valid <= 1'd0;
    case (builder_litespi_tx_mux_sel)
        1'd0: begin
            builder_litespi_tx_mux_source_valid <= builder_litespi_tx_mux_sink_valid;
            builder_litespi_tx_mux_sink_ready <= builder_litespi_tx_mux_source_ready;
            builder_litespi_tx_mux_source_first <= builder_litespi_tx_mux_sink_first;
            builder_litespi_tx_mux_source_last <= builder_litespi_tx_mux_sink_last;
            builder_litespi_tx_mux_source_payload_data <= builder_litespi_tx_mux_sink_payload_data;
            builder_litespi_tx_mux_source_payload_len <= builder_litespi_tx_mux_sink_payload_len;
            builder_litespi_tx_mux_source_payload_width <= builder_litespi_tx_mux_sink_payload_width;
            builder_litespi_tx_mux_source_payload_mask <= builder_litespi_tx_mux_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    builder_litespi_rx_demux_sink_ready <= 1'd0;
    builder_litespi_rx_demux_source_first <= 1'd0;
    builder_litespi_rx_demux_source_last <= 1'd0;
    builder_litespi_rx_demux_source_payload_data <= 32'd0;
    builder_litespi_rx_demux_source_valid <= 1'd0;
    case (builder_litespi_rx_demux_sel)
        1'd0: begin
            builder_litespi_rx_demux_source_valid <= builder_litespi_rx_demux_sink_valid;
            builder_litespi_rx_demux_sink_ready <= builder_litespi_rx_demux_source_ready;
            builder_litespi_rx_demux_source_first <= builder_litespi_rx_demux_sink_first;
            builder_litespi_rx_demux_source_last <= builder_litespi_rx_demux_sink_last;
            builder_litespi_rx_demux_source_payload_data <= builder_litespi_rx_demux_sink_payload_data;
        end
    endcase
end
assign main_spiflash_core_litespimmap_spi_dummy_bits = main_spiflash_core_litespimmap_storage;
assign main_spiflash_core_litespimmap_write_enabled = 1'd0;
always @(*) begin
    main_spiflash_core_litespimmap_cs <= 1'd0;
    if (main_spiflash_core_litespimmap_request) begin
        main_spiflash_core_litespimmap_cs <= 1'd1;
    end
end
assign main_spiflash_core_litespimmap_done = (main_spiflash_core_litespimmap_count == 1'd0);
always @(*) begin
    builder_litespi_next_state <= 4'd0;
    main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= 30'd0;
    main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd0;
    main_spiflash_core_litespimmap_burst_cs_litespi_next_value <= 1'd0;
    main_spiflash_core_litespimmap_burst_cs_litespi_next_value_ce <= 1'd0;
    main_spiflash_core_litespimmap_bus_ack <= 1'd0;
    main_spiflash_core_litespimmap_bus_dat_r <= 32'd0;
    main_spiflash_core_litespimmap_byte_count_litespi_t_next_value <= 2'd0;
    main_spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd0;
    main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 <= 32'd0;
    main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd0;
    main_spiflash_core_litespimmap_request <= 1'd0;
    main_spiflash_core_litespimmap_sink_ready <= 1'd0;
    main_spiflash_core_litespimmap_source_last <= 1'd0;
    main_spiflash_core_litespimmap_source_payload_data <= 32'd0;
    main_spiflash_core_litespimmap_source_payload_len <= 6'd0;
    main_spiflash_core_litespimmap_source_payload_mask <= 8'd0;
    main_spiflash_core_litespimmap_source_payload_width <= 4'd0;
    main_spiflash_core_litespimmap_source_valid <= 1'd0;
    main_spiflash_core_litespimmap_wait <= 1'd0;
    main_spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
    main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd0;
    main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= 4'd0;
    main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd0;
    builder_litespi_next_state <= builder_litespi_state;
    case (builder_litespi_state)
        1'd1: begin
            main_spiflash_core_litespimmap_request <= 1'd0;
            if (main_spiflash_core_litespimmap_write_mask[0]) begin
                builder_litespi_next_state <= 2'd2;
                main_spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd1;
                main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
            end else begin
                if ((main_spiflash_core_litespimmap_byte_count == 2'd3)) begin
                    main_spiflash_core_litespimmap_bus_ack <= 1'd1;
                    main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= (main_spiflash_core_litespimmap_burst_adr + 1'd1);
                    main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    builder_litespi_next_state <= 1'd0;
                    main_spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    main_spiflash_core_litespimmap_byte_count_litespi_t_next_value <= (main_spiflash_core_litespimmap_byte_count + 1'd1);
                    main_spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= {main_spiflash_core_litespimmap0, main_spiflash_core_litespimmap_write_mask[3:1]};
                    main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_source_valid <= 1'd1;
            if ((main_spiflash_core_litespimmap_write_enabled & main_spiflash_core_litespimmap_write)) begin
                main_spiflash_core_litespimmap_source_payload_data <= 2'd2;
            end else begin
                main_spiflash_core_litespimmap_source_payload_data <= 2'd3;
            end
            main_spiflash_core_litespimmap_source_payload_len <= 4'd8;
            main_spiflash_core_litespimmap_source_payload_width <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_mask <= 1'd1;
            main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= main_spiflash_core_litespimmap_bus_adr;
            main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (main_spiflash_core_litespimmap_source_ready) begin
                builder_litespi_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (main_spiflash_core_litespimmap_sink_valid) begin
                builder_litespi_next_state <= 3'd4;
            end
        end
        3'd4: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_source_valid <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_width <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_mask <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_data <= {main_spiflash_core_litespimmap_bus_adr, main_spiflash_core_litespimmap_byte_count};
            main_spiflash_core_litespimmap_source_payload_len <= 5'd24;
            main_spiflash_core_litespimmap_burst_cs_litespi_next_value <= 1'd1;
            main_spiflash_core_litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= main_spiflash_core_litespimmap_bus_adr;
            main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (main_spiflash_core_litespimmap_source_ready) begin
                builder_litespi_next_state <= 3'd5;
            end
        end
        3'd5: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (main_spiflash_core_litespimmap_sink_valid) begin
                if ((main_spiflash_core_litespimmap_write_enabled & main_spiflash_core_litespimmap_write)) begin
                    builder_litespi_next_state <= 4'd10;
                end else begin
                    if ((main_spiflash_core_litespimmap_spi_dummy_bits == 1'd0)) begin
                        builder_litespi_next_state <= 4'd8;
                    end else begin
                        builder_litespi_next_state <= 3'd6;
                    end
                end
            end
        end
        3'd6: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_source_valid <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_width <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_mask <= 1'd0;
            main_spiflash_core_litespimmap_source_payload_data <= main_spiflash_core_litespimmap_dummy;
            main_spiflash_core_litespimmap_source_payload_len <= main_spiflash_core_litespimmap_spi_dummy_bits;
            if (main_spiflash_core_litespimmap_source_ready) begin
                builder_litespi_next_state <= 3'd7;
            end
        end
        3'd7: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (main_spiflash_core_litespimmap_sink_valid) begin
                builder_litespi_next_state <= 4'd8;
            end
        end
        4'd8: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_source_valid <= 1'd1;
            main_spiflash_core_litespimmap_source_last <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_width <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_len <= 6'd32;
            main_spiflash_core_litespimmap_source_payload_mask <= 1'd0;
            if (main_spiflash_core_litespimmap_source_ready) begin
                builder_litespi_next_state <= 4'd9;
            end
        end
        4'd9: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_sink_ready <= 1'd1;
            main_spiflash_core_litespimmap_bus_dat_r <= {main_spiflash_core_litespimmap_sink_payload_data[7:0], main_spiflash_core_litespimmap_sink_payload_data[15:8], main_spiflash_core_litespimmap_sink_payload_data[23:16], main_spiflash_core_litespimmap_sink_payload_data[31:24]};
            if (main_spiflash_core_litespimmap_sink_valid) begin
                main_spiflash_core_litespimmap_bus_ack <= 1'd1;
                main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= (main_spiflash_core_litespimmap_burst_adr + 1'd1);
                main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                builder_litespi_next_state <= 1'd0;
            end
        end
        4'd10: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_source_valid <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_width <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_mask <= 1'd1;
            main_spiflash_core_litespimmap_source_payload_data <= main_spiflash_core_litespimmap_data_write;
            main_spiflash_core_litespimmap_source_payload_len <= 4'd8;
            if (main_spiflash_core_litespimmap_source_ready) begin
                builder_litespi_next_state <= 4'd11;
            end
        end
        4'd11: begin
            main_spiflash_core_litespimmap_request <= 1'd1;
            main_spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (main_spiflash_core_litespimmap_sink_valid) begin
                if ((main_spiflash_core_litespimmap_byte_count != 2'd3)) begin
                    main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= {main_spiflash_core_litespimmap1, main_spiflash_core_litespimmap_write_mask[3:1]};
                    main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                    main_spiflash_core_litespimmap_byte_count_litespi_t_next_value <= (main_spiflash_core_litespimmap_byte_count + 1'd1);
                    main_spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 <= (main_spiflash_core_litespimmap_data_write >>> 4'd8);
                    main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                    if (main_spiflash_core_litespimmap_write_mask[1]) begin
                        builder_litespi_next_state <= 4'd10;
                    end else begin
                        main_spiflash_core_litespimmap_request <= 1'd0;
                        main_spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                        main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                        builder_litespi_next_state <= 1'd1;
                    end
                end else begin
                    main_spiflash_core_litespimmap_bus_ack <= 1'd1;
                    main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= (main_spiflash_core_litespimmap_burst_adr + 1'd1);
                    main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    builder_litespi_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_spiflash_core_litespimmap_wait <= 1'd1;
            main_spiflash_core_litespimmap_burst_cs_litespi_next_value <= (main_spiflash_core_litespimmap_burst_cs & (~main_spiflash_core_litespimmap_done));
            main_spiflash_core_litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            main_spiflash_core_litespimmap_request <= main_spiflash_core_litespimmap_burst_cs;
            if ((main_spiflash_core_litespimmap_bus_cyc & main_spiflash_core_litespimmap_bus_stb)) begin
                main_spiflash_core_litespimmap_byte_count_litespi_t_next_value <= 1'd0;
                main_spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                if ((~main_spiflash_core_litespimmap_bus_we)) begin
                    if (((main_spiflash_core_litespimmap_burst_cs & (main_spiflash_core_litespimmap_bus_adr == main_spiflash_core_litespimmap_burst_adr)) & ((~main_spiflash_core_litespimmap_write_enabled) | (~main_spiflash_core_litespimmap_write)))) begin
                        builder_litespi_next_state <= 4'd8;
                    end else begin
                        main_spiflash_core_litespimmap_request <= 1'd0;
                        builder_litespi_next_state <= 2'd2;
                    end
                    main_spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    if (main_spiflash_core_litespimmap_write_enabled) begin
                        main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= main_spiflash_core_litespimmap_bus_sel;
                        main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                        main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 <= main_spiflash_core_litespimmap_bus_dat_w;
                        main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                        if ((((main_spiflash_core_litespimmap_burst_cs & (main_spiflash_core_litespimmap_bus_adr == main_spiflash_core_litespimmap_burst_adr)) & main_spiflash_core_litespimmap_bus_sel[0]) & main_spiflash_core_litespimmap_write)) begin
                            builder_litespi_next_state <= 4'd10;
                        end else begin
                            main_spiflash_core_litespimmap_request <= 1'd0;
                            builder_litespi_next_state <= 1'd1;
                        end
                        main_spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd1;
                        main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                    end
                end
            end
        end
    endcase
end
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 8'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {user_led_n7, user_led_n6, user_led_n5, user_led_n4, user_led_n3, user_led_n2, user_led_n1, user_led_n0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_wishbone2csr_next_state <= 1'd0;
    builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
    case (builder_wishbone2csr_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr;
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage;
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage;
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status;
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_out0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_out0_w = main_storage;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_mmap_dummy_bits0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_mmap_dummy_bits0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_mmap_dummy_bits0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_mmap_dummy_bits0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_mmap_dummy_bits0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_mmap_dummy_bits0_w = main_spiflash_core_litespimmap_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank3_clk_divisor0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_clk_divisor0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_clk_divisor0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_clk_divisor0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_clk_divisor0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_clk_divisor0_w = main_spiflash_phy_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank4_load0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_load0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_load0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_reload0_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_reload0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_reload0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_en0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank4_en0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_en0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_update_value0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_update_value0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_update_value0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_value_r = builder_csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank4_value_re <= 1'd0;
    builder_csr_bankarray_csrbank4_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_value_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_value_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_status_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_ev_status_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_status_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_pending_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_ev_pending_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_pending_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_ev_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_enable0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_load0_w = main_basesoc_timer_load_storage;
assign builder_csr_bankarray_csrbank4_reload0_w = main_basesoc_timer_reload_storage;
assign builder_csr_bankarray_csrbank4_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank4_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank4_value_w = main_basesoc_timer_value_status;
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank4_value_we;
assign main_basesoc_timer_status_status = main_basesoc_timer_zero0;
assign builder_csr_bankarray_csrbank4_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank4_ev_status_we;
assign main_basesoc_timer_pending_status = main_basesoc_timer_zero1;
assign builder_csr_bankarray_csrbank4_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank4_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank4_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_txfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank5_txfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_txfull_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_rxempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank5_rxempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_rxempty_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_status_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank5_ev_status_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_status_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_pending_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank5_ev_pending_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_pending_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_enable0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank5_ev_enable0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_enable0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_txempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank5_txempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_txempty_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_rxfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank5_rxfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_rxfull_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank5_txfull_we;
assign builder_csr_bankarray_csrbank5_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank5_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank5_ev_status_w = main_basesoc_uart_status_status;
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank5_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank5_ev_pending_w = main_basesoc_uart_pending_status;
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank5_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank5_ev_enable0_w = main_basesoc_uart_enable_storage;
assign builder_csr_bankarray_csrbank5_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank5_txempty_we;
assign builder_csr_bankarray_csrbank5_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank5_rxfull_we;
assign builder_csr_interconnect_adr = builder_interface1_adr;
assign builder_csr_interconnect_re = builder_interface1_re;
assign builder_csr_interconnect_we = builder_interface1_we;
assign builder_csr_interconnect_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface5_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_self0 <= 30'd0;
    case (builder_grant)
        default: begin
            builder_self0 <= main_basesoc_adapted_interface_adr;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 32'd0;
    case (builder_grant)
        default: begin
            builder_self1 <= main_basesoc_adapted_interface_dat_w;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 4'd0;
    case (builder_grant)
        default: begin
            builder_self2 <= main_basesoc_adapted_interface_sel;
        end
    endcase
end
always @(*) begin
    builder_self3 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self3 <= main_basesoc_adapted_interface_cyc;
        end
    endcase
end
always @(*) begin
    builder_self4 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self4 <= main_basesoc_adapted_interface_stb;
        end
    endcase
end
always @(*) begin
    builder_self5 <= 1'd0;
    case (builder_grant)
        default: begin
            builder_self5 <= main_basesoc_adapted_interface_we;
        end
    endcase
end
always @(*) begin
    builder_self6 <= 3'd0;
    case (builder_grant)
        default: begin
            builder_self6 <= main_basesoc_adapted_interface_cti;
        end
    endcase
end
always @(*) begin
    builder_self7 <= 2'd0;
    case (builder_grant)
        default: begin
            builder_self7 <= main_basesoc_adapted_interface_bte;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    if (main_basesoc_latch) begin
        main_basesoc_mbus_rdata1 <= main_basesoc_idbus_dat_r;
    end
    builder_femtorv_state <= builder_femtorv_next_state;
    if (main_basesoc_idbus_adr_femtorv_next_value_ce0) begin
        main_basesoc_idbus_adr <= main_basesoc_idbus_adr_femtorv_next_value0;
    end
    if (main_basesoc_idbus_dat_w_femtorv_next_value_ce1) begin
        main_basesoc_idbus_dat_w <= main_basesoc_idbus_dat_w_femtorv_next_value1;
    end
    if (main_basesoc_idbus_sel_femtorv_next_value_ce2) begin
        main_basesoc_idbus_sel <= main_basesoc_idbus_sel_femtorv_next_value2;
    end
    if (main_basesoc_idbus_we_femtorv_next_value_ce3) begin
        main_basesoc_idbus_we <= main_basesoc_idbus_we_femtorv_next_value3;
    end
    main_basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_basesoc_ram_bus_cyc & main_basesoc_basesoc_ram_bus_stb) & ((~main_basesoc_basesoc_ram_bus_ack) | main_basesoc_basesoc_adr_burst))) begin
        main_basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & ((~main_basesoc_ram_bus_ram_bus_ack) | main_basesoc_ram_adr_burst))) begin
        main_basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 25'd20615843;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 25'd20615843);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1) begin
        usb_uart_tx <= main_basesoc_usb_uart_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 25'd20615843);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    if (main_spiflash_phy_sr_out_load) begin
        main_spiflash_phy_sr_out <= (main_spiflash_phy_sink_payload_data <<< (6'd32 - main_spiflash_phy_sink_payload_len));
        main_spiflash_phy_sr_in <= 1'd0;
    end
    if (main_spiflash_phy_sr_out_shift) begin
        main_spiflash_phy_sr_out <= (main_spiflash_phy_sr_out <<< main_spiflash_phy_sink_payload_width);
    end
    if (main_spiflash_phy_sr_in_shift) begin
        case (main_spiflash_phy_sink_payload_width)
            1'd1: begin
                main_spiflash_phy_sr_in <= {main_spiflash_phy_sr_in, main_spiflash_phy_dq_i[1]};
            end
            2'd2: begin
                main_spiflash_phy_sr_in <= {main_spiflash_phy_sr_in, main_spiflash_phy_dq_i[1:0]};
            end
            3'd4: begin
                main_spiflash_phy_sr_in <= {main_spiflash_phy_sr_in, main_spiflash_phy_dq_i};
            end
            4'd8: begin
                main_spiflash_phy_sr_in <= {main_spiflash_phy_sr_in, main_spiflash_phy_dq_i};
            end
        endcase
    end
    main_spiflash_phy_posedge_reg <= main_spiflash_phy_posedge;
    main_spiflash_phy_posedge_reg2 <= main_spiflash_phy_posedge_reg;
    if ((main_spiflash_phy_en | main_spiflash_phy_en_int)) begin
        if ((main_spiflash_phy_cnt < main_spiflash_phy_div)) begin
            main_spiflash_phy_cnt <= (main_spiflash_phy_cnt + 1'd1);
        end else begin
            main_spiflash_phy_cnt <= 1'd0;
            main_spiflash_phy_clk <= (~main_spiflash_phy_clk);
        end
    end else begin
        main_spiflash_phy_clk <= 1'd0;
        main_spiflash_phy_cnt <= 1'd0;
    end
    if (main_spiflash_phy_wait) begin
        if ((~main_spiflash_phy_done)) begin
            main_spiflash_phy_count <= (main_spiflash_phy_count - 1'd1);
        end
    end else begin
        main_spiflash_phy_count <= 4'd11;
    end
    builder_litespiphy_state <= builder_litespiphy_next_state;
    if (main_spiflash_phy_sr_cnt_litespiphy_next_value_ce0) begin
        main_spiflash_phy_sr_cnt <= main_spiflash_phy_sr_cnt_litespiphy_next_value0;
    end
    if (main_spiflash_phy_dq_oe_litespiphy_next_value_ce1) begin
        main_spiflash_phy_dq_oe <= main_spiflash_phy_dq_oe_litespiphy_next_value1;
    end
    if (main_spiflash_core_litespimmap_wait) begin
        if ((~main_spiflash_core_litespimmap_done)) begin
            main_spiflash_core_litespimmap_count <= (main_spiflash_core_litespimmap_count - 1'd1);
        end
    end else begin
        main_spiflash_core_litespimmap_count <= 9'd256;
    end
    builder_litespi_state <= builder_litespi_next_state;
    if (main_spiflash_core_litespimmap_burst_cs_litespi_next_value_ce) begin
        main_spiflash_core_litespimmap_burst_cs <= main_spiflash_core_litespimmap_burst_cs_litespi_next_value;
    end
    if (main_spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce) begin
        main_spiflash_core_litespimmap_byte_count <= main_spiflash_core_litespimmap_byte_count_litespi_t_next_value;
    end
    if (main_spiflash_core_litespimmap_write_litespi_t_t_next_value_ce) begin
        main_spiflash_core_litespimmap_write <= main_spiflash_core_litespimmap_write_litespi_t_t_next_value;
    end
    if (main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0) begin
        main_spiflash_core_litespimmap_write_mask <= main_spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0;
    end
    if (main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1) begin
        main_spiflash_core_litespimmap_data_write <= main_spiflash_core_litespimmap_data_write_litespi_t_f_next_value1;
    end
    if (main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce) begin
        main_spiflash_core_litespimmap_burst_adr <= main_spiflash_core_litespimmap_burst_adr_litespi_f_next_value;
    end
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser[7])};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 21'd1500000;
    end
    builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_out0_re) begin
        main_storage <= builder_csr_bankarray_csrbank1_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank1_out0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_mmap_dummy_bits0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_mmap_dummy_bits0_re) begin
        main_spiflash_core_litespimmap_storage <= builder_csr_bankarray_csrbank2_mmap_dummy_bits0_r;
    end
    main_spiflash_core_litespimmap_re <= builder_csr_bankarray_csrbank2_mmap_dummy_bits0_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_clk_divisor0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_clk_divisor0_re) begin
        main_spiflash_phy_storage <= builder_csr_bankarray_csrbank3_clk_divisor0_r;
    end
    main_spiflash_phy_re <= builder_csr_bankarray_csrbank3_clk_divisor0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_load0_re) begin
        main_basesoc_timer_load_storage <= builder_csr_bankarray_csrbank4_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank4_load0_re;
    if (builder_csr_bankarray_csrbank4_reload0_re) begin
        main_basesoc_timer_reload_storage <= builder_csr_bankarray_csrbank4_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank4_reload0_re;
    if (builder_csr_bankarray_csrbank4_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank4_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank4_en0_re;
    if (builder_csr_bankarray_csrbank4_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank4_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank4_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank4_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank4_ev_status_re;
    if (builder_csr_bankarray_csrbank4_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank4_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank4_ev_pending_re;
    if (builder_csr_bankarray_csrbank4_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank4_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank4_ev_enable0_re;
    builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank5_sel) begin
        case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank5_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank5_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank5_ev_status_re;
    if (builder_csr_bankarray_csrbank5_ev_pending_re) begin
        main_basesoc_uart_pending_r <= builder_csr_bankarray_csrbank5_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank5_ev_pending_re;
    if (builder_csr_bankarray_csrbank5_ev_enable0_re) begin
        main_basesoc_uart_enable_storage <= builder_csr_bankarray_csrbank5_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank5_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank5_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank5_rxfull_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_idbus_we <= 1'd0;
        main_basesoc_mbus_rdata1 <= 32'd0;
        main_basesoc_basesoc_ram_bus_ack <= 1'd0;
        main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
        usb_uart_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_spiflash_phy_storage <= 8'd0;
        main_spiflash_phy_re <= 1'd0;
        main_spiflash_phy_cnt <= 8'd0;
        main_spiflash_phy_clk <= 1'd0;
        main_spiflash_phy_posedge_reg <= 1'd0;
        main_spiflash_phy_posedge_reg2 <= 1'd0;
        main_spiflash_phy_count <= 4'd11;
        main_spiflash_phy_dq_oe <= 4'd0;
        main_spiflash_phy_sr_out <= 32'd0;
        main_spiflash_phy_sr_in <= 32'd0;
        main_spiflash_core_litespimmap_burst_cs <= 1'd0;
        main_spiflash_core_litespimmap_count <= 9'd256;
        main_spiflash_core_litespimmap_write <= 1'd0;
        main_spiflash_core_litespimmap_write_mask <= 4'd0;
        main_spiflash_core_litespimmap_storage <= 8'd0;
        main_spiflash_core_litespimmap_re <= 1'd0;
        main_spiflash_core_litespimmap_data_write <= 32'd0;
        main_storage <= 8'd0;
        main_re <= 1'd0;
        main_chaser <= 8'd0;
        main_mode <= 1'd0;
        main_count <= 21'd1500000;
        builder_slave_sel_r <= 4'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_femtorv_state <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_litespiphy_state <= 2'd0;
        builder_litespi_state <= 4'd0;
        builder_wishbone2csr_state <= 1'd0;
    end
    builder_multiregimpl0 <= usb_uart_rx;
    builder_multiregimpl1 <= builder_multiregimpl0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance CC_USR_RSTN of CC_USR_RSTN Module.
//------------------------------------------------------------------------------
CC_USR_RSTN CC_USR_RSTN(
	// Outputs.
	.USR_RSTN (main_rst_n)
);

//------------------------------------------------------------------------------
// Memory rom: 6257-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6256];
initial begin
	$readmemh("colognechip_gatemate_evb_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("colognechip_gatemate_evb_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_ram_we[0])
		sram[main_basesoc_ram_adr][7:0] <= main_basesoc_ram_dat_w[7:0];
	if (main_basesoc_ram_we[1])
		sram[main_basesoc_ram_adr][15:8] <= main_basesoc_ram_dat_w[15:8];
	if (main_basesoc_ram_we[2])
		sram[main_basesoc_ram_adr][23:16] <= main_basesoc_ram_dat_w[23:16];
	if (main_basesoc_ram_we[3])
		sram[main_basesoc_ram_adr][31:24] <= main_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_ram_adr;
end
assign main_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("colognechip_gatemate_evb_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance CC_PLL of CC_PLL Module.
//------------------------------------------------------------------------------
CC_PLL #(
	// Parameters.
	.CI_FILTER_CONST (2'd2),
	.CLK180_DOUB     (1'd0),
	.CLK270_DOUB     (1'd0),
	.CP_FILTER_CONST (3'd4),
	.LOCK_REQ        (1'd1),
	.LOW_JITTER      (1'd1),
	.OUT_CLK         ("24.0"),
	.PERF_MD         ("ECONOMY"),
	.REF_CLK         ("10.0")
) CC_PLL (
	// Inputs.
	.CLK_FEEDBACK        (1'd0),
	.CLK_REF             (main_clkin),
	.USR_CLK_REF         (builder_gatematepll3),
	.USR_LOCKED_STDY_RST (1'd0),

	// Outputs.
	.CLK0                (main_clkout),
	.CLK180              (builder_gatematepll1),
	.CLK270              (builder_gatematepll2),
	.CLK90               (builder_gatematepll0),
	.CLK_REF_OUT         (builder_gatematepll4),
	.USR_PLL_LOCKED      (builder_gatematepll_locked_s1),
	.USR_PLL_LOCKED_STDY (builder_gatematepll5)
);

//------------------------------------------------------------------------------
// Instance FemtoRV32 of FemtoRV32 Module.
//------------------------------------------------------------------------------
FemtoRV32 #(
	// Parameters.
	.ADDR_WIDTH (6'd32),
	.RESET_ADDR (32'd0)
) FemtoRV32 (
	// Inputs.
	.clk       (sys_clk),
	.mem_rbusy (main_basesoc_mbus_rbusy),
	.mem_rdata (main_basesoc_mbus_rdata0),
	.mem_wbusy (main_basesoc_mbus_wbusy),
	.reset     ((~(sys_rst | main_basesoc_reset))),

	// Outputs.
	.mem_addr  (main_basesoc_mbus_addr),
	.mem_rstrb (main_basesoc_mbus_rstrb),
	.mem_wdata (main_basesoc_mbus_wdata),
	.mem_wmask (main_basesoc_mbus_wmask)
);

//------------------------------------------------------------------------------
// Instance CC_DFF of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF (
	// Inputs.
	.CLK (sys_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_locked)),

	// Outputs.
	.Q   (builder_rst1)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_1 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_1 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder_rst1),
	.EN  (1'd1),
	.SR  ((~main_locked)),

	// Outputs.
	.Q   (sys_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_2 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_2 (
	// Inputs.
	.CLK (sys_clk),
	.D   (main_spiflash_phy_clk),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (spiflash4x_clk)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_3 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_3 (
	// Inputs.
	.CLK (sys_clk),
	.D   (main_spiflash_phy_cs_n),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (spiflash4x_cs_n)
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF #(
	// Parameters.
	.FF_IBF (1'd1),
	.FF_OBF (1'd1)
) CC_IOBUF (
	// Inputs.
	.A  (builder__o[0]),
	.T  (builder_oe_n[0]),

	// Outputs.
	.Y  (builder__i[0]),

	// InOuts.
	.IO (spiflash4x_dq[0])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_1 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF #(
	// Parameters.
	.FF_IBF (1'd1),
	.FF_OBF (1'd1)
) CC_IOBUF_1 (
	// Inputs.
	.A  (builder__o[1]),
	.T  (builder_oe_n[1]),

	// Outputs.
	.Y  (builder__i[1]),

	// InOuts.
	.IO (spiflash4x_dq[1])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_2 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF #(
	// Parameters.
	.FF_IBF (1'd1),
	.FF_OBF (1'd1)
) CC_IOBUF_2 (
	// Inputs.
	.A  (builder__o[2]),
	.T  (builder_oe_n[2]),

	// Outputs.
	.Y  (builder__i[2]),

	// InOuts.
	.IO (spiflash4x_dq[2])
);

//------------------------------------------------------------------------------
// Instance CC_IOBUF_3 of CC_IOBUF Module.
//------------------------------------------------------------------------------
CC_IOBUF #(
	// Parameters.
	.FF_IBF (1'd1),
	.FF_OBF (1'd1)
) CC_IOBUF_3 (
	// Inputs.
	.A  (builder__o[3]),
	.T  (builder_oe_n[3]),

	// Outputs.
	.Y  (builder__i[3]),

	// InOuts.
	.IO (spiflash4x_dq[3])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_4 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_4 (
	// Inputs.
	.CLK (sys_clk),
	.D   (main_spiflash_phy_dq_o[0]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder__o[0])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_5 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_5 (
	// Inputs.
	.CLK (sys_clk),
	.D   (main_spiflash_phy_dq_o[1]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder__o[1])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_6 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_6 (
	// Inputs.
	.CLK (sys_clk),
	.D   (main_spiflash_phy_dq_o[2]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder__o[2])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_7 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_7 (
	// Inputs.
	.CLK (sys_clk),
	.D   (main_spiflash_phy_dq_o[3]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder__o[3])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_8 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_8 (
	// Inputs.
	.CLK (sys_clk),
	.D   ((~main_spiflash_phy_dq_oe[0])),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder_oe_n[0])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_9 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_9 (
	// Inputs.
	.CLK (sys_clk),
	.D   ((~main_spiflash_phy_dq_oe[1])),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder_oe_n[1])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_10 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_10 (
	// Inputs.
	.CLK (sys_clk),
	.D   ((~main_spiflash_phy_dq_oe[2])),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder_oe_n[2])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_11 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_11 (
	// Inputs.
	.CLK (sys_clk),
	.D   ((~main_spiflash_phy_dq_oe[3])),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (builder_oe_n[3])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_12 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_12 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder__i[0]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (main_spiflash_phy_dq_i[0])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_13 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_13 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder__i[1]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (main_spiflash_phy_dq_i[1])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_14 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_14 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder__i[2]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (main_spiflash_phy_dq_i[2])
);

//------------------------------------------------------------------------------
// Instance CC_DFF_15 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd0)
) CC_DFF_15 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder__i[3]),
	.EN  (1'd1),
	.SR  (1'd0),

	// Outputs.
	.Q   (main_spiflash_phy_dq_i[3])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-05-24 10:00:15.
//------------------------------------------------------------------------------
